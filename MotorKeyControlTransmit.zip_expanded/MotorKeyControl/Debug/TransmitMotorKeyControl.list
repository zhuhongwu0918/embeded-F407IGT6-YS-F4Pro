
TransmitMotorKeyControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000853c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080086cc  080086cc  000186cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089b0  080089b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080089b0  080089b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b8  080089b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b8  080089b8  000189b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080089c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004cb4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d28  20004d28  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026aec  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c16  00000000  00000000  00046b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  0004b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001858  00000000  00000000  0004d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e87  00000000  00000000  0004ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef7a  00000000  00000000  000748c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc2a6  00000000  00000000  00093841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016fae7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007418  00000000  00000000  0016fb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086b4 	.word	0x080086b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080086b4 	.word	0x080086b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <BEEP_GPIO_Init>:
  *             可选值：BEEPState_ON： 蜂鸣器响。
  * 返 回 值: 无
  * 说    明：
  */
void BEEP_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	BEEP_OFF;
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000572:	4802      	ldr	r0, [pc, #8]	; (800057c <BEEP_GPIO_Init+0x14>)
 8000574:	f002 f954 	bl	8002820 <HAL_GPIO_WritePin>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40022000 	.word	0x40022000

08000580 <BEEP_StateSet>:
  *             可选值：BEEPState_ON： 蜂鸣器响。
  * 返 回 值: 无
  * 说    明：该函数使用类似HALA库函数的编程方法，方便理解HAL库函数编程思想。
  */
void BEEP_StateSet(BEEPState_TypeDef state)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  /* 检查输入参数是否合法 */
  assert_param(BEEPState_TypeDef(state));

  /* 判断设置的蜂鸣器状态，如果设置为蜂鸣器响 */
  if(state==BEEPState_ON)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d106      	bne.n	800059e <BEEP_StateSet+0x1e>
  {
	  HAL_GPIO_WritePin(BEEP_GPIO,BEEP_GPIO_PIN,GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000596:	4807      	ldr	r0, [pc, #28]	; (80005b4 <BEEP_StateSet+0x34>)
 8000598:	f002 f942 	bl	8002820 <HAL_GPIO_WritePin>
  else /* state=BEEPState_OFF：设置蜂鸣器不响 */
  {
	HAL_GPIO_WritePin(BEEP_GPIO,BEEP_GPIO_PIN,GPIO_PIN_RESET);  // 输出低电平
//    BEEP_OFF;/* 蜂鸣器不响 */
  }
}
 800059c:	e005      	b.n	80005aa <BEEP_StateSet+0x2a>
	HAL_GPIO_WritePin(BEEP_GPIO,BEEP_GPIO_PIN,GPIO_PIN_RESET);  // 输出低电平
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <BEEP_StateSet+0x34>)
 80005a6:	f002 f93b 	bl	8002820 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40022000 	.word	0x40022000

080005b8 <didi>:
	  BEEP_StateSet(BEEPState_ON);
	  osDelay(100);
	  BEEP_StateSet(BEEPState_OFF);
}
void didi(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	  BEEP_StateSet(BEEPState_ON);
 80005bc:	2001      	movs	r0, #1
 80005be:	f7ff ffdf 	bl	8000580 <BEEP_StateSet>
	  osDelay(50);
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f004 fbf8 	bl	8004db8 <osDelay>
	  BEEP_StateSet(BEEPState_OFF);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ffd9 	bl	8000580 <BEEP_StateSet>
	  osDelay(50);
 80005ce:	2032      	movs	r0, #50	; 0x32
 80005d0:	f004 fbf2 	bl	8004db8 <osDelay>
	  BEEP_StateSet(BEEPState_ON);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f7ff ffd3 	bl	8000580 <BEEP_StateSet>
	  osDelay(50);
 80005da:	2032      	movs	r0, #50	; 0x32
 80005dc:	f004 fbec 	bl	8004db8 <osDelay>
	  BEEP_StateSet(BEEPState_OFF);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff ffcd 	bl	8000580 <BEEP_StateSet>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <KEY1_StateRead>:
  *           KEY_UP  ：按键没被按下
  * 说    明：无。
  */

KEYState_TypeDef KEY1_StateRead(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(KEY1_GPIO,KEY1_GPIO_PIN)==KEY1_DOWN_LEVEL)
 80005f0:	2101      	movs	r1, #1
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <KEY1_StateRead+0x40>)
 80005f4:	f002 f8fc 	bl	80027f0 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d113      	bne.n	8000626 <KEY1_StateRead+0x3a>
	  {
	    /* 延时一小段时间，消除抖动 */
	    HAL_Delay(20);
 80005fe:	2014      	movs	r0, #20
 8000600:	f001 fa42 	bl	8001a88 <HAL_Delay>
	    /* 延时时间后再来判断按键状态，如果还是按下状态说明按键确实被按下 */
	    if(HAL_GPIO_ReadPin(KEY1_GPIO,KEY1_GPIO_PIN)==KEY1_DOWN_LEVEL)
 8000604:	2101      	movs	r1, #1
 8000606:	4809      	ldr	r0, [pc, #36]	; (800062c <KEY1_StateRead+0x40>)
 8000608:	f002 f8f2 	bl	80027f0 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d109      	bne.n	8000626 <KEY1_StateRead+0x3a>
	    {
	      /* 等待按键弹开才退出按键扫描函数 */
	      while(HAL_GPIO_ReadPin(KEY1_GPIO,KEY1_GPIO_PIN)==KEY1_DOWN_LEVEL);
 8000612:	bf00      	nop
 8000614:	2101      	movs	r1, #1
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <KEY1_StateRead+0x40>)
 8000618:	f002 f8ea 	bl	80027f0 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0f8      	beq.n	8000614 <KEY1_StateRead+0x28>
	       /* 按键扫描完毕，确定按键被按下，返回按键被按下状态 */
	      return KEY_DOWN;
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <KEY1_StateRead+0x3c>
	    }
	  }
    return KEY_UP;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000

08000630 <KEY2_StateRead>:
  *           KEY_UP  ：按键没被按下
  * 说    明：无。
  */

KEYState_TypeDef KEY2_StateRead(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(KEY2_GPIO,KEY2_GPIO_PIN)==KEY2_DOWN_LEVEL)
 8000634:	2102      	movs	r1, #2
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <KEY2_StateRead+0x40>)
 8000638:	f002 f8da 	bl	80027f0 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d113      	bne.n	800066a <KEY2_StateRead+0x3a>
	  {
	    /* 延时一小段时间，消除抖动 */
	    HAL_Delay(20);
 8000642:	2014      	movs	r0, #20
 8000644:	f001 fa20 	bl	8001a88 <HAL_Delay>
	    /* 延时时间后再来判断按键状态，如果还是按下状态说明按键确实被按下 */
	    if(HAL_GPIO_ReadPin(KEY2_GPIO,KEY2_GPIO_PIN)==KEY2_DOWN_LEVEL)
 8000648:	2102      	movs	r1, #2
 800064a:	4809      	ldr	r0, [pc, #36]	; (8000670 <KEY2_StateRead+0x40>)
 800064c:	f002 f8d0 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d109      	bne.n	800066a <KEY2_StateRead+0x3a>
	    {
	      /* 等待按键弹开才退出按键扫描函数 */
	      while(HAL_GPIO_ReadPin(KEY2_GPIO,KEY2_GPIO_PIN)==KEY2_DOWN_LEVEL);
 8000656:	bf00      	nop
 8000658:	2102      	movs	r1, #2
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <KEY2_StateRead+0x40>)
 800065c:	f002 f8c8 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f8      	beq.n	8000658 <KEY2_StateRead+0x28>
	       /* 按键扫描完毕，确定按键被按下，返回按键被按下状态 */
	      return KEY_DOWN;
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <KEY2_StateRead+0x3c>
	    }
	  }
    return KEY_UP;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <KEY3_StateRead>:
  * 返 回 值: KEY_DOWN：按键被按下；
  *           KEY_UP  ：按键没被按下
  * 说    明：无。
  */
KEYState_TypeDef KEY3_StateRead(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* 读取此时按键值并判断是否是被按下状态，如果是被按下状态进入函数内 */
  if(HAL_GPIO_ReadPin(KEY3_GPIO,KEY3_GPIO_PIN)==KEY3_DOWN_LEVEL)
 8000678:	2104      	movs	r1, #4
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <KEY3_StateRead+0x40>)
 800067c:	f002 f8b8 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d113      	bne.n	80006ae <KEY3_StateRead+0x3a>
  {
    /* 延时一小段时间，消除抖动 */
    HAL_Delay(10);
 8000686:	200a      	movs	r0, #10
 8000688:	f001 f9fe 	bl	8001a88 <HAL_Delay>
    /* 延时时间后再来判断按键状态，如果还是按下状态说明按键确实被按下 */
    if(HAL_GPIO_ReadPin(KEY3_GPIO,KEY3_GPIO_PIN)==KEY3_DOWN_LEVEL)
 800068c:	2104      	movs	r1, #4
 800068e:	4809      	ldr	r0, [pc, #36]	; (80006b4 <KEY3_StateRead+0x40>)
 8000690:	f002 f8ae 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d109      	bne.n	80006ae <KEY3_StateRead+0x3a>
    {
      /* 等待按键弹开才退出按键扫描函数 */
      while(HAL_GPIO_ReadPin(KEY3_GPIO,KEY3_GPIO_PIN)==KEY3_DOWN_LEVEL);
 800069a:	bf00      	nop
 800069c:	2104      	movs	r1, #4
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <KEY3_StateRead+0x40>)
 80006a0:	f002 f8a6 	bl	80027f0 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f8      	beq.n	800069c <KEY3_StateRead+0x28>
       /* 按键扫描完毕，确定按键被按下，返回按键被按下状态 */
      return KEY_DOWN;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e000      	b.n	80006b0 <KEY3_StateRead+0x3c>
    }
  }
  /* 按键没被按下，返回没被按下状态 */
  return KEY_UP;
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000

080006b8 <KEY4_StateRead>:
  * 返 回 值: KEY_DOWN：按键被按下；
  *           KEY_UP  ：按键没被按下
  * 说    明：无。
  */
KEYState_TypeDef KEY4_StateRead(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* 读取此时按键值并判断是否是被按下状态，如果是被按下状态进入函数内 */
  if(HAL_GPIO_ReadPin(KEY4_GPIO,KEY4_GPIO_PIN)==KEY4_DOWN_LEVEL)
 80006bc:	2108      	movs	r1, #8
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <KEY4_StateRead+0x40>)
 80006c0:	f002 f896 	bl	80027f0 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d113      	bne.n	80006f2 <KEY4_StateRead+0x3a>
  {
    /* 延时一小段时间，消除抖动 */
    HAL_Delay(10);
 80006ca:	200a      	movs	r0, #10
 80006cc:	f001 f9dc 	bl	8001a88 <HAL_Delay>
    /* 延时时间后再来判断按键状态，如果还是按下状态说明按键确实被按下 */
    if(HAL_GPIO_ReadPin(KEY4_GPIO,KEY4_GPIO_PIN)==KEY4_DOWN_LEVEL)
 80006d0:	2108      	movs	r1, #8
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <KEY4_StateRead+0x40>)
 80006d4:	f002 f88c 	bl	80027f0 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d109      	bne.n	80006f2 <KEY4_StateRead+0x3a>
    {
      /* 等待按键弹开才退出按键扫描函数 */
      while(HAL_GPIO_ReadPin(KEY4_GPIO,KEY4_GPIO_PIN)==KEY4_DOWN_LEVEL);
 80006de:	bf00      	nop
 80006e0:	2108      	movs	r1, #8
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <KEY4_StateRead+0x40>)
 80006e4:	f002 f884 	bl	80027f0 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f8      	beq.n	80006e0 <KEY4_StateRead+0x28>
       /* 按键扫描完毕，确定按键被按下，返回按键被按下状态 */
      return KEY_DOWN;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e000      	b.n	80006f4 <KEY4_StateRead+0x3c>
    }
  }
  /* 按键没被按下，返回没被按下状态 */
  return KEY_UP;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <KEY5_StateRead>:
  * 返 回 值: KEY_DOWN：按键被按下；
  *           KEY_UP  ：按键没被按下
  * 说    明：无。
  */
KEYState_TypeDef KEY5_StateRead(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* 读取此时按键值并判断是否是被按下状态，如果是被按下状态进入函数内 */
  if(HAL_GPIO_ReadPin(KEY5_GPIO,KEY5_GPIO_PIN)==KEY5_DOWN_LEVEL)
 8000700:	2110      	movs	r1, #16
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <KEY5_StateRead+0x40>)
 8000704:	f002 f874 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d113      	bne.n	8000736 <KEY5_StateRead+0x3a>
  {
    /* 延时一小段时间，消除抖动 */
    HAL_Delay(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f001 f9ba 	bl	8001a88 <HAL_Delay>
    /* 延时时间后再来判断按键状态，如果还是按下状态说明按键确实被按下 */
    if(HAL_GPIO_ReadPin(KEY5_GPIO,KEY5_GPIO_PIN)==KEY5_DOWN_LEVEL)
 8000714:	2110      	movs	r1, #16
 8000716:	4809      	ldr	r0, [pc, #36]	; (800073c <KEY5_StateRead+0x40>)
 8000718:	f002 f86a 	bl	80027f0 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d109      	bne.n	8000736 <KEY5_StateRead+0x3a>
    {
      /* 等待按键弹开才退出按键扫描函数 */
      while(HAL_GPIO_ReadPin(KEY5_GPIO,KEY5_GPIO_PIN)==KEY5_DOWN_LEVEL);
 8000722:	bf00      	nop
 8000724:	2110      	movs	r1, #16
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <KEY5_StateRead+0x40>)
 8000728:	f002 f862 	bl	80027f0 <HAL_GPIO_ReadPin>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0f8      	beq.n	8000724 <KEY5_StateRead+0x28>
       /* 按键扫描完毕，确定按键被按下，返回按键被按下状态 */
      return KEY_DOWN;
 8000732:	2301      	movs	r3, #1
 8000734:	e000      	b.n	8000738 <KEY5_StateRead+0x3c>
    }
  }
  /* 按键没被按下，返回没被按下状态 */
  return KEY_UP;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000

08000740 <bsp_LED_GPIO_Init>:
  * 返 回 值: 无
  * 说    明：使用宏定义方法代替具体引脚号，方便程序移植，只要简单修改bsp_led.h
  *           文件相关宏定义就可以方便修改引脚。
  */
void bsp_LED_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
   /* 定义IO硬件初始化结构体变量 */
  GPIO_InitTypeDef GPIO_InitStruct;

	/* 使能(开启)LED引脚对应IO端口时钟 */
  LED1_RCC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <bsp_LED_GPIO_Init+0xcc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a2f      	ldr	r2, [pc, #188]	; (800080c <bsp_LED_GPIO_Init+0xcc>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <bsp_LED_GPIO_Init+0xcc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  LED2_RCC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <bsp_LED_GPIO_Init+0xcc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a28      	ldr	r2, [pc, #160]	; (800080c <bsp_LED_GPIO_Init+0xcc>)
 800076c:	f043 0310 	orr.w	r3, r3, #16
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <bsp_LED_GPIO_Init+0xcc>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0310 	and.w	r3, r3, #16
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  LED3_RCC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <bsp_LED_GPIO_Init+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a21      	ldr	r2, [pc, #132]	; (800080c <bsp_LED_GPIO_Init+0xcc>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <bsp_LED_GPIO_Init+0xcc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
  /* 配置LED1引脚输出电压 */
  HAL_GPIO_WritePin(LED1_GPIO, LED1_GPIO_PIN, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a0:	481b      	ldr	r0, [pc, #108]	; (8000810 <bsp_LED_GPIO_Init+0xd0>)
 80007a2:	f002 f83d 	bl	8002820 <HAL_GPIO_WritePin>

  /* 配置LED2引脚输出电压 */
  HAL_GPIO_WritePin(LED2_GPIO, LED2_GPIO_PIN, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	481a      	ldr	r0, [pc, #104]	; (8000814 <bsp_LED_GPIO_Init+0xd4>)
 80007ac:	f002 f838 	bl	8002820 <HAL_GPIO_WritePin>
  /* 配置LED3引脚输出电压 */
  HAL_GPIO_WritePin(LED2_GPIO, LED3_GPIO_PIN, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	4817      	ldr	r0, [pc, #92]	; (8000814 <bsp_LED_GPIO_Init+0xd4>)
 80007b6:	f002 f833 	bl	8002820 <HAL_GPIO_WritePin>
  /* 设定LED1对应引脚IO编号 */
  GPIO_InitStruct.Pin = LED1_GPIO_PIN;
 80007ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007be:	60fb      	str	r3, [r7, #12]
  /* 设定LED1对应引脚IO为输出模式 */
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  /* 设定LED1对应引脚IO操作速度 */
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
  /* 初始化LED1对应引脚IO */
  HAL_GPIO_Init(LED1_GPIO, &GPIO_InitStruct);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <bsp_LED_GPIO_Init+0xd0>)
 80007d0:	f001 fe72 	bl	80024b8 <HAL_GPIO_Init>

  /* 设定LED2对应引脚IO编号 */
  GPIO_InitStruct.Pin = LED2_GPIO_PIN;
 80007d4:	2320      	movs	r3, #32
 80007d6:	60fb      	str	r3, [r7, #12]
  /* 设定LED2对应引脚IO为输出模式 */
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
  /* 设定LED2对应引脚IO操作速度 */
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007dc:	2302      	movs	r3, #2
 80007de:	61bb      	str	r3, [r7, #24]
  /* 初始化LED2对应引脚IO */
  HAL_GPIO_Init(LED2_GPIO, &GPIO_InitStruct);
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <bsp_LED_GPIO_Init+0xd4>)
 80007e8:	f001 fe66 	bl	80024b8 <HAL_GPIO_Init>

  /* 设定LED3对应引脚IO编号 */
  GPIO_InitStruct.Pin = LED3_GPIO_PIN;
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	60fb      	str	r3, [r7, #12]
  /* 设定LED3对应引脚IO为输出模式 */
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
  /* 设定LED3对应引脚IO操作速度 */
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
  /* 初始化LED3对应引脚IO */
  HAL_GPIO_Init(LED3_GPIO, &GPIO_InitStruct);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <bsp_LED_GPIO_Init+0xd4>)
 8000800:	f001 fe5a 	bl	80024b8 <HAL_GPIO_Init>

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40021c00 	.word	0x40021c00
 8000814:	40021000 	.word	0x40021000

08000818 <bsp_SystemClock_Config>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 无
  */
void bsp_SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();                                     //使能PWR时钟
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <bsp_SystemClock_Config+0xc4>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <bsp_SystemClock_Config+0xc4>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <bsp_SystemClock_Config+0xc4>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);  //设置调压器输出电压级别1
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <bsp_SystemClock_Config+0xc8>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <bsp_SystemClock_Config+0xc8>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <bsp_SystemClock_Config+0xc8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;      // 外部晶振，8MHz
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;                        //打开HSE
 800085a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;                    //打开PLL
 8000860:	2302      	movs	r3, #2
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;            //PLL时钟源选择HSE
 8000864:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000868:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;                                 //8分频MHz
 800086a:	2308      	movs	r3, #8
 800086c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;                               //336倍频
 800086e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;                     //2分频，得到168MHz主时钟
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;                                 //USB/SDIO/随机数产生器等的主PLL分频系数
 8000878:	2307      	movs	r3, #7
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4618      	mov	r0, r3
 8000882:	f001 ffe7 	bl	8002854 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;       // 系统时钟：168MHz
 800088a:	2302      	movs	r3, #2
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;              // AHB时钟： 168MHz
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;               // APB1时钟：42MHz
 8000892:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;               // APB2时钟：84MHz
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2105      	movs	r1, #5
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fa4d 	bl	8002d44 <HAL_RCC_ClockConfig>

  HAL_RCC_EnableCSS();                                            // 使能CSS功能，优先使用外部晶振，内部时钟源为备用
 80008aa:	f002 fb31 	bl	8002f10 <HAL_RCC_EnableCSS>

 	// HAL_RCC_GetHCLKFreq()/1000    1ms中断一次
	// HAL_RCC_GetHCLKFreq()/100000	 10us中断一次
	// HAL_RCC_GetHCLKFreq()/1000000 1us中断一次
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);                // 配置并启动系统滴答定时器
 80008ae:	f002 fbf1 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <bsp_SystemClock_Config+0xcc>)
 80008b6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ba:	099b      	lsrs	r3, r3, #6
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fd40 	bl	8002342 <HAL_SYSTICK_Config>
  /* 系统滴答定时器时钟源 */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008c2:	2004      	movs	r0, #4
 80008c4:	f001 fd4a 	bl	800235c <HAL_SYSTICK_CLKSourceConfig>

  /* 系统滴答定时器中断优先级配置 */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f001 fd0d 	bl	80022ee <HAL_NVIC_SetPriority>
}
 80008d4:	bf00      	nop
 80008d6:	3750      	adds	r7, #80	; 0x50
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000
 80008e4:	10624dd3 	.word	0x10624dd3

080008e8 <bsp_SPIx_Init>:
  * 输入参数: huart：串口句柄类型指针
  * 返 回 值: 无
  * 说    明: 该函数被HAL库内部调用
*/
void bsp_SPIx_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  hspi_SPI.Instance = SPIx;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <bsp_SPIx_Init+0x6c>)
 80008ee:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <bsp_SPIx_Init+0x70>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi_SPI.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <bsp_SPIx_Init+0x6c>)
 80008f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f8:	605a      	str	r2, [r3, #4]
  hspi_SPI.Init.Direction = SPI_DIRECTION_2LINES;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <bsp_SPIx_Init+0x6c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hspi_SPI.Init.DataSize = SPI_DATASIZE_8BIT;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <bsp_SPIx_Init+0x6c>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hspi_SPI.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <bsp_SPIx_Init+0x6c>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hspi_SPI.Init.CLKPhase = SPI_PHASE_2EDGE;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <bsp_SPIx_Init+0x6c>)
 800090e:	2201      	movs	r2, #1
 8000910:	615a      	str	r2, [r3, #20]
  hspi_SPI.Init.NSS = SPI_NSS_SOFT;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <bsp_SPIx_Init+0x6c>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	619a      	str	r2, [r3, #24]
  hspi_SPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <bsp_SPIx_Init+0x6c>)
 800091c:	2238      	movs	r2, #56	; 0x38
 800091e:	61da      	str	r2, [r3, #28]
  hspi_SPI.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <bsp_SPIx_Init+0x6c>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hspi_SPI.Init.TIMode = SPI_TIMODE_DISABLE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <bsp_SPIx_Init+0x6c>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi_SPI.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <bsp_SPIx_Init+0x6c>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi_SPI.Init.CRCPolynomial = 10;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <bsp_SPIx_Init+0x6c>)
 8000934:	220a      	movs	r2, #10
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi_SPI);
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <bsp_SPIx_Init+0x6c>)
 800093a:	f002 fc11 	bl	8003160 <HAL_SPI_Init>
  __HAL_SPI_ENABLE(&hspi_SPI);
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <bsp_SPIx_Init+0x6c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <bsp_SPIx_Init+0x6c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800094c:	601a      	str	r2, [r3, #0]
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200049b0 	.word	0x200049b0
 8000958:	40013000 	.word	0x40013000

0800095c <SPIx_ReadWriteByte>:
  * 输入参数: byte：待发送数据
  * 返 回 值: uint8_t：接收到的数据
  * 说    明：无
  */
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af02      	add	r7, sp, #8
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	70fb      	strb	r3, [r7, #3]
  uint8_t d_read,d_send=byte;
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	73bb      	strb	r3, [r7, #14]
  if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK)
 800096c:	f107 020f 	add.w	r2, r7, #15
 8000970:	f107 010e 	add.w	r1, r7, #14
 8000974:	23ff      	movs	r3, #255	; 0xff
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2301      	movs	r3, #1
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f002 fc79 	bl	8003272 <HAL_SPI_TransmitReceive>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SPIx_ReadWriteByte+0x2e>
  {   
    d_read=0xFF;
 8000986:	23ff      	movs	r3, #255	; 0xff
 8000988:	73fb      	strb	r3, [r7, #15]
  }
  //printf("d_read=%x\n",d_read);
  return d_read; 
 800098a:	7bfb      	ldrb	r3, [r7, #15]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <SPIx_Write_Reg>:
  * 返 回 值: 无
  * 说    明：reg:指定寄存器地址
  *           
  */ 
uint8_t SPIx_Write_Reg(uint8_t reg,uint8_t value)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	460a      	mov	r2, r1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71bb      	strb	r3, [r7, #6]
	uint8_t status;	
  SPIx_CS_ENABLE();                 //使能SPI传输
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009aa:	480e      	ldr	r0, [pc, #56]	; (80009e4 <SPIx_Write_Reg+0x50>)
 80009ac:	f001 ff38 	bl	8002820 <HAL_GPIO_WritePin>
  status =SPIx_ReadWriteByte(&hspi_SPI,reg|0x80);//发送寄存器号
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	480b      	ldr	r0, [pc, #44]	; (80009e8 <SPIx_Write_Reg+0x54>)
 80009bc:	f7ff ffce 	bl	800095c <SPIx_ReadWriteByte>
 80009c0:	4603      	mov	r3, r0
 80009c2:	73fb      	strb	r3, [r7, #15]
  SPIx_ReadWriteByte(&hspi_SPI,value);      //写入寄存器的值
 80009c4:	79bb      	ldrb	r3, [r7, #6]
 80009c6:	4619      	mov	r1, r3
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <SPIx_Write_Reg+0x54>)
 80009ca:	f7ff ffc7 	bl	800095c <SPIx_ReadWriteByte>
  SPIx_CS_DISABLE();                 //禁止SPI传输
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <SPIx_Write_Reg+0x50>)
 80009d6:	f001 ff23 	bl	8002820 <HAL_GPIO_WritePin>
  return status;       			//返回状态值
 80009da:	7bfb      	ldrb	r3, [r7, #15]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40020800 	.word	0x40020800
 80009e8:	200049b0 	.word	0x200049b0

080009ec <SPIx_Read_Reg>:
  * 返 回 值: 无
  * 说    明：reg:要读的寄存器
  *           
  */ 
uint8_t SPIx_Read_Reg(uint8_t reg)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;	    
 	SPIx_CS_ENABLE();          //使能SPI传输
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <SPIx_Read_Reg+0x44>)
 80009fe:	f001 ff0f 	bl	8002820 <HAL_GPIO_WritePin>
  SPIx_ReadWriteByte(&hspi_SPI,reg);   //发送寄存器号
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4619      	mov	r1, r3
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <SPIx_Read_Reg+0x48>)
 8000a08:	f7ff ffa8 	bl	800095c <SPIx_ReadWriteByte>
  reg_val=SPIx_ReadWriteByte(&hspi_SPI,0XFF);//读取寄存器内容
 8000a0c:	21ff      	movs	r1, #255	; 0xff
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <SPIx_Read_Reg+0x48>)
 8000a10:	f7ff ffa4 	bl	800095c <SPIx_ReadWriteByte>
 8000a14:	4603      	mov	r3, r0
 8000a16:	73fb      	strb	r3, [r7, #15]
  SPIx_CS_DISABLE();          //禁止SPI传输
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <SPIx_Read_Reg+0x44>)
 8000a20:	f001 fefe 	bl	8002820 <HAL_GPIO_WritePin>
  return reg_val;           //返回状态值
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
}	
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40020800 	.word	0x40020800
 8000a34:	200049b0 	.word	0x200049b0

08000a38 <Si4432reset_IRQ_Reg>:
  SPIx_CS_DISABLE();       //关闭SPI传输
  return status;        //返回读到的状态值
}

void Si4432reset_IRQ_Reg(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	SPIx_CS_ENABLE();
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a42:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <Si4432reset_IRQ_Reg+0x90>)
 8000a44:	f001 feec 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_Delay(60);
 8000a48:	203c      	movs	r0, #60	; 0x3c
 8000a4a:	f001 f81d 	bl	8001a88 <HAL_Delay>
	res=SPIx_Write_Reg(0x07, 0x80); //向0X07地址  写入0X80  软件复位
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	2007      	movs	r0, #7
 8000a52:	f7ff ff9f 	bl	8000994 <SPIx_Write_Reg>
 8000a56:	4603      	mov	r3, r0
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <Si4432reset_IRQ_Reg+0x94>)
 8000a5c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 8000a5e:	2014      	movs	r0, #20
 8000a60:	f001 f812 	bl	8001a88 <HAL_Delay>
	res=SPIx_Read_Reg(0x07); //读取0X07地址内容
 8000a64:	2007      	movs	r0, #7
 8000a66:	f7ff ffc1 	bl	80009ec <SPIx_Read_Reg>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <Si4432reset_IRQ_Reg+0x94>)
 8000a70:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 8000a72:	2014      	movs	r0, #20
 8000a74:	f001 f808 	bl	8001a88 <HAL_Delay>
	printf("0x07res =%x \n",(unsigned short)res );
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <Si4432reset_IRQ_Reg+0x94>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <Si4432reset_IRQ_Reg+0x98>)
 8000a82:	f006 fe4b 	bl	800771c <iprintf>
	printf("SPIx_IRQ_PIN_READ before!!!\n");
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <Si4432reset_IRQ_Reg+0x9c>)
 8000a88:	f006 fece 	bl	8007828 <puts>
	while ( SPIx_IRQ_PIN_READ()== 1) HAL_Delay(10);//0表示等待接收中断
 8000a8c:	e002      	b.n	8000a94 <Si4432reset_IRQ_Reg+0x5c>
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f000 fffa 	bl	8001a88 <HAL_Delay>
 8000a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a98:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <Si4432reset_IRQ_Reg+0xa0>)
 8000a9a:	f001 fea9 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d0f4      	beq.n	8000a8e <Si4432reset_IRQ_Reg+0x56>
	res = SPIx_IRQ_PIN_READ();
 8000aa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <Si4432reset_IRQ_Reg+0xa0>)
 8000aaa:	f001 fea1 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <Si4432reset_IRQ_Reg+0x94>)
 8000ab4:	701a      	strb	r2, [r3, #0]
	printf("SPIx_IRQ_PIN_READ=%d\n",res);
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <Si4432reset_IRQ_Reg+0x94>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4619      	mov	r1, r3
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <Si4432reset_IRQ_Reg+0xa4>)
 8000ac0:	f006 fe2c 	bl	800771c <iprintf>

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	20004a09 	.word	0x20004a09
 8000ad0:	080086cc 	.word	0x080086cc
 8000ad4:	080086dc 	.word	0x080086dc
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	080086f8 	.word	0x080086f8

08000ae0 <Si4432config>:

void Si4432config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
		SPIx_CS_ENABLE();
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	487c      	ldr	r0, [pc, #496]	; (8000cdc <Si4432config+0x1fc>)
 8000aec:	f001 fe98 	bl	8002820 <HAL_GPIO_WritePin>
		HAL_Delay(60);
 8000af0:	203c      	movs	r0, #60	; 0x3c
 8000af2:	f000 ffc9 	bl	8001a88 <HAL_Delay>
	/////////////////////////开始设置
		// 频率设置 434
		SPIx_Write_Reg(0x75, 0x53);
 8000af6:	2153      	movs	r1, #83	; 0x53
 8000af8:	2075      	movs	r0, #117	; 0x75
 8000afa:	f7ff ff4b 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x76, 0x64);
 8000afe:	2164      	movs	r1, #100	; 0x64
 8000b00:	2076      	movs	r0, #118	; 0x76
 8000b02:	f7ff ff47 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x77, 0x00);
 8000b06:	2100      	movs	r1, #0
 8000b08:	2077      	movs	r0, #119	; 0x77
 8000b0a:	f7ff ff43 	bl	8000994 <SPIx_Write_Reg>
		// 1.2K bps 发射速率
		SPIx_Write_Reg(0x2a, 0x14);
 8000b0e:	2114      	movs	r1, #20
 8000b10:	202a      	movs	r0, #42	; 0x2a
 8000b12:	f7ff ff3f 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x6e, 0x09);
 8000b16:	2109      	movs	r1, #9
 8000b18:	206e      	movs	r0, #110	; 0x6e
 8000b1a:	f7ff ff3b 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x6f, 0xd5);
 8000b1e:	21d5      	movs	r1, #213	; 0xd5
 8000b20:	206f      	movs	r0, #111	; 0x6f
 8000b22:	f7ff ff37 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x70, 0x2c);
 8000b26:	212c      	movs	r1, #44	; 0x2c
 8000b28:	2070      	movs	r0, #112	; 0x70
 8000b2a:	f7ff ff33 	bl	8000994 <SPIx_Write_Reg>

		res=SPIx_Read_Reg(0x70);
 8000b2e:	2070      	movs	r0, #112	; 0x70
 8000b30:	f7ff ff5c 	bl	80009ec <SPIx_Read_Reg>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b69      	ldr	r3, [pc, #420]	; (8000ce0 <Si4432config+0x200>)
 8000b3a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8000b3c:	2014      	movs	r0, #20
 8000b3e:	f000 ffa3 	bl	8001a88 <HAL_Delay>
		printf("0x70res =%x \n",(unsigned short)res );
 8000b42:	4b67      	ldr	r3, [pc, #412]	; (8000ce0 <Si4432config+0x200>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4866      	ldr	r0, [pc, #408]	; (8000ce4 <Si4432config+0x204>)
 8000b4c:	f006 fde6 	bl	800771c <iprintf>
		res=SPIx_Read_Reg(0x6f); //�??0X07地址  写入0X80  软件复位
 8000b50:	206f      	movs	r0, #111	; 0x6f
 8000b52:	f7ff ff4b 	bl	80009ec <SPIx_Read_Reg>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b61      	ldr	r3, [pc, #388]	; (8000ce0 <Si4432config+0x200>)
 8000b5c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8000b5e:	2014      	movs	r0, #20
 8000b60:	f000 ff92 	bl	8001a88 <HAL_Delay>
		printf("0x06res =%x \n",(unsigned short)res );
 8000b64:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <Si4432config+0x200>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	485e      	ldr	r0, [pc, #376]	; (8000ce8 <Si4432config+0x208>)
 8000b6e:	f006 fdd5 	bl	800771c <iprintf>
//		SPIx_Write_Reg(0x72, 0x48);	  //(9.6kbps)
		SPIx_Write_Reg(0x72, 0x38);	//频率偏差(1.2kbps)
 8000b72:	2138      	movs	r1, #56	; 0x38
 8000b74:	2072      	movs	r0, #114	; 0x72
 8000b76:	f7ff ff0d 	bl	8000994 <SPIx_Write_Reg>
		// 下面的设置根据Silabs 的Excel	(9.6 kbps, deviation: 45 kHz, channel filter BW: 102.2 kHz
		SPIx_Write_Reg(0x1C, 0x1b);															//write 0x1E to the IF Filter Bandwidth register
 8000b7a:	211b      	movs	r1, #27
 8000b7c:	201c      	movs	r0, #28
 8000b7e:	f7ff ff09 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x20, 0x83);															//write 0xD0 to the Clock Recovery Oversampling Ratio register
 8000b82:	2183      	movs	r1, #131	; 0x83
 8000b84:	2020      	movs	r0, #32
 8000b86:	f7ff ff05 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x21, 0xc0);															//write 0x00 to the Clock Recovery Offset 2 register
 8000b8a:	21c0      	movs	r1, #192	; 0xc0
 8000b8c:	2021      	movs	r0, #33	; 0x21
 8000b8e:	f7ff ff01 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x22, 0x13);															//write 0x9D to the Clock Recovery Offset 1 register
 8000b92:	2113      	movs	r1, #19
 8000b94:	2022      	movs	r0, #34	; 0x22
 8000b96:	f7ff fefd 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x23, 0xa9);															//write 0x49 to the Clock Recovery Offset 0 register
 8000b9a:	21a9      	movs	r1, #169	; 0xa9
 8000b9c:	2023      	movs	r0, #35	; 0x23
 8000b9e:	f7ff fef9 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x24, 0x00);															//write 0x00 to the Clock Recovery Timing Loop Gain 1 register
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2024      	movs	r0, #36	; 0x24
 8000ba6:	f7ff fef5 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x25, 0x03);															//write 0x24 to the Clock Recovery Timing Loop Gain 0 register
 8000baa:	2103      	movs	r1, #3
 8000bac:	2025      	movs	r0, #37	; 0x25
 8000bae:	f7ff fef1 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x1D, 0x40);															//write 0x40 to the AFC Loop Gearshift Override register
 8000bb2:	2140      	movs	r1, #64	; 0x40
 8000bb4:	201d      	movs	r0, #29
 8000bb6:	f7ff feed 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x1E, 0x0A);															//write 0x0A to the AFC Timing Control register
 8000bba:	210a      	movs	r1, #10
 8000bbc:	201e      	movs	r0, #30
 8000bbe:	f7ff fee9 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x2A, 0x14);															//write 0x20 to the AFC Limiter register
 8000bc2:	2114      	movs	r1, #20
 8000bc4:	202a      	movs	r0, #42	; 0x2a
 8000bc6:	f7ff fee5 	bl	8000994 <SPIx_Write_Reg>

		//前导码 同步字
		SPIx_Write_Reg(0x34, 0X0A);    // 发射5字节的Preamble
 8000bca:	210a      	movs	r1, #10
 8000bcc:	2034      	movs	r0, #52	; 0x34
 8000bce:	f7ff fee1 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x35, 0x2A);    // 需要检测Preamble
 8000bd2:	212a      	movs	r1, #42	; 0x2a
 8000bd4:	2035      	movs	r0, #53	; 0x35
 8000bd6:	f7ff fedd 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x33, 0x02);    // 同步字3,2 是同步字
 8000bda:	2102      	movs	r1, #2
 8000bdc:	2033      	movs	r0, #51	; 0x33
 8000bde:	f7ff fed9 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x36, 0x2d);    // 同步字为 0x2dd4
 8000be2:	212d      	movs	r1, #45	; 0x2d
 8000be4:	2036      	movs	r0, #54	; 0x36
 8000be6:	f7ff fed5 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x37, 0xd4);
 8000bea:	21d4      	movs	r1, #212	; 0xd4
 8000bec:	2037      	movs	r0, #55	; 0x37
 8000bee:	f7ff fed1 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x30, 0x8D);    // 使能PH+ FIFO模式，高位在前面，使能CRC校验	CCITTT
 8000bf2:	218d      	movs	r1, #141	; 0x8d
 8000bf4:	2030      	movs	r0, #48	; 0x30
 8000bf6:	f7ff fecd 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x32, 0x00 ); //	禁止帧头
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2032      	movs	r0, #50	; 0x32
 8000bfe:	f7ff fec9 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x71, 0x63);    // 发射不需要 CLK，FiFo ， FSK模式
 8000c02:	2163      	movs	r1, #99	; 0x63
 8000c04:	2071      	movs	r0, #113	; 0x71
 8000c06:	f7ff fec5 	bl	8000994 <SPIx_Write_Reg>

		res=SPIx_Read_Reg(0x36); //�??0X07地址  写入0X80  软件复位
 8000c0a:	2036      	movs	r0, #54	; 0x36
 8000c0c:	f7ff feee 	bl	80009ec <SPIx_Read_Reg>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <Si4432config+0x200>)
 8000c16:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8000c18:	2014      	movs	r0, #20
 8000c1a:	f000 ff35 	bl	8001a88 <HAL_Delay>
		printf("0x36res =%x \n",(unsigned short)res );
 8000c1e:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <Si4432config+0x200>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	4831      	ldr	r0, [pc, #196]	; (8000cec <Si4432config+0x20c>)
 8000c28:	f006 fd78 	bl	800771c <iprintf>
		res=SPIx_Read_Reg(0x37); //向0X07地址写入0X80  软件复位
 8000c2c:	2037      	movs	r0, #55	; 0x37
 8000c2e:	f7ff fedd 	bl	80009ec <SPIx_Read_Reg>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <Si4432config+0x200>)
 8000c38:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8000c3a:	2014      	movs	r0, #20
 8000c3c:	f000 ff24 	bl	8001a88 <HAL_Delay>
		printf("0x37res =%x \n",(unsigned short)res );
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <Si4432config+0x200>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	4619      	mov	r1, r3
 8000c48:	4829      	ldr	r0, [pc, #164]	; (8000cf0 <Si4432config+0x210>)
 8000c4a:	f006 fd67 	bl	800771c <iprintf>

		//GPIO
		SPIx_Write_Reg(0x0b, 0x12);
 8000c4e:	2112      	movs	r1, #18
 8000c50:	200b      	movs	r0, #11
 8000c52:	f7ff fe9f 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x0c, 0x15);
 8000c56:	2115      	movs	r1, #21
 8000c58:	200c      	movs	r0, #12
 8000c5a:	f7ff fe9b 	bl	8000994 <SPIx_Write_Reg>

		//其他设置
		SPIx_Write_Reg(0x09, 0xD7);    //负载电容
 8000c5e:	21d7      	movs	r1, #215	; 0xd7
 8000c60:	2009      	movs	r0, #9
 8000c62:	f7ff fe97 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x69, 0x60);    //AGC过载
 8000c66:	2160      	movs	r1, #96	; 0x60
 8000c68:	2069      	movs	r0, #105	; 0x69
 8000c6a:	f7ff fe93 	bl	8000994 <SPIx_Write_Reg>
		//发射功率
		SPIx_Write_Reg(0x6d, 0x1e);
 8000c6e:	211e      	movs	r1, #30
 8000c70:	206d      	movs	r0, #109	; 0x6d
 8000c72:	f7ff fe8f 	bl	8000994 <SPIx_Write_Reg>
		//手动打开接收
		SPIx_Write_Reg(0x07, 0x05);
 8000c76:	2105      	movs	r1, #5
 8000c78:	2007      	movs	r0, #7
 8000c7a:	f7ff fe8b 	bl	8000994 <SPIx_Write_Reg>
		//打开 接收中断
		SPIx_Write_Reg(0x05, 0x03);
 8000c7e:	2103      	movs	r1, #3
 8000c80:	2005      	movs	r0, #5
 8000c82:	f7ff fe87 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x06, 0x00);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2006      	movs	r0, #6
 8000c8a:	f7ff fe83 	bl	8000994 <SPIx_Write_Reg>

		//清中断
		result1 = SPIx_Read_Reg(0x03);	  //read the Interrupt Status1 register
 8000c8e:	2003      	movs	r0, #3
 8000c90:	f7ff feac 	bl	80009ec <SPIx_Read_Reg>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <Si4432config+0x214>)
 8000c9a:	701a      	strb	r2, [r3, #0]
		result2 = SPIx_Read_Reg(0x04);	  //read the Interrupt Status2 register
 8000c9c:	2004      	movs	r0, #4
 8000c9e:	f7ff fea5 	bl	80009ec <SPIx_Read_Reg>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <Si4432config+0x218>)
 8000ca8:	701a      	strb	r2, [r3, #0]

		//接收设置
		SPIx_Write_Reg(0x08, 0x02);
 8000caa:	2102      	movs	r1, #2
 8000cac:	2008      	movs	r0, #8
 8000cae:	f7ff fe71 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x08, 0x00);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2008      	movs	r0, #8
 8000cb6:	f7ff fe6d 	bl	8000994 <SPIx_Write_Reg>
		SPIx_Write_Reg(0x07, 0x05);    	//手动打开接收
 8000cba:	2105      	movs	r1, #5
 8000cbc:	2007      	movs	r0, #7
 8000cbe:	f7ff fe69 	bl	8000994 <SPIx_Write_Reg>
		printf("Configrued! ItStatus1=%x ItStatus2=%x\n",(unsigned short)result1,(unsigned short)result2 );
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <Si4432config+0x214>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <Si4432config+0x218>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	480a      	ldr	r0, [pc, #40]	; (8000cfc <Si4432config+0x21c>)
 8000cd4:	f006 fd22 	bl	800771c <iprintf>

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	20004a09 	.word	0x20004a09
 8000ce4:	08008710 	.word	0x08008710
 8000ce8:	08008720 	.word	0x08008720
 8000cec:	08008730 	.word	0x08008730
 8000cf0:	08008740 	.word	0x08008740
 8000cf4:	200049ac 	.word	0x200049ac
 8000cf8:	200049ad 	.word	0x200049ad
 8000cfc:	08008750 	.word	0x08008750

08000d00 <Si4432startTransmit>:
			}
	}
}

void Si4432startTransmit(uint8_t data)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
//	for(;;)
//	{
	printf("Enter Transmit loop!\n");
 8000d0a:	4841      	ldr	r0, [pc, #260]	; (8000e10 <Si4432startTransmit+0x110>)
 8000d0c:	f006 fd8c 	bl	8007828 <puts>
	    LED1_ON;
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d16:	483f      	ldr	r0, [pc, #252]	; (8000e14 <Si4432startTransmit+0x114>)
 8000d18:	f001 fd82 	bl	8002820 <HAL_GPIO_WritePin>
		res = SPIx_Read_Reg(0x02);
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fe65 	bl	80009ec <SPIx_Read_Reg>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <Si4432startTransmit+0x118>)
 8000d28:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 8000d2a:	2014      	movs	r0, #20
 8000d2c:	f000 feac 	bl	8001a88 <HAL_Delay>
		printf("0x02Res =%02x \n",(unsigned short)res );
 8000d30:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <Si4432startTransmit+0x118>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	4838      	ldr	r0, [pc, #224]	; (8000e1c <Si4432startTransmit+0x11c>)
 8000d3a:	f006 fcef 	bl	800771c <iprintf>
		SPIx_Write_Reg(0x07, 0x01);	// rf 模块进入Ready 模式
 8000d3e:	2101      	movs	r1, #1
 8000d40:	2007      	movs	r0, #7
 8000d42:	f7ff fe27 	bl	8000994 <SPIx_Write_Reg>
		HAL_Delay(20);		// 延时 20ms, 让系统稳定
 8000d46:	2014      	movs	r0, #20
 8000d48:	f000 fe9e 	bl	8001a88 <HAL_Delay>

		SPIx_Write_Reg(0x3e, 0x01);  // 每次发射1个字节的数据
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	203e      	movs	r0, #62	; 0x3e
 8000d50:	f7ff fe20 	bl	8000994 <SPIx_Write_Reg>
		res = SPIx_Read_Reg(0x3e);
 8000d54:	203e      	movs	r0, #62	; 0x3e
 8000d56:	f7ff fe49 	bl	80009ec <SPIx_Read_Reg>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <Si4432startTransmit+0x118>)
 8000d60:	701a      	strb	r2, [r3, #0]
		printf("set length =%02x !\n",(unsigned short)res );
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <Si4432startTransmit+0x118>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482d      	ldr	r0, [pc, #180]	; (8000e20 <Si4432startTransmit+0x120>)
 8000d6c:	f006 fcd6 	bl	800771c <iprintf>
		SPIx_Write_Reg(0x7F, data);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4619      	mov	r1, r3
 8000d74:	207f      	movs	r0, #127	; 0x7f
 8000d76:	f7ff fe0d 	bl	8000994 <SPIx_Write_Reg>
		printf("Writ to TX FIFO=%02x !\n",(unsigned short)data);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4829      	ldr	r0, [pc, #164]	; (8000e24 <Si4432startTransmit+0x124>)
 8000d80:	f006 fccc 	bl	800771c <iprintf>
//		Count++;                      //Count计数自加
//		res = SPIx_Read_Reg(0x7F);
//		printf("Read TX FIFO =%02x !\n",(unsigned short)res);
		SPIx_Write_Reg(0x05, 0x04);	// 整包数据发射完后，产生中断
 8000d84:	2104      	movs	r1, #4
 8000d86:	2005      	movs	r0, #5
 8000d88:	f7ff fe04 	bl	8000994 <SPIx_Write_Reg>
//		printf("Enable External Interrrupt!\n");

		SPIx_Write_Reg(0x06, 0x00);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2006      	movs	r0, #6
 8000d90:	f7ff fe00 	bl	8000994 <SPIx_Write_Reg>

		result1 = SPIx_Read_Reg(0x03);//清除中断
 8000d94:	2003      	movs	r0, #3
 8000d96:	f7ff fe29 	bl	80009ec <SPIx_Read_Reg>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <Si4432startTransmit+0x128>)
 8000da0:	701a      	strb	r2, [r3, #0]
		result1 = SPIx_Read_Reg(0x04);
 8000da2:	2004      	movs	r0, #4
 8000da4:	f7ff fe22 	bl	80009ec <SPIx_Read_Reg>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <Si4432startTransmit+0x128>)
 8000dae:	701a      	strb	r2, [r3, #0]

		SPIx_Write_Reg(0x07, 0x09);//打开发射
 8000db0:	2109      	movs	r1, #9
 8000db2:	2007      	movs	r0, #7
 8000db4:	f7ff fdee 	bl	8000994 <SPIx_Write_Reg>
		printf("Sent and clear the FIFO!\n");
 8000db8:	481c      	ldr	r0, [pc, #112]	; (8000e2c <Si4432startTransmit+0x12c>)
 8000dba:	f006 fd35 	bl	8007828 <puts>

		HAL_Delay(20);
 8000dbe:	2014      	movs	r0, #20
 8000dc0:	f000 fe62 	bl	8001a88 <HAL_Delay>
	    while ( SPIx_IRQ_PIN_READ()== 1) LED1_OFF;
 8000dc4:	e005      	b.n	8000dd2 <Si4432startTransmit+0xd2>
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <Si4432startTransmit+0x114>)
 8000dce:	f001 fd27 	bl	8002820 <HAL_GPIO_WritePin>
 8000dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd6:	4816      	ldr	r0, [pc, #88]	; (8000e30 <Si4432startTransmit+0x130>)
 8000dd8:	f001 fd0a 	bl	80027f0 <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d0f1      	beq.n	8000dc6 <Si4432startTransmit+0xc6>

		result1 = SPIx_Read_Reg(0x03);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f7ff fe02 	bl	80009ec <SPIx_Read_Reg>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <Si4432startTransmit+0x128>)
 8000dee:	701a      	strb	r2, [r3, #0]
//		printf("0x03result1 =%02x \n",(unsigned short)result1 );
		result2 = SPIx_Read_Reg(0x04);
 8000df0:	2004      	movs	r0, #4
 8000df2:	f7ff fdfb 	bl	80009ec <SPIx_Read_Reg>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <Si4432startTransmit+0x134>)
 8000dfc:	701a      	strb	r2, [r3, #0]
//		printf("0x04result2 =%02x \n",(unsigned short)result2 );
		HAL_Delay(1000);
 8000dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e02:	f000 fe41 	bl	8001a88 <HAL_Delay>
//	}
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	080087bc 	.word	0x080087bc
 8000e14:	40021c00 	.word	0x40021c00
 8000e18:	20004a09 	.word	0x20004a09
 8000e1c:	080087d4 	.word	0x080087d4
 8000e20:	080087e4 	.word	0x080087e4
 8000e24:	080087f8 	.word	0x080087f8
 8000e28:	200049ac 	.word	0x200049ac
 8000e2c:	08008810 	.word	0x08008810
 8000e30:	40021800 	.word	0x40021800
 8000e34:	200049ad 	.word	0x200049ad

08000e38 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e3e:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <MX_CAN1_Init+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e44:	2203      	movs	r2, #3
 8000e46:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e56:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000e5a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e62:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_CAN1_Init+0x64>)
 8000e8a:	f000 fe21 	bl	8001ad0 <HAL_CAN_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000e94:	f000 fb1a 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20004a9c 	.word	0x20004a9c
 8000ea0:	40006400 	.word	0x40006400

08000ea4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <HAL_CAN_MspInit+0xd4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d153      	bne.n	8000f6e <HAL_CAN_MspInit+0xca>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_CAN_MspInit+0xd8>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a2b      	ldr	r2, [pc, #172]	; (8000f7c <HAL_CAN_MspInit+0xd8>)
 8000ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <HAL_CAN_MspInit+0xd8>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_CAN_MspInit+0xd8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <HAL_CAN_MspInit+0xd8>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <HAL_CAN_MspInit+0xd8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_CAN_MspInit+0xd8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_CAN_MspInit+0xd8>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_CAN_MspInit+0xd8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PI9     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f2c:	2309      	movs	r3, #9
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4812      	ldr	r0, [pc, #72]	; (8000f80 <HAL_CAN_MspInit+0xdc>)
 8000f38:	f001 fabe 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f4e:	2309      	movs	r3, #9
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	480a      	ldr	r0, [pc, #40]	; (8000f84 <HAL_CAN_MspInit+0xe0>)
 8000f5a:	f001 faad 	bl	80024b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2105      	movs	r1, #5
 8000f62:	2014      	movs	r0, #20
 8000f64:	f001 f9c3 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f001 f9dc 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40006400 	.word	0x40006400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40022000 	.word	0x40022000
 8000f84:	40020400 	.word	0x40020400

08000f88 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f8c:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <MX_FREERTOS_Init+0x48>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <MX_FREERTOS_Init+0x4c>)
 8000f92:	f003 fe7f 	bl	8004c94 <osThreadNew>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <MX_FREERTOS_Init+0x50>)
 8000f9a:	6013      	str	r3, [r2, #0]

  /* creation of statelight */
  statelightHandle = osThreadNew(flashlight, NULL, &statelight_attributes);
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <MX_FREERTOS_Init+0x54>)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <MX_FREERTOS_Init+0x58>)
 8000fa2:	f003 fe77 	bl	8004c94 <osThreadNew>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	; (8000fe4 <MX_FREERTOS_Init+0x5c>)
 8000faa:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(candrive_task, NULL, &CANTask_attributes);
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <MX_FREERTOS_Init+0x60>)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <MX_FREERTOS_Init+0x64>)
 8000fb2:	f003 fe6f 	bl	8004c94 <osThreadNew>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <MX_FREERTOS_Init+0x68>)
 8000fba:	6013      	str	r3, [r2, #0]

  /* creation of beepTask */
  beepTaskHandle = osThreadNew(beep, NULL, &beepTask_attributes);
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <MX_FREERTOS_Init+0x6c>)
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <MX_FREERTOS_Init+0x70>)
 8000fc2:	f003 fe67 	bl	8004c94 <osThreadNew>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <MX_FREERTOS_Init+0x74>)
 8000fca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	08008870 	.word	0x08008870
 8000fd4:	08001001 	.word	0x08001001
 8000fd8:	20004adc 	.word	0x20004adc
 8000fdc:	08008894 	.word	0x08008894
 8000fe0:	08001011 	.word	0x08001011
 8000fe4:	20004ae0 	.word	0x20004ae0
 8000fe8:	080088b8 	.word	0x080088b8
 8000fec:	08001051 	.word	0x08001051
 8000ff0:	20004bec 	.word	0x20004bec
 8000ff4:	080088dc 	.word	0x080088dc
 8000ff8:	08001061 	.word	0x08001061
 8000ffc:	20004be8 	.word	0x20004be8

08001000 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f003 fed5 	bl	8004db8 <osDelay>
 800100e:	e7fb      	b.n	8001008 <StartDefaultTask+0x8>

08001010 <flashlight>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_flashlight */
void flashlight(void *argument)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN flashlight */
	Si4432reset_IRQ_Reg();
 8001018:	f7ff fd0e 	bl	8000a38 <Si4432reset_IRQ_Reg>
	Si4432config();
 800101c:	f7ff fd60 	bl	8000ae0 <Si4432config>
	data=0;
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <flashlight+0x3c>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
//	HAL_CAN_Start(&hcan1);
//	motorInit();
	/* Infinite loop */
  for(;;)
  {
	Si4432startTransmit(data);
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <flashlight+0x3c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fe67 	bl	8000d00 <Si4432startTransmit>
	HAL_Delay(1000);
 8001032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001036:	f000 fd27 	bl	8001a88 <HAL_Delay>
	data++;
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <flashlight+0x3c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b01      	ldr	r3, [pc, #4]	; (800104c <flashlight+0x3c>)
 8001046:	701a      	strb	r2, [r3, #0]
	Si4432startTransmit(data);
 8001048:	e7ed      	b.n	8001026 <flashlight+0x16>
 800104a:	bf00      	nop
 800104c:	20004be4 	.word	0x20004be4

08001050 <candrive_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_candrive_task */
void candrive_task(void *argument)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
//	  printf("CAN Started!\n");
  /* Infinite loop */
  for(;;)
  {
//	  keycontrolmotor();
	  osDelay(50);
 8001058:	2032      	movs	r0, #50	; 0x32
 800105a:	f003 fead 	bl	8004db8 <osDelay>
 800105e:	e7fb      	b.n	8001058 <candrive_task+0x8>

08001060 <beep>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_beep */
void beep(void *argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN beep */
//	BEEP_GPIO_Init();
//	osDelay(10);
	BEEP_GPIO_Init();
 8001068:	f7ff fa7e 	bl	8000568 <BEEP_GPIO_Init>
	didi();
 800106c:	f7ff faa4 	bl	80005b8 <didi>
  /* Infinite loop */
  for(;;)
  {
//	  keyResponse();

	  osDelay(10);
 8001070:	200a      	movs	r0, #10
 8001072:	f003 fea1 	bl	8004db8 <osDelay>
	  	  if(KEY1_StateRead()==KEY_DOWN)
 8001076:	f7ff fab9 	bl	80005ec <KEY1_StateRead>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10f      	bne.n	80010a0 <beep+0x40>
	  	      {
//	  	        di();
	  	        LED1_ON;
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001086:	4843      	ldr	r0, [pc, #268]	; (8001194 <beep+0x134>)
 8001088:	f001 fbca 	bl	8002820 <HAL_GPIO_WritePin>
	  	        osDelay(500);
 800108c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001090:	f003 fe92 	bl	8004db8 <osDelay>
	  	        LED1_OFF;
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109a:	483e      	ldr	r0, [pc, #248]	; (8001194 <beep+0x134>)
 800109c:	f001 fbc0 	bl	8002820 <HAL_GPIO_WritePin>
	  	      }
	  	      if(KEY2_StateRead()==KEY_DOWN)
 80010a0:	f7ff fac6 	bl	8000630 <KEY2_StateRead>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10d      	bne.n	80010c6 <beep+0x66>
	  	      {
//	  	        di();
	  	        LED2_ON;
 80010aa:	2201      	movs	r2, #1
 80010ac:	2120      	movs	r1, #32
 80010ae:	483a      	ldr	r0, [pc, #232]	; (8001198 <beep+0x138>)
 80010b0:	f001 fbb6 	bl	8002820 <HAL_GPIO_WritePin>
	  	        osDelay(500);
 80010b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b8:	f003 fe7e 	bl	8004db8 <osDelay>
	  	        LED2_OFF;
 80010bc:	2200      	movs	r2, #0
 80010be:	2120      	movs	r1, #32
 80010c0:	4835      	ldr	r0, [pc, #212]	; (8001198 <beep+0x138>)
 80010c2:	f001 fbad 	bl	8002820 <HAL_GPIO_WritePin>
	  	      }
	  	      if(KEY3_StateRead()==KEY_DOWN)
 80010c6:	f7ff fad5 	bl	8000674 <KEY3_StateRead>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10d      	bne.n	80010ec <beep+0x8c>
	  	      {
//	  	        di();
	  	        LED3_ON;
 80010d0:	2201      	movs	r2, #1
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	4830      	ldr	r0, [pc, #192]	; (8001198 <beep+0x138>)
 80010d6:	f001 fba3 	bl	8002820 <HAL_GPIO_WritePin>
	  	        osDelay(500);
 80010da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010de:	f003 fe6b 	bl	8004db8 <osDelay>
	  	        LED3_OFF;
 80010e2:	2200      	movs	r2, #0
 80010e4:	2140      	movs	r1, #64	; 0x40
 80010e6:	482c      	ldr	r0, [pc, #176]	; (8001198 <beep+0x138>)
 80010e8:	f001 fb9a 	bl	8002820 <HAL_GPIO_WritePin>
	  	      }
	  	      if(KEY4_StateRead()==KEY_DOWN)
 80010ec:	f7ff fae4 	bl	80006b8 <KEY4_StateRead>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d123      	bne.n	800113e <beep+0xde>
	  	      {
//	  				di();
	  				LED1_ON;LED2_ON;LED3_ON;
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fc:	4825      	ldr	r0, [pc, #148]	; (8001194 <beep+0x134>)
 80010fe:	f001 fb8f 	bl	8002820 <HAL_GPIO_WritePin>
 8001102:	2201      	movs	r2, #1
 8001104:	2120      	movs	r1, #32
 8001106:	4824      	ldr	r0, [pc, #144]	; (8001198 <beep+0x138>)
 8001108:	f001 fb8a 	bl	8002820 <HAL_GPIO_WritePin>
 800110c:	2201      	movs	r2, #1
 800110e:	2140      	movs	r1, #64	; 0x40
 8001110:	4821      	ldr	r0, [pc, #132]	; (8001198 <beep+0x138>)
 8001112:	f001 fb85 	bl	8002820 <HAL_GPIO_WritePin>
	  				osDelay(500);
 8001116:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800111a:	f003 fe4d 	bl	8004db8 <osDelay>
	  				LED1_OFF;LED2_OFF;LED3_OFF;
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001124:	481b      	ldr	r0, [pc, #108]	; (8001194 <beep+0x134>)
 8001126:	f001 fb7b 	bl	8002820 <HAL_GPIO_WritePin>
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	481a      	ldr	r0, [pc, #104]	; (8001198 <beep+0x138>)
 8001130:	f001 fb76 	bl	8002820 <HAL_GPIO_WritePin>
 8001134:	2200      	movs	r2, #0
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	4817      	ldr	r0, [pc, #92]	; (8001198 <beep+0x138>)
 800113a:	f001 fb71 	bl	8002820 <HAL_GPIO_WritePin>
	  	      }
	  	      if(KEY5_StateRead()==KEY_DOWN)
 800113e:	f7ff fadd 	bl	80006fc <KEY5_StateRead>
 8001142:	4603      	mov	r3, r0
 8001144:	2b01      	cmp	r3, #1
 8001146:	d193      	bne.n	8001070 <beep+0x10>
	  	      {
//	  	    	 di();
	  			LED1_ON;LED2_ON;LED3_ON;
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <beep+0x134>)
 8001150:	f001 fb66 	bl	8002820 <HAL_GPIO_WritePin>
 8001154:	2201      	movs	r2, #1
 8001156:	2120      	movs	r1, #32
 8001158:	480f      	ldr	r0, [pc, #60]	; (8001198 <beep+0x138>)
 800115a:	f001 fb61 	bl	8002820 <HAL_GPIO_WritePin>
 800115e:	2201      	movs	r2, #1
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <beep+0x138>)
 8001164:	f001 fb5c 	bl	8002820 <HAL_GPIO_WritePin>
	  			osDelay(500);
 8001168:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800116c:	f003 fe24 	bl	8004db8 <osDelay>
	  			LED1_OFF;LED2_OFF;LED3_OFF;
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <beep+0x134>)
 8001178:	f001 fb52 	bl	8002820 <HAL_GPIO_WritePin>
 800117c:	2200      	movs	r2, #0
 800117e:	2120      	movs	r1, #32
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <beep+0x138>)
 8001182:	f001 fb4d 	bl	8002820 <HAL_GPIO_WritePin>
 8001186:	2200      	movs	r2, #0
 8001188:	2140      	movs	r1, #64	; 0x40
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <beep+0x138>)
 800118c:	f001 fb48 	bl	8002820 <HAL_GPIO_WritePin>
	  osDelay(10);
 8001190:	e76e      	b.n	8001070 <beep+0x10>
 8001192:	bf00      	nop
 8001194:	40021c00 	.word	0x40021c00
 8001198:	40021000 	.word	0x40021000

0800119c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	4b5d      	ldr	r3, [pc, #372]	; (800132c <MX_GPIO_Init+0x190>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a5c      	ldr	r2, [pc, #368]	; (800132c <MX_GPIO_Init+0x190>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b5a      	ldr	r3, [pc, #360]	; (800132c <MX_GPIO_Init+0x190>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	4b56      	ldr	r3, [pc, #344]	; (800132c <MX_GPIO_Init+0x190>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a55      	ldr	r2, [pc, #340]	; (800132c <MX_GPIO_Init+0x190>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b53      	ldr	r3, [pc, #332]	; (800132c <MX_GPIO_Init+0x190>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b4f      	ldr	r3, [pc, #316]	; (800132c <MX_GPIO_Init+0x190>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a4e      	ldr	r2, [pc, #312]	; (800132c <MX_GPIO_Init+0x190>)
 80011f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b4c      	ldr	r3, [pc, #304]	; (800132c <MX_GPIO_Init+0x190>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b48      	ldr	r3, [pc, #288]	; (800132c <MX_GPIO_Init+0x190>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a47      	ldr	r2, [pc, #284]	; (800132c <MX_GPIO_Init+0x190>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b45      	ldr	r3, [pc, #276]	; (800132c <MX_GPIO_Init+0x190>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <MX_GPIO_Init+0x190>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a40      	ldr	r2, [pc, #256]	; (800132c <MX_GPIO_Init+0x190>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b3e      	ldr	r3, [pc, #248]	; (800132c <MX_GPIO_Init+0x190>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <MX_GPIO_Init+0x190>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a39      	ldr	r2, [pc, #228]	; (800132c <MX_GPIO_Init+0x190>)
 8001248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b37      	ldr	r3, [pc, #220]	; (800132c <MX_GPIO_Init+0x190>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <MX_GPIO_Init+0x190>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <MX_GPIO_Init+0x190>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <MX_GPIO_Init+0x190>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2160      	movs	r1, #96	; 0x60
 800127a:	482d      	ldr	r0, [pc, #180]	; (8001330 <MX_GPIO_Init+0x194>)
 800127c:	f001 fad0 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001286:	482b      	ldr	r0, [pc, #172]	; (8001334 <MX_GPIO_Init+0x198>)
 8001288:	f001 faca 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPIx_CS_PORT_Pin|SPIx_CE_PORT_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001292:	4829      	ldr	r0, [pc, #164]	; (8001338 <MX_GPIO_Init+0x19c>)
 8001294:	f001 fac4 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8001298:	2307      	movs	r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4821      	ldr	r0, [pc, #132]	; (8001330 <MX_GPIO_Init+0x194>)
 80012ac:	f001 f904 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012b0:	2360      	movs	r3, #96	; 0x60
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	481a      	ldr	r0, [pc, #104]	; (8001330 <MX_GPIO_Init+0x194>)
 80012c8:	f001 f8f6 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012d6:	2302      	movs	r3, #2
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4813      	ldr	r0, [pc, #76]	; (8001334 <MX_GPIO_Init+0x198>)
 80012e6:	f001 f8e7 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPIx_CS_PORT_Pin|SPIx_CE_PORT_Pin;
 80012ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	480d      	ldr	r0, [pc, #52]	; (8001338 <MX_GPIO_Init+0x19c>)
 8001304:	f001 f8d8 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIx_IRQ_PORT_Pin;
 8001308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800130c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001312:	2301      	movs	r3, #1
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPIx_IRQ_PORT_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_GPIO_Init+0x1a0>)
 800131e:	f001 f8cb 	bl	80024b8 <HAL_GPIO_Init>

}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	; 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40021000 	.word	0x40021000
 8001334:	40022000 	.word	0x40022000
 8001338:	40020800 	.word	0x40020800
 800133c:	40021800 	.word	0x40021800

08001340 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include "stdio.h"
int __io_putchar(int ch)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,0xFFFF);
 8001348:	1d39      	adds	r1, r7, #4
 800134a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134e:	2201      	movs	r2, #1
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <__io_putchar+0x20>)
 8001352:	f002 fcf6 	bl	8003d42 <HAL_UART_Transmit>
return ch;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20004c90 	.word	0x20004c90

08001364 <_write>:
int _write(int file,char *ptr,int len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx=0;DataIdx< len; DataIdx++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e009      	b.n	800138a <_write+0x26>
{
__io_putchar(*ptr++);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffde 	bl	8001340 <__io_putchar>
for (DataIdx=0;DataIdx< len; DataIdx++)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbf1      	blt.n	8001376 <_write+0x12>
}
return len;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f000 fb30 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f816 	bl	80013d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  bsp_SystemClock_Config();
 80013a8:	f7ff fa36 	bl	8000818 <bsp_SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ac:	f7ff fef6 	bl	800119c <MX_GPIO_Init>
  MX_CAN1_Init();
 80013b0:	f7ff fd42 	bl	8000e38 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80013b4:	f000 fa82 	bl	80018bc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80013b8:	f000 f88e 	bl	80014d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  bsp_LED_GPIO_Init();
 80013bc:	f7ff f9c0 	bl	8000740 <bsp_LED_GPIO_Init>
  bsp_SPIx_Init();    		//初始化NRF24L01
 80013c0:	f7ff fa92 	bl	80008e8 <bsp_SPIx_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80013c4:	f003 fc1c 	bl	8004c00 <osKernelInitialize>
  MX_FREERTOS_Init();
 80013c8:	f7ff fdde 	bl	8000f88 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80013cc:	f003 fc3c 	bl	8004c48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <main+0x34>
	...

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 f992 	bl	800770c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a27      	ldr	r2, [pc, #156]	; (80014a0 <SystemClock_Config+0xcc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <SystemClock_Config+0xcc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <SystemClock_Config+0xd0>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <SystemClock_Config+0xd0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001440:	2300      	movs	r3, #0
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001444:	2308      	movs	r3, #8
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001448:	23a8      	movs	r3, #168	; 0xa8
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f001 f9fb 	bl	8002854 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001464:	f000 f832 	bl	80014cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001474:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2105      	movs	r1, #5
 8001486:	4618      	mov	r0, r3
 8001488:	f001 fc5c 	bl	8002d44 <HAL_RCC_ClockConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001492:	f000 f81b 	bl	80014cc <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3750      	adds	r7, #80	; 0x50
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ba:	f000 fac5 	bl	8001a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010000 	.word	0x40010000

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_SPI1_Init+0x64>)
 80014de:	4a18      	ldr	r2, [pc, #96]	; (8001540 <MX_SPI1_Init+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_SPI1_Init+0x64>)
 80014e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_SPI1_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_SPI1_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_SPI1_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_SPI1_Init+0x64>)
 80014fe:	2201      	movs	r2, #1
 8001500:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_SPI1_Init+0x64>)
 8001504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001508:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_SPI1_Init+0x64>)
 800150c:	2238      	movs	r2, #56	; 0x38
 800150e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <MX_SPI1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_SPI1_Init+0x64>)
 8001524:	220a      	movs	r2, #10
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_SPI1_Init+0x64>)
 800152a:	f001 fe19 	bl	8003160 <HAL_SPI_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001534:	f7ff ffca 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20004bf0 	.word	0x20004bf0
 8001540:	40013000 	.word	0x40013000

08001544 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_SPI_MspInit+0xc0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d149      	bne.n	80015fa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
////
  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b27      	ldr	r3, [pc, #156]	; (8001608 <HAL_SPI_MspInit+0xc4>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a26      	ldr	r2, [pc, #152]	; (8001608 <HAL_SPI_MspInit+0xc4>)
 8001570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_SPI_MspInit+0xc4>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_SPI_MspInit+0xc4>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <HAL_SPI_MspInit+0xc4>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_SPI_MspInit+0xc4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_SPI_MspInit+0xc4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a18      	ldr	r2, [pc, #96]	; (8001608 <HAL_SPI_MspInit+0xc4>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_SPI_MspInit+0xc4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015ba:	2320      	movs	r3, #32
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ca:	2305      	movs	r3, #5
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <HAL_SPI_MspInit+0xc8>)
 80015d6:	f000 ff6f 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015da:	2330      	movs	r3, #48	; 0x30
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ea:	2305      	movs	r3, #5
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4806      	ldr	r0, [pc, #24]	; (8001610 <HAL_SPI_MspInit+0xcc>)
 80015f6:	f000 ff5f 	bl	80024b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */
////
  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40013000 	.word	0x40013000
 8001608:	40023800 	.word	0x40023800
 800160c:	40020000 	.word	0x40020000
 8001610:	40020400 	.word	0x40020400

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_MspInit+0x54>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_MspInit+0x54>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_MspInit+0x54>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_MspInit+0x54>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_MspInit+0x54>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_MspInit+0x54>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	210f      	movs	r1, #15
 8001656:	f06f 0001 	mvn.w	r0, #1
 800165a:	f000 fe48 	bl	80022ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800

0800166c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2019      	movs	r0, #25
 8001682:	f000 fe34 	bl	80022ee <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001686:	2019      	movs	r0, #25
 8001688:	f000 fe4d 	bl	8002326 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <HAL_InitTick+0xa4>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_InitTick+0xa4>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6453      	str	r3, [r2, #68]	; 0x44
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_InitTick+0xa4>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016a8:	f107 0210 	add.w	r2, r7, #16
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fd22 	bl	80030fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016b8:	f001 fd0c 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 80016bc:	4603      	mov	r3, r0
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_InitTick+0xa8>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9b      	lsrs	r3, r3, #18
 80016cc:	3b01      	subs	r3, #1
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_InitTick+0xac>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_InitTick+0xb0>)
 80016d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_InitTick+0xac>)
 80016d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_InitTick+0xac>)
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_InitTick+0xac>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_InitTick+0xac>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <HAL_InitTick+0xac>)
 80016f2:	f002 f82b 	bl	800374c <HAL_TIM_Base_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d104      	bne.n	8001706 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <HAL_InitTick+0xac>)
 80016fe:	f002 f87f 	bl	8003800 <HAL_TIM_Base_Start_IT>
 8001702:	4603      	mov	r3, r0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3730      	adds	r7, #48	; 0x30
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	431bde83 	.word	0x431bde83
 8001718:	20004c48 	.word	0x20004c48
 800171c:	40010000 	.word	0x40010000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <CAN1_RX0_IRQHandler+0x10>)
 8001752:	f000 fab8 	bl	8001cc6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20004a9c 	.word	0x20004a9c

08001760 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001766:	f002 f8bb 	bl	80038e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20004c48 	.word	0x20004c48

08001774 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <USART1_IRQHandler+0x10>)
 800177a:	f002 fb75 	bl	8003e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20004c90 	.word	0x20004c90

08001788 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e00a      	b.n	80017b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800179a:	f3af 8000 	nop.w
 800179e:	4601      	mov	r1, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	60ba      	str	r2, [r7, #8]
 80017a6:	b2ca      	uxtb	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf0      	blt.n	800179a <_read+0x12>
	}

return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ea:	605a      	str	r2, [r3, #4]
	return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <_isatty>:

int _isatty(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
	return 1;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
	return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f005 ff1e 	bl	800769c <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20020000 	.word	0x20020000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000090 	.word	0x20000090
 8001894:	20004d28 	.word	0x20004d28

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <MX_USART1_UART_Init+0x50>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_USART1_UART_Init+0x4c>)
 80018f4:	f002 f9d8 	bl	8003ca8 <HAL_UART_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018fe:	f7ff fde5 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20004c90 	.word	0x20004c90
 800190c:	40011000 	.word	0x40011000

08001910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_UART_MspInit+0x94>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d133      	bne.n	800199a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_UART_MspInit+0x98>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <HAL_UART_MspInit+0x98>)
 800193c:	f043 0310 	orr.w	r3, r3, #16
 8001940:	6453      	str	r3, [r2, #68]	; 0x44
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_UART_MspInit+0x98>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_MspInit+0x98>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <HAL_UART_MspInit+0x98>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_UART_MspInit+0x98>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800196a:	23c0      	movs	r3, #192	; 0xc0
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800197a:	2307      	movs	r3, #7
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <HAL_UART_MspInit+0x9c>)
 8001986:	f000 fd97 	bl	80024b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2105      	movs	r1, #5
 800198e:	2025      	movs	r0, #37	; 0x25
 8001990:	f000 fcad 	bl	80022ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001994:	2025      	movs	r0, #37	; 0x25
 8001996:	f000 fcc6 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40011000 	.word	0x40011000
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019da:	f7ff ff5d 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f005 fe63 	bl	80076a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fcdb 	bl	800139c <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019f4:	080089c0 	.word	0x080089c0
  ldr r2, =_sbss
 80019f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019fc:	20004d28 	.word	0x20004d28

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 fc53 	bl	80022d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f7ff fe1a 	bl	800166c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fdec 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_IncTick+0x20>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_IncTick+0x24>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	20004cd4 	.word	0x20004cd4

08001a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_GetTick+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20004cd4 	.word	0x20004cd4

08001a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff ffee 	bl	8001a70 <HAL_GetTick>
 8001a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d005      	beq.n	8001aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_Delay+0x44>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aae:	bf00      	nop
 8001ab0:	f7ff ffde 	bl	8001a70 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d8f7      	bhi.n	8001ab0 <HAL_Delay+0x28>
  {
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000008 	.word	0x20000008

08001ad0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0ed      	b.n	8001cbe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff f9d8 	bl	8000ea4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b04:	f7ff ffb4 	bl	8001a70 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b0a:	e012      	b.n	8001b32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b0c:	f7ff ffb0 	bl	8001a70 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b0a      	cmp	r3, #10
 8001b18:	d90b      	bls.n	8001b32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2205      	movs	r2, #5
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0c5      	b.n	8001cbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0e5      	beq.n	8001b0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0202 	bic.w	r2, r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b50:	f7ff ff8e 	bl	8001a70 <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b56:	e012      	b.n	8001b7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b58:	f7ff ff8a 	bl	8001a70 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b0a      	cmp	r3, #10
 8001b64:	d90b      	bls.n	8001b7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2205      	movs	r2, #5
 8001b76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e09f      	b.n	8001cbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e5      	bne.n	8001b58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7e1b      	ldrb	r3, [r3, #24]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d108      	bne.n	8001ba6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e007      	b.n	8001bb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7e5b      	ldrb	r3, [r3, #25]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e007      	b.n	8001be0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7e9b      	ldrb	r3, [r3, #26]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0220 	orr.w	r2, r2, #32
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	e007      	b.n	8001c0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0220 	bic.w	r2, r2, #32
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7edb      	ldrb	r3, [r3, #27]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d108      	bne.n	8001c24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0210 	bic.w	r2, r2, #16
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e007      	b.n	8001c34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0210 	orr.w	r2, r2, #16
 8001c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7f1b      	ldrb	r3, [r3, #28]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d108      	bne.n	8001c4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0208 	orr.w	r2, r2, #8
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e007      	b.n	8001c5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0208 	bic.w	r2, r2, #8
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7f5b      	ldrb	r3, [r3, #29]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d108      	bne.n	8001c78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0204 	orr.w	r2, r2, #4
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e007      	b.n	8001c88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0204 	bic.w	r2, r2, #4
 8001c86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	1e5a      	subs	r2, r3, #1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b08a      	sub	sp, #40	; 0x28
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d07c      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d023      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f983 	bl	8002034 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d2e:	e016      	b.n	8001d5e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	e00c      	b.n	8001d5e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	e002      	b.n	8001d5e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f989 	bl	8002070 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d024      	beq.n	8001db2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f963 	bl	8002048 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d82:	e016      	b.n	8001db2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
 8001d96:	e00c      	b.n	8001db2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	e002      	b.n	8001db2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f969 	bl	8002084 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d024      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f943 	bl	800205c <HAL_CAN_TxMailbox2CompleteCallback>
 8001dd6:	e016      	b.n	8001e06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dea:	e00c      	b.n	8001e06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	e002      	b.n	8001e06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f949 	bl	8002098 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00c      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2210      	movs	r2, #16
 8001e28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2208      	movs	r2, #8
 8001e44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f93a 	bl	80020c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f921 	bl	80020ac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00c      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00b      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f91c 	bl	80020e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f903 	bl	80020d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f906 	bl	80020fc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8ff 	bl	8002110 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d07b      	beq.n	8002014 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d072      	beq.n	800200c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d043      	beq.n	800200c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d03e      	beq.n	800200c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f94:	2b60      	cmp	r3, #96	; 0x60
 8001f96:	d02b      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x32a>
 8001f98:	2b60      	cmp	r3, #96	; 0x60
 8001f9a:	d82e      	bhi.n	8001ffa <HAL_CAN_IRQHandler+0x334>
 8001f9c:	2b50      	cmp	r3, #80	; 0x50
 8001f9e:	d022      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x320>
 8001fa0:	2b50      	cmp	r3, #80	; 0x50
 8001fa2:	d82a      	bhi.n	8001ffa <HAL_CAN_IRQHandler+0x334>
 8001fa4:	2b40      	cmp	r3, #64	; 0x40
 8001fa6:	d019      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x316>
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	d826      	bhi.n	8001ffa <HAL_CAN_IRQHandler+0x334>
 8001fac:	2b30      	cmp	r3, #48	; 0x30
 8001fae:	d010      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x30c>
 8001fb0:	2b30      	cmp	r3, #48	; 0x30
 8001fb2:	d822      	bhi.n	8001ffa <HAL_CAN_IRQHandler+0x334>
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d002      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x2f8>
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d005      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fbc:	e01d      	b.n	8001ffa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fc6:	e019      	b.n	8001ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fd0:	e014      	b.n	8001ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	f043 0320 	orr.w	r3, r3, #32
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fda:	e00f      	b.n	8001ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fe4:	e00a      	b.n	8001ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fee:	e005      	b.n	8001ffc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ff8:	e000      	b.n	8001ffc <HAL_CAN_IRQHandler+0x336>
            break;
 8001ffa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800200a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2204      	movs	r2, #4
 8002012:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f87c 	bl	8002124 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002154:	4013      	ands	r3, r2
 8002156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216a:	4a04      	ldr	r2, [pc, #16]	; (800217c <__NVIC_SetPriorityGrouping+0x44>)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	60d3      	str	r3, [r2, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <__NVIC_GetPriorityGrouping+0x18>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	f003 0307 	and.w	r3, r3, #7
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	db0b      	blt.n	80021c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	f003 021f 	and.w	r2, r3, #31
 80021b4:	4907      	ldr	r1, [pc, #28]	; (80021d4 <__NVIC_EnableIRQ+0x38>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	2001      	movs	r0, #1
 80021be:	fa00 f202 	lsl.w	r2, r0, r2
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	6039      	str	r1, [r7, #0]
 80021e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	db0a      	blt.n	8002202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	490c      	ldr	r1, [pc, #48]	; (8002224 <__NVIC_SetPriority+0x4c>)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	0112      	lsls	r2, r2, #4
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	440b      	add	r3, r1
 80021fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002200:	e00a      	b.n	8002218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4908      	ldr	r1, [pc, #32]	; (8002228 <__NVIC_SetPriority+0x50>)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3b04      	subs	r3, #4
 8002210:	0112      	lsls	r2, r2, #4
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	440b      	add	r3, r1
 8002216:	761a      	strb	r2, [r3, #24]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f1c3 0307 	rsb	r3, r3, #7
 8002246:	2b04      	cmp	r3, #4
 8002248:	bf28      	it	cs
 800224a:	2304      	movcs	r3, #4
 800224c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3304      	adds	r3, #4
 8002252:	2b06      	cmp	r3, #6
 8002254:	d902      	bls.n	800225c <NVIC_EncodePriority+0x30>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3b03      	subs	r3, #3
 800225a:	e000      	b.n	800225e <NVIC_EncodePriority+0x32>
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	401a      	ands	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43d9      	mvns	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	4313      	orrs	r3, r2
         );
}
 8002286:	4618      	mov	r0, r3
 8002288:	3724      	adds	r7, #36	; 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a4:	d301      	bcc.n	80022aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00f      	b.n	80022ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <SysTick_Config+0x40>)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b2:	210f      	movs	r1, #15
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f7ff ff8e 	bl	80021d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <SysTick_Config+0x40>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <SysTick_Config+0x40>)
 80022c4:	2207      	movs	r2, #7
 80022c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	e000e010 	.word	0xe000e010

080022d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff ff29 	bl	8002138 <__NVIC_SetPriorityGrouping>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002300:	f7ff ff3e 	bl	8002180 <__NVIC_GetPriorityGrouping>
 8002304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	6978      	ldr	r0, [r7, #20]
 800230c:	f7ff ff8e 	bl	800222c <NVIC_EncodePriority>
 8002310:	4602      	mov	r2, r0
 8002312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff5d 	bl	80021d8 <__NVIC_SetPriority>
}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff31 	bl	800219c <__NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffa2 	bl	8002294 <SysTick_Config>
 8002350:	4603      	mov	r3, r0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d106      	bne.n	8002378 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002376:	e005      	b.n	8002384 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800237e:	f023 0304 	bic.w	r3, r3, #4
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023a2:	f7ff fb65 	bl	8001a70 <HAL_GetTick>
 80023a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d008      	beq.n	80023c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2280      	movs	r2, #128	; 0x80
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e052      	b.n	800246c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0216 	bic.w	r2, r2, #22
 80023d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_DMA_Abort+0x62>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0208 	bic.w	r2, r2, #8
 8002404:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002416:	e013      	b.n	8002440 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002418:	f7ff fb2a 	bl	8001a70 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b05      	cmp	r3, #5
 8002424:	d90c      	bls.n	8002440 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2203      	movs	r2, #3
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e015      	b.n	800246c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1e4      	bne.n	8002418 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	223f      	movs	r2, #63	; 0x3f
 8002454:	409a      	lsls	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d004      	beq.n	8002492 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00c      	b.n	80024ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2205      	movs	r2, #5
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e16b      	b.n	80027ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f040 815a 	bne.w	80027a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002506:	2b02      	cmp	r3, #2
 8002508:	d130      	bne.n	800256c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0201 	and.w	r2, r3, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b03      	cmp	r3, #3
 8002576:	d017      	beq.n	80025a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80b4 	beq.w	80027a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b60      	ldr	r3, [pc, #384]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a5f      	ldr	r2, [pc, #380]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265a:	4a5b      	ldr	r2, [pc, #364]	; (80027c8 <HAL_GPIO_Init+0x310>)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_GPIO_Init+0x314>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02b      	beq.n	80026de <HAL_GPIO_Init+0x226>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a51      	ldr	r2, [pc, #324]	; (80027d0 <HAL_GPIO_Init+0x318>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x222>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a50      	ldr	r2, [pc, #320]	; (80027d4 <HAL_GPIO_Init+0x31c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x21e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4f      	ldr	r2, [pc, #316]	; (80027d8 <HAL_GPIO_Init+0x320>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x21a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_GPIO_Init+0x324>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x216>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4d      	ldr	r2, [pc, #308]	; (80027e0 <HAL_GPIO_Init+0x328>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x212>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <HAL_GPIO_Init+0x32c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <HAL_GPIO_Init+0x330>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x20a>
 80026be:	2307      	movs	r3, #7
 80026c0:	e00e      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026c2:	2308      	movs	r3, #8
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026c6:	2306      	movs	r3, #6
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x310>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_GPIO_Init+0x334>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002722:	4a32      	ldr	r2, [pc, #200]	; (80027ec <HAL_GPIO_Init+0x334>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <HAL_GPIO_Init+0x334>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274c:	4a27      	ldr	r2, [pc, #156]	; (80027ec <HAL_GPIO_Init+0x334>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_GPIO_Init+0x334>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_GPIO_Init+0x334>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_GPIO_Init+0x334>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_GPIO_Init+0x334>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae90 	bls.w	80024d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40021c00 	.word	0x40021c00
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e001      	b.n	8002812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e264      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d075      	beq.n	800295e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002872:	4ba3      	ldr	r3, [pc, #652]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d00c      	beq.n	8002898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4ba0      	ldr	r3, [pc, #640]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002886:	2b08      	cmp	r3, #8
 8002888:	d112      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288a:	4b9d      	ldr	r3, [pc, #628]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002896:	d10b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	4b99      	ldr	r3, [pc, #612]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d05b      	beq.n	800295c <HAL_RCC_OscConfig+0x108>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d157      	bne.n	800295c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e23f      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x74>
 80028ba:	4b91      	ldr	r3, [pc, #580]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a90      	ldr	r2, [pc, #576]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e01d      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x98>
 80028d2:	4b8b      	ldr	r3, [pc, #556]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a8a      	ldr	r2, [pc, #552]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a87      	ldr	r2, [pc, #540]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0xb0>
 80028ec:	4b84      	ldr	r3, [pc, #528]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a83      	ldr	r2, [pc, #524]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a80      	ldr	r2, [pc, #512]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d013      	beq.n	8002934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff f8b0 	bl	8001a70 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002914:	f7ff f8ac 	bl	8001a70 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e204      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0xc0>
 8002932:	e014      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7ff f89c 	bl	8001a70 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff f898 	bl	8001a70 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1f0      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	4b6c      	ldr	r3, [pc, #432]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0xe8>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d063      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800296a:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800297e:	2b08      	cmp	r3, #8
 8002980:	d11c      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002982:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e1c4      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4952      	ldr	r1, [pc, #328]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	e03a      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c4:	4b4f      	ldr	r3, [pc, #316]	; (8002b04 <HAL_RCC_OscConfig+0x2b0>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff f851 	bl	8001a70 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d2:	f7ff f84d 	bl	8001a70 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e1a5      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e4:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4940      	ldr	r1, [pc, #256]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]
 8002a04:	e015      	b.n	8002a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <HAL_RCC_OscConfig+0x2b0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff f830 	bl	8001a70 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a14:	f7ff f82c 	bl	8001a70 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e184      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d030      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a46:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <HAL_RCC_OscConfig+0x2b4>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7ff f810 	bl	8001a70 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a54:	f7ff f80c 	bl	8001a70 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e164      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x200>
 8002a72:	e015      	b.n	8002aa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCC_OscConfig+0x2b4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fff9 	bl	8001a70 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a82:	f7fe fff5 	bl	8001a70 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e14d      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a0 	beq.w	8002bee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x2b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d121      	bne.n	8002b2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <HAL_RCC_OscConfig+0x2b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <HAL_RCC_OscConfig+0x2b8>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7fe ffbb 	bl	8001a70 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e011      	b.n	8002b22 <HAL_RCC_OscConfig+0x2ce>
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	42470000 	.word	0x42470000
 8002b08:	42470e80 	.word	0x42470e80
 8002b0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b10:	f7fe ffae 	bl	8001a70 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e106      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <HAL_RCC_OscConfig+0x4e4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d106      	bne.n	8002b44 <HAL_RCC_OscConfig+0x2f0>
 8002b36:	4b81      	ldr	r3, [pc, #516]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	4a80      	ldr	r2, [pc, #512]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6713      	str	r3, [r2, #112]	; 0x70
 8002b42:	e01c      	b.n	8002b7e <HAL_RCC_OscConfig+0x32a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x312>
 8002b4c:	4b7b      	ldr	r3, [pc, #492]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a7a      	ldr	r2, [pc, #488]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	4a77      	ldr	r2, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	; 0x70
 8002b64:	e00b      	b.n	8002b7e <HAL_RCC_OscConfig+0x32a>
 8002b66:	4b75      	ldr	r3, [pc, #468]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a74      	ldr	r2, [pc, #464]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b72      	ldr	r3, [pc, #456]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a71      	ldr	r2, [pc, #452]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe ff73 	bl	8001a70 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe ff6f 	bl	8001a70 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0c5      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	4b65      	ldr	r3, [pc, #404]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ee      	beq.n	8002b8e <HAL_RCC_OscConfig+0x33a>
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe ff5d 	bl	8001a70 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe ff59 	bl	8001a70 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0af      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ee      	bne.n	8002bba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d105      	bne.n	8002bee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be2:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a55      	ldr	r2, [pc, #340]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 809b 	beq.w	8002d2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d05c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d141      	bne.n	8002c90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0c:	4b4c      	ldr	r3, [pc, #304]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe ff2d 	bl	8001a70 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe ff29 	bl	8001a70 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e081      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2c:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f0      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	019b      	lsls	r3, r3, #6
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	061b      	lsls	r3, r3, #24
 8002c5c:	4937      	ldr	r1, [pc, #220]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c62:	4b37      	ldr	r3, [pc, #220]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe ff02 	bl	8001a70 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fefe 	bl	8001a70 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e056      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x41c>
 8002c8e:	e04e      	b.n	8002d2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_RCC_OscConfig+0x4ec>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7fe feeb 	bl	8001a70 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fee7 	bl	8001a70 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e03f      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x44a>
 8002cbc:	e037      	b.n	8002d2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e032      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <HAL_RCC_OscConfig+0x4e8>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d028      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d121      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d11a      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d111      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	3b01      	subs	r3, #1
 8002d14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40007000 	.word	0x40007000
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	42470060 	.word	0x42470060

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0cc      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d90c      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b63      	ldr	r3, [pc, #396]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0b8      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d020      	beq.n	8002dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	494d      	ldr	r1, [pc, #308]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d044      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d119      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e07f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d003      	beq.n	8002e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e06f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e067      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 0203 	bic.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4934      	ldr	r1, [pc, #208]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e34:	f7fe fe1c 	bl	8001a70 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7fe fe18 	bl	8001a70 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e04f      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 020c 	and.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1eb      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d20c      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e032      	b.n	8002ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4916      	ldr	r1, [pc, #88]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	490e      	ldr	r1, [pc, #56]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eca:	f000 f82d 	bl	8002f28 <HAL_RCC_GetSysClockFreq>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	490a      	ldr	r1, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x1c0>)
 8002edc:	5ccb      	ldrb	r3, [r1, r3]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fbbe 	bl	800166c <HAL_InitTick>

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023c00 	.word	0x40023c00
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08008900 	.word	0x08008900
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000004 	.word	0x20000004

08002f10 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_EnableCSS+0x14>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	4247004c 	.word	0x4247004c

08002f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f28:	b5b0      	push	{r4, r5, r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f2e:	2100      	movs	r1, #0
 8002f30:	6079      	str	r1, [r7, #4]
 8002f32:	2100      	movs	r1, #0
 8002f34:	60f9      	str	r1, [r7, #12]
 8002f36:	2100      	movs	r1, #0
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3e:	4952      	ldr	r1, [pc, #328]	; (8003088 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f40:	6889      	ldr	r1, [r1, #8]
 8002f42:	f001 010c 	and.w	r1, r1, #12
 8002f46:	2908      	cmp	r1, #8
 8002f48:	d00d      	beq.n	8002f66 <HAL_RCC_GetSysClockFreq+0x3e>
 8002f4a:	2908      	cmp	r1, #8
 8002f4c:	f200 8094 	bhi.w	8003078 <HAL_RCC_GetSysClockFreq+0x150>
 8002f50:	2900      	cmp	r1, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0x32>
 8002f54:	2904      	cmp	r1, #4
 8002f56:	d003      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x38>
 8002f58:	e08e      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f5a:	4b4c      	ldr	r3, [pc, #304]	; (800308c <HAL_RCC_GetSysClockFreq+0x164>)
 8002f5c:	60bb      	str	r3, [r7, #8]
       break;
 8002f5e:	e08e      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f60:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f62:	60bb      	str	r3, [r7, #8]
      break;
 8002f64:	e08b      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f66:	4948      	ldr	r1, [pc, #288]	; (8003088 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f68:	6849      	ldr	r1, [r1, #4]
 8002f6a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f6e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f70:	4945      	ldr	r1, [pc, #276]	; (8003088 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f72:	6849      	ldr	r1, [r1, #4]
 8002f74:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f78:	2900      	cmp	r1, #0
 8002f7a:	d024      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4942      	ldr	r1, [pc, #264]	; (8003088 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f7e:	6849      	ldr	r1, [r1, #4]
 8002f80:	0989      	lsrs	r1, r1, #6
 8002f82:	4608      	mov	r0, r1
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f8c:	f04f 0500 	mov.w	r5, #0
 8002f90:	ea00 0204 	and.w	r2, r0, r4
 8002f94:	ea01 0305 	and.w	r3, r1, r5
 8002f98:	493d      	ldr	r1, [pc, #244]	; (8003090 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f9a:	fb01 f003 	mul.w	r0, r1, r3
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	fb01 f102 	mul.w	r1, r1, r2
 8002fa4:	1844      	adds	r4, r0, r1
 8002fa6:	493a      	ldr	r1, [pc, #232]	; (8003090 <HAL_RCC_GetSysClockFreq+0x168>)
 8002fa8:	fba2 0101 	umull	r0, r1, r2, r1
 8002fac:	1863      	adds	r3, r4, r1
 8002fae:	4619      	mov	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	f7fd f95a 	bl	8000270 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e04a      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc6:	4b30      	ldr	r3, [pc, #192]	; (8003088 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	099b      	lsrs	r3, r3, #6
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	ea02 0400 	and.w	r4, r2, r0
 8002fde:	ea03 0501 	and.w	r5, r3, r1
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	014b      	lsls	r3, r1, #5
 8002ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ff4:	0142      	lsls	r2, r0, #5
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	1b00      	subs	r0, r0, r4
 8002ffc:	eb61 0105 	sbc.w	r1, r1, r5
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	018b      	lsls	r3, r1, #6
 800300a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800300e:	0182      	lsls	r2, r0, #6
 8003010:	1a12      	subs	r2, r2, r0
 8003012:	eb63 0301 	sbc.w	r3, r3, r1
 8003016:	f04f 0000 	mov.w	r0, #0
 800301a:	f04f 0100 	mov.w	r1, #0
 800301e:	00d9      	lsls	r1, r3, #3
 8003020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003024:	00d0      	lsls	r0, r2, #3
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	1912      	adds	r2, r2, r4
 800302c:	eb45 0303 	adc.w	r3, r5, r3
 8003030:	f04f 0000 	mov.w	r0, #0
 8003034:	f04f 0100 	mov.w	r1, #0
 8003038:	0299      	lsls	r1, r3, #10
 800303a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800303e:	0290      	lsls	r0, r2, #10
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	461a      	mov	r2, r3
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	f7fd f90e 	bl	8000270 <__aeabi_uldivmod>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4613      	mov	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_RCC_GetSysClockFreq+0x160>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	3301      	adds	r3, #1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	60bb      	str	r3, [r7, #8]
      break;
 8003076:	e002      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <HAL_RCC_GetSysClockFreq+0x164>)
 800307a:	60bb      	str	r3, [r7, #8]
      break;
 800307c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800307e:	68bb      	ldr	r3, [r7, #8]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bdb0      	pop	{r4, r5, r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	00f42400 	.word	0x00f42400
 8003090:	017d7840 	.word	0x017d7840

08003094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000000 	.word	0x20000000

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030b0:	f7ff fff0 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	0a9b      	lsrs	r3, r3, #10
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4903      	ldr	r1, [pc, #12]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40023800 	.word	0x40023800
 80030d0:	08008910 	.word	0x08008910

080030d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030d8:	f7ff ffdc 	bl	8003094 <HAL_RCC_GetHCLKFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	0b5b      	lsrs	r3, r3, #13
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	4903      	ldr	r1, [pc, #12]	; (80030f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40023800 	.word	0x40023800
 80030f8:	08008910 	.word	0x08008910

080030fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	220f      	movs	r2, #15
 800310a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_RCC_GetClockConfig+0x60>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	601a      	str	r2, [r3, #0]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	40023c00 	.word	0x40023c00

08003160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e07b      	b.n	800326a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003182:	d009      	beq.n	8003198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
 800318a:	e005      	b.n	8003198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe f9c6 	bl	8001544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	ea42 0103 	orr.w	r1, r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	f003 0104 	and.w	r1, r3, #4
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f003 0210 	and.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003258:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08c      	sub	sp, #48	; 0x30
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003280:	2301      	movs	r3, #1
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x26>
 8003294:	2302      	movs	r3, #2
 8003296:	e18a      	b.n	80035ae <HAL_SPI_TransmitReceive+0x33c>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a0:	f7fe fbe6 	bl	8001a70 <HAL_GetTick>
 80032a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d00f      	beq.n	80032e2 <HAL_SPI_TransmitReceive+0x70>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c8:	d107      	bne.n	80032da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_SPI_TransmitReceive+0x68>
 80032d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d003      	beq.n	80032e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032da:	2302      	movs	r3, #2
 80032dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032e0:	e15b      	b.n	800359a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x82>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x82>
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032fa:	e14e      	b.n	800359a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b04      	cmp	r3, #4
 8003306:	d003      	beq.n	8003310 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2205      	movs	r2, #5
 800330c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	887a      	ldrh	r2, [r7, #2]
 8003326:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	887a      	ldrh	r2, [r7, #2]
 8003332:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d007      	beq.n	8003364 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336c:	d178      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_SPI_TransmitReceive+0x10a>
 8003376:	8b7b      	ldrh	r3, [r7, #26]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d166      	bne.n	800344a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	1c9a      	adds	r2, r3, #2
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a0:	e053      	b.n	800344a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d11b      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x176>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x176>
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d113      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d119      	bne.n	800342a <HAL_SPI_TransmitReceive+0x1b8>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d014      	beq.n	800342a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	b292      	uxth	r2, r2
 800340c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	1c9a      	adds	r2, r3, #2
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003426:	2301      	movs	r3, #1
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800342a:	f7fe fb21 	bl	8001a70 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003436:	429a      	cmp	r2, r3
 8003438:	d807      	bhi.n	800344a <HAL_SPI_TransmitReceive+0x1d8>
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d003      	beq.n	800344a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003448:	e0a7      	b.n	800359a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1a6      	bne.n	80033a2 <HAL_SPI_TransmitReceive+0x130>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1a1      	bne.n	80033a2 <HAL_SPI_TransmitReceive+0x130>
 800345e:	e07c      	b.n	800355a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_SPI_TransmitReceive+0x1fc>
 8003468:	8b7b      	ldrh	r3, [r7, #26]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d16b      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	7812      	ldrb	r2, [r2, #0]
 800347a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003494:	e057      	b.n	8003546 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d11c      	bne.n	80034de <HAL_SPI_TransmitReceive+0x26c>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d017      	beq.n	80034de <HAL_SPI_TransmitReceive+0x26c>
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d114      	bne.n	80034de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d119      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x2ae>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d014      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800351c:	2301      	movs	r3, #1
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003520:	f7fe faa6 	bl	8001a70 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800352c:	429a      	cmp	r2, r3
 800352e:	d803      	bhi.n	8003538 <HAL_SPI_TransmitReceive+0x2c6>
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d102      	bne.n	800353e <HAL_SPI_TransmitReceive+0x2cc>
 8003538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003544:	e029      	b.n	800359a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1a2      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x224>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d19d      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f8b2 	bl	80036c8 <SPI_EndRxTxTransaction>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003576:	e010      	b.n	800359a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	e000      	b.n	800359a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003598:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3730      	adds	r7, #48	; 0x30
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035c8:	f7fe fa52 	bl	8001a70 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	4413      	add	r3, r2
 80035d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035d8:	f7fe fa4a 	bl	8001a70 <HAL_GetTick>
 80035dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	015b      	lsls	r3, r3, #5
 80035e4:	0d1b      	lsrs	r3, r3, #20
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ee:	e054      	b.n	800369a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d050      	beq.n	800369a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035f8:	f7fe fa3a 	bl	8001a70 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	429a      	cmp	r2, r3
 8003606:	d902      	bls.n	800360e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d13d      	bne.n	800368a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800361c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003626:	d111      	bne.n	800364c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003630:	d004      	beq.n	800363c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363a:	d107      	bne.n	800364c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003654:	d10f      	bne.n	8003676 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003674:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e017      	b.n	80036ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	3b01      	subs	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d19b      	bne.n	80035f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000000 	.word	0x20000000

080036c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <SPI_EndRxTxTransaction+0x7c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <SPI_EndRxTxTransaction+0x80>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	0d5b      	lsrs	r3, r3, #21
 80036e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f2:	d112      	bne.n	800371a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2200      	movs	r2, #0
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff ff5a 	bl	80035b8 <SPI_WaitFlagStateUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e00f      	b.n	800373a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	3b01      	subs	r3, #1
 8003724:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d0f2      	beq.n	800371a <SPI_EndRxTxTransaction+0x52>
 8003734:	e000      	b.n	8003738 <SPI_EndRxTxTransaction+0x70>
        break;
 8003736:	bf00      	nop
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000000 	.word	0x20000000
 8003748:	165e9f81 	.word	0x165e9f81

0800374c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e041      	b.n	80037e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f839 	bl	80037ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f000 f9d8 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d001      	beq.n	8003818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e04e      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a23      	ldr	r2, [pc, #140]	; (80038c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d022      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003842:	d01d      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d018      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_TIM_Base_Start_IT+0xcc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x80>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a18      	ldr	r2, [pc, #96]	; (80038dc <HAL_TIM_Base_Start_IT+0xdc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d111      	bne.n	80038a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d010      	beq.n	80038b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0201 	orr.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	e007      	b.n	80038b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40000800 	.word	0x40000800
 80038d0:	40000c00 	.word	0x40000c00
 80038d4:	40010400 	.word	0x40010400
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40001800 	.word	0x40001800

080038e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d122      	bne.n	800393c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b02      	cmp	r3, #2
 8003902:	d11b      	bne.n	800393c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0202 	mvn.w	r2, #2
 800390c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f8ee 	bl	8003b04 <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8e0 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8f1 	bl	8003b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b04      	cmp	r3, #4
 8003948:	d122      	bne.n	8003990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0204 	mvn.w	r2, #4
 8003960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8c4 	bl	8003b04 <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8b6 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f8c7 	bl	8003b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	2b08      	cmp	r3, #8
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0208 	mvn.w	r2, #8
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2204      	movs	r2, #4
 80039ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f89a 	bl	8003b04 <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f88c 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f89d 	bl	8003b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d122      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d11b      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0210 	mvn.w	r2, #16
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f870 	bl	8003b04 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f862 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f873 	bl	8003b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d10e      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d107      	bne.n	8003a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0201 	mvn.w	r2, #1
 8003a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd fd22 	bl	80014a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b80      	cmp	r3, #128	; 0x80
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	d107      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f902 	bl	8003c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f838 	bl	8003b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0220 	mvn.w	r2, #32
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8cc 	bl	8003c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a40      	ldr	r2, [pc, #256]	; (8003c54 <TIM_Base_SetConfig+0x114>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5e:	d00f      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a3d      	ldr	r2, [pc, #244]	; (8003c58 <TIM_Base_SetConfig+0x118>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a3c      	ldr	r2, [pc, #240]	; (8003c5c <TIM_Base_SetConfig+0x11c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3b      	ldr	r2, [pc, #236]	; (8003c60 <TIM_Base_SetConfig+0x120>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a3a      	ldr	r2, [pc, #232]	; (8003c64 <TIM_Base_SetConfig+0x124>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d108      	bne.n	8003b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2f      	ldr	r2, [pc, #188]	; (8003c54 <TIM_Base_SetConfig+0x114>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d027      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <TIM_Base_SetConfig+0x118>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d023      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2b      	ldr	r2, [pc, #172]	; (8003c5c <TIM_Base_SetConfig+0x11c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01f      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2a      	ldr	r2, [pc, #168]	; (8003c60 <TIM_Base_SetConfig+0x120>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a29      	ldr	r2, [pc, #164]	; (8003c64 <TIM_Base_SetConfig+0x124>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d017      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a28      	ldr	r2, [pc, #160]	; (8003c68 <TIM_Base_SetConfig+0x128>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <TIM_Base_SetConfig+0x12c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00f      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <TIM_Base_SetConfig+0x130>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <TIM_Base_SetConfig+0x134>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a24      	ldr	r2, [pc, #144]	; (8003c78 <TIM_Base_SetConfig+0x138>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a23      	ldr	r2, [pc, #140]	; (8003c7c <TIM_Base_SetConfig+0x13c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <TIM_Base_SetConfig+0x114>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0xf8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a0c      	ldr	r2, [pc, #48]	; (8003c64 <TIM_Base_SetConfig+0x124>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d103      	bne.n	8003c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	615a      	str	r2, [r3, #20]
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40010000 	.word	0x40010000
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40000c00 	.word	0x40000c00
 8003c64:	40010400 	.word	0x40010400
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40014400 	.word	0x40014400
 8003c70:	40014800 	.word	0x40014800
 8003c74:	40001800 	.word	0x40001800
 8003c78:	40001c00 	.word	0x40001c00
 8003c7c:	40002000 	.word	0x40002000

08003c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e03f      	b.n	8003d3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd fe1e 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	; 0x24
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fd7b 	bl	80047e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b08a      	sub	sp, #40	; 0x28
 8003d46:	af02      	add	r7, sp, #8
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d17c      	bne.n	8003e5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_UART_Transmit+0x2c>
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e075      	b.n	8003e5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_UART_Transmit+0x3e>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e06e      	b.n	8003e5e <HAL_UART_Transmit+0x11c>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2221      	movs	r2, #33	; 0x21
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d96:	f7fd fe6b 	bl	8001a70 <HAL_GetTick>
 8003d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db0:	d108      	bne.n	8003dc4 <HAL_UART_Transmit+0x82>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e003      	b.n	8003dcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003dd4:	e02a      	b.n	8003e2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2180      	movs	r1, #128	; 0x80
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 faf9 	bl	80043d8 <UART_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e036      	b.n	8003e5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	3302      	adds	r3, #2
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	e007      	b.n	8003e1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1cf      	bne.n	8003dd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2140      	movs	r1, #64	; 0x40
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fac9 	bl	80043d8 <UART_WaitOnFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e006      	b.n	8003e5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b0ba      	sub	sp, #232	; 0xe8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10f      	bne.n	8003ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_UART_IRQHandler+0x66>
 8003eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fbd3 	bl	8004672 <UART_Receive_IT>
      return;
 8003ecc:	e256      	b.n	800437c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80de 	beq.w	8004094 <HAL_UART_IRQHandler+0x22c>
 8003ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80d1 	beq.w	8004094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_UART_IRQHandler+0xae>
 8003efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0201 	orr.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_UART_IRQHandler+0xd2>
 8003f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_UART_IRQHandler+0xf6>
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0204 	orr.w	r2, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d011      	beq.n	8003f8e <HAL_UART_IRQHandler+0x126>
 8003f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d105      	bne.n	8003f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f043 0208 	orr.w	r2, r3, #8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 81ed 	beq.w	8004372 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x14e>
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fb5e 	bl	8004672 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x17a>
 8003fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d04f      	beq.n	8004082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa66 	bl	80044b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b40      	cmp	r3, #64	; 0x40
 8003ff4:	d141      	bne.n	800407a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800400c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800402e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800403a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1d9      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	2b00      	cmp	r3, #0
 8004048:	d013      	beq.n	8004072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	4a7d      	ldr	r2, [pc, #500]	; (8004244 <HAL_UART_IRQHandler+0x3dc>)
 8004050:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fa0c 	bl	8002474 <HAL_DMA_Abort_IT>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800406c:	4610      	mov	r0, r2
 800406e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	e00e      	b.n	8004090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f99a 	bl	80043ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	e00a      	b.n	8004090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f996 	bl	80043ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004080:	e006      	b.n	8004090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f992 	bl	80043ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800408e:	e170      	b.n	8004372 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	bf00      	nop
    return;
 8004092:	e16e      	b.n	8004372 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	2b01      	cmp	r3, #1
 800409a:	f040 814a 	bne.w	8004332 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8143 	beq.w	8004332 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 813c 	beq.w	8004332 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	f040 80b4 	bne.w	8004248 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8140 	beq.w	8004376 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040fe:	429a      	cmp	r2, r3
 8004100:	f080 8139 	bcs.w	8004376 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800410a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004116:	f000 8088 	beq.w	800422a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800414a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004152:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800415e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1d9      	bne.n	800411a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800418a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800418e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004192:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800419c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e1      	bne.n	8004166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e3      	bne.n	80041a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800420c:	65ba      	str	r2, [r7, #88]	; 0x58
 800420e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800421a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e3      	bne.n	80041e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe f8b5 	bl	8002394 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004232:	b29b      	uxth	r3, r3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	b29b      	uxth	r3, r3
 8004238:	4619      	mov	r1, r3
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f8c0 	bl	80043c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004240:	e099      	b.n	8004376 <HAL_UART_IRQHandler+0x50e>
 8004242:	bf00      	nop
 8004244:	0800457b 	.word	0x0800457b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 808b 	beq.w	800437a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8086 	beq.w	800437a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800427e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004292:	647a      	str	r2, [r7, #68]	; 0x44
 8004294:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e3      	bne.n	800426e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	623b      	str	r3, [r7, #32]
   return(result);
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3314      	adds	r3, #20
 80042c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042ca:	633a      	str	r2, [r7, #48]	; 0x30
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e3      	bne.n	80042a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0310 	bic.w	r3, r3, #16
 8004302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004310:	61fa      	str	r2, [r7, #28]
 8004312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	617b      	str	r3, [r7, #20]
   return(result);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e3      	bne.n	80042ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004328:	4619      	mov	r1, r3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f848 	bl	80043c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004330:	e023      	b.n	800437a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_UART_IRQHandler+0x4ea>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f929 	bl	80045a2 <UART_Transmit_IT>
    return;
 8004350:	e014      	b.n	800437c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <HAL_UART_IRQHandler+0x514>
 800435e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f969 	bl	8004642 <UART_EndTransmit_IT>
    return;
 8004370:	e004      	b.n	800437c <HAL_UART_IRQHandler+0x514>
    return;
 8004372:	bf00      	nop
 8004374:	e002      	b.n	800437c <HAL_UART_IRQHandler+0x514>
      return;
 8004376:	bf00      	nop
 8004378:	e000      	b.n	800437c <HAL_UART_IRQHandler+0x514>
      return;
 800437a:	bf00      	nop
  }
}
 800437c:	37e8      	adds	r7, #232	; 0xe8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop

08004384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b090      	sub	sp, #64	; 0x40
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e8:	e050      	b.n	800448c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d04c      	beq.n	800448c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <UART_WaitOnFlagUntilTimeout+0x30>
 80043f8:	f7fd fb3a 	bl	8001a70 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004404:	429a      	cmp	r2, r3
 8004406:	d241      	bcs.n	800448c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800441e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004428:	637a      	str	r2, [r7, #52]	; 0x34
 800442a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800442e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	613b      	str	r3, [r7, #16]
   return(result);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800445c:	623a      	str	r2, [r7, #32]
 800445e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	69f9      	ldr	r1, [r7, #28]
 8004462:	6a3a      	ldr	r2, [r7, #32]
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	61bb      	str	r3, [r7, #24]
   return(result);
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e00f      	b.n	80044ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4013      	ands	r3, r2
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d09f      	beq.n	80043ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3740      	adds	r7, #64	; 0x40
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b095      	sub	sp, #84	; 0x54
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044dc:	643a      	str	r2, [r7, #64]	; 0x40
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3314      	adds	r3, #20
 80044f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	64bb      	str	r3, [r7, #72]	; 0x48
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3314      	adds	r3, #20
 800450e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e5      	bne.n	80044f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	2b01      	cmp	r3, #1
 800452a:	d119      	bne.n	8004560 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	60bb      	str	r3, [r7, #8]
   return(result);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f023 0310 	bic.w	r3, r3, #16
 8004542:	647b      	str	r3, [r7, #68]	; 0x44
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800454c:	61ba      	str	r2, [r7, #24]
 800454e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6979      	ldr	r1, [r7, #20]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	613b      	str	r3, [r7, #16]
   return(result);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e5      	bne.n	800452c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800456e:	bf00      	nop
 8004570:	3754      	adds	r7, #84	; 0x54
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff ff09 	bl	80043ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b21      	cmp	r3, #33	; 0x21
 80045b4:	d13e      	bne.n	8004634 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045be:	d114      	bne.n	80045ea <UART_Transmit_IT+0x48>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d110      	bne.n	80045ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	1c9a      	adds	r2, r3, #2
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	621a      	str	r2, [r3, #32]
 80045e8:	e008      	b.n	80045fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	1c59      	adds	r1, r3, #1
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6211      	str	r1, [r2, #32]
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4619      	mov	r1, r3
 800460a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10f      	bne.n	8004630 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800461e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800462e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e000      	b.n	8004636 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004658:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fe8e 	bl	8004384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b08c      	sub	sp, #48	; 0x30
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	f040 80ab 	bne.w	80047de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d117      	bne.n	80046c2 <UART_Receive_IT+0x50>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d113      	bne.n	80046c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	629a      	str	r2, [r3, #40]	; 0x28
 80046c0:	e026      	b.n	8004710 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d007      	beq.n	80046e6 <UART_Receive_IT+0x74>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <UART_Receive_IT+0x82>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	701a      	strb	r2, [r3, #0]
 80046f2:	e008      	b.n	8004706 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004700:	b2da      	uxtb	r2, r3
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29b      	uxth	r3, r3
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4619      	mov	r1, r3
 800471e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004720:	2b00      	cmp	r3, #0
 8004722:	d15a      	bne.n	80047da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0220 	bic.w	r2, r2, #32
 8004732:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0201 	bic.w	r2, r2, #1
 8004752:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	2b01      	cmp	r3, #1
 8004762:	d135      	bne.n	80047d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	613b      	str	r3, [r7, #16]
   return(result);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f023 0310 	bic.w	r3, r3, #16
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478a:	623a      	str	r2, [r7, #32]
 800478c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	69f9      	ldr	r1, [r7, #28]
 8004790:	6a3a      	ldr	r2, [r7, #32]
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	61bb      	str	r3, [r7, #24]
   return(result);
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e5      	bne.n	800476a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d10a      	bne.n	80047c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fdf9 	bl	80043c0 <HAL_UARTEx_RxEventCallback>
 80047ce:	e002      	b.n	80047d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff fde1 	bl	8004398 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	e002      	b.n	80047e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3730      	adds	r7, #48	; 0x30
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	b09f      	sub	sp, #124	; 0x7c
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fe:	68d9      	ldr	r1, [r3, #12]
 8004800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	ea40 0301 	orr.w	r3, r0, r1
 8004808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	431a      	orrs	r2, r3
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	431a      	orrs	r2, r3
 800481a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	4313      	orrs	r3, r2
 8004820:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800482c:	f021 010c 	bic.w	r1, r1, #12
 8004830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004836:	430b      	orrs	r3, r1
 8004838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800483a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004846:	6999      	ldr	r1, [r3, #24]
 8004848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	ea40 0301 	orr.w	r3, r0, r1
 8004850:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4bc5      	ldr	r3, [pc, #788]	; (8004b6c <UART_SetConfig+0x384>)
 8004858:	429a      	cmp	r2, r3
 800485a:	d004      	beq.n	8004866 <UART_SetConfig+0x7e>
 800485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4bc3      	ldr	r3, [pc, #780]	; (8004b70 <UART_SetConfig+0x388>)
 8004862:	429a      	cmp	r2, r3
 8004864:	d103      	bne.n	800486e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004866:	f7fe fc35 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 800486a:	6778      	str	r0, [r7, #116]	; 0x74
 800486c:	e002      	b.n	8004874 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800486e:	f7fe fc1d 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8004872:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800487c:	f040 80b6 	bne.w	80049ec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004882:	461c      	mov	r4, r3
 8004884:	f04f 0500 	mov.w	r5, #0
 8004888:	4622      	mov	r2, r4
 800488a:	462b      	mov	r3, r5
 800488c:	1891      	adds	r1, r2, r2
 800488e:	6439      	str	r1, [r7, #64]	; 0x40
 8004890:	415b      	adcs	r3, r3
 8004892:	647b      	str	r3, [r7, #68]	; 0x44
 8004894:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004898:	1912      	adds	r2, r2, r4
 800489a:	eb45 0303 	adc.w	r3, r5, r3
 800489e:	f04f 0000 	mov.w	r0, #0
 80048a2:	f04f 0100 	mov.w	r1, #0
 80048a6:	00d9      	lsls	r1, r3, #3
 80048a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048ac:	00d0      	lsls	r0, r2, #3
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	1911      	adds	r1, r2, r4
 80048b4:	6639      	str	r1, [r7, #96]	; 0x60
 80048b6:	416b      	adcs	r3, r5
 80048b8:	667b      	str	r3, [r7, #100]	; 0x64
 80048ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	461a      	mov	r2, r3
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048c8:	415b      	adcs	r3, r3
 80048ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80048d4:	f7fb fccc 	bl	8000270 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4ba5      	ldr	r3, [pc, #660]	; (8004b74 <UART_SetConfig+0x38c>)
 80048de:	fba3 2302 	umull	r2, r3, r3, r2
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	011e      	lsls	r6, r3, #4
 80048e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e8:	461c      	mov	r4, r3
 80048ea:	f04f 0500 	mov.w	r5, #0
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	6339      	str	r1, [r7, #48]	; 0x30
 80048f6:	415b      	adcs	r3, r3
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
 80048fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048fe:	1912      	adds	r2, r2, r4
 8004900:	eb45 0303 	adc.w	r3, r5, r3
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	00d9      	lsls	r1, r3, #3
 800490e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004912:	00d0      	lsls	r0, r2, #3
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	1911      	adds	r1, r2, r4
 800491a:	65b9      	str	r1, [r7, #88]	; 0x58
 800491c:	416b      	adcs	r3, r5
 800491e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	461a      	mov	r2, r3
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	1891      	adds	r1, r2, r2
 800492c:	62b9      	str	r1, [r7, #40]	; 0x28
 800492e:	415b      	adcs	r3, r3
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004936:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800493a:	f7fb fc99 	bl	8000270 <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4b8c      	ldr	r3, [pc, #560]	; (8004b74 <UART_SetConfig+0x38c>)
 8004944:	fba3 1302 	umull	r1, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	2164      	movs	r1, #100	; 0x64
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	3332      	adds	r3, #50	; 0x32
 8004956:	4a87      	ldr	r2, [pc, #540]	; (8004b74 <UART_SetConfig+0x38c>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004964:	441e      	add	r6, r3
 8004966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004968:	4618      	mov	r0, r3
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	1894      	adds	r4, r2, r2
 8004974:	623c      	str	r4, [r7, #32]
 8004976:	415b      	adcs	r3, r3
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
 800497a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800497e:	1812      	adds	r2, r2, r0
 8004980:	eb41 0303 	adc.w	r3, r1, r3
 8004984:	f04f 0400 	mov.w	r4, #0
 8004988:	f04f 0500 	mov.w	r5, #0
 800498c:	00dd      	lsls	r5, r3, #3
 800498e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004992:	00d4      	lsls	r4, r2, #3
 8004994:	4622      	mov	r2, r4
 8004996:	462b      	mov	r3, r5
 8004998:	1814      	adds	r4, r2, r0
 800499a:	653c      	str	r4, [r7, #80]	; 0x50
 800499c:	414b      	adcs	r3, r1
 800499e:	657b      	str	r3, [r7, #84]	; 0x54
 80049a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	461a      	mov	r2, r3
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	1891      	adds	r1, r2, r2
 80049ac:	61b9      	str	r1, [r7, #24]
 80049ae:	415b      	adcs	r3, r3
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049ba:	f7fb fc59 	bl	8000270 <__aeabi_uldivmod>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	4b6c      	ldr	r3, [pc, #432]	; (8004b74 <UART_SetConfig+0x38c>)
 80049c4:	fba3 1302 	umull	r1, r3, r3, r2
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	2164      	movs	r1, #100	; 0x64
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	3332      	adds	r3, #50	; 0x32
 80049d6:	4a67      	ldr	r2, [pc, #412]	; (8004b74 <UART_SetConfig+0x38c>)
 80049d8:	fba2 2303 	umull	r2, r3, r2, r3
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	f003 0207 	and.w	r2, r3, #7
 80049e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4432      	add	r2, r6
 80049e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049ea:	e0b9      	b.n	8004b60 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ee:	461c      	mov	r4, r3
 80049f0:	f04f 0500 	mov.w	r5, #0
 80049f4:	4622      	mov	r2, r4
 80049f6:	462b      	mov	r3, r5
 80049f8:	1891      	adds	r1, r2, r2
 80049fa:	6139      	str	r1, [r7, #16]
 80049fc:	415b      	adcs	r3, r3
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a04:	1912      	adds	r2, r2, r4
 8004a06:	eb45 0303 	adc.w	r3, r5, r3
 8004a0a:	f04f 0000 	mov.w	r0, #0
 8004a0e:	f04f 0100 	mov.w	r1, #0
 8004a12:	00d9      	lsls	r1, r3, #3
 8004a14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a18:	00d0      	lsls	r0, r2, #3
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	eb12 0804 	adds.w	r8, r2, r4
 8004a22:	eb43 0905 	adc.w	r9, r3, r5
 8004a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	008b      	lsls	r3, r1, #2
 8004a3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a3e:	0082      	lsls	r2, r0, #2
 8004a40:	4640      	mov	r0, r8
 8004a42:	4649      	mov	r1, r9
 8004a44:	f7fb fc14 	bl	8000270 <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <UART_SetConfig+0x38c>)
 8004a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	011e      	lsls	r6, r3, #4
 8004a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	1894      	adds	r4, r2, r2
 8004a64:	60bc      	str	r4, [r7, #8]
 8004a66:	415b      	adcs	r3, r3
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a6e:	1812      	adds	r2, r2, r0
 8004a70:	eb41 0303 	adc.w	r3, r1, r3
 8004a74:	f04f 0400 	mov.w	r4, #0
 8004a78:	f04f 0500 	mov.w	r5, #0
 8004a7c:	00dd      	lsls	r5, r3, #3
 8004a7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a82:	00d4      	lsls	r4, r2, #3
 8004a84:	4622      	mov	r2, r4
 8004a86:	462b      	mov	r3, r5
 8004a88:	1814      	adds	r4, r2, r0
 8004a8a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a8c:	414b      	adcs	r3, r1
 8004a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	008b      	lsls	r3, r1, #2
 8004aa4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004aa8:	0082      	lsls	r2, r0, #2
 8004aaa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004aae:	f7fb fbdf 	bl	8000270 <__aeabi_uldivmod>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <UART_SetConfig+0x38c>)
 8004ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	2164      	movs	r1, #100	; 0x64
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	3332      	adds	r3, #50	; 0x32
 8004aca:	4a2a      	ldr	r2, [pc, #168]	; (8004b74 <UART_SetConfig+0x38c>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad6:	441e      	add	r6, r3
 8004ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ada:	4618      	mov	r0, r3
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	1894      	adds	r4, r2, r2
 8004ae6:	603c      	str	r4, [r7, #0]
 8004ae8:	415b      	adcs	r3, r3
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af0:	1812      	adds	r2, r2, r0
 8004af2:	eb41 0303 	adc.w	r3, r1, r3
 8004af6:	f04f 0400 	mov.w	r4, #0
 8004afa:	f04f 0500 	mov.w	r5, #0
 8004afe:	00dd      	lsls	r5, r3, #3
 8004b00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b04:	00d4      	lsls	r4, r2, #3
 8004b06:	4622      	mov	r2, r4
 8004b08:	462b      	mov	r3, r5
 8004b0a:	eb12 0a00 	adds.w	sl, r2, r0
 8004b0e:	eb43 0b01 	adc.w	fp, r3, r1
 8004b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f04f 0100 	mov.w	r1, #0
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	008b      	lsls	r3, r1, #2
 8004b26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b2a:	0082      	lsls	r2, r0, #2
 8004b2c:	4650      	mov	r0, sl
 8004b2e:	4659      	mov	r1, fp
 8004b30:	f7fb fb9e 	bl	8000270 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <UART_SetConfig+0x38c>)
 8004b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2164      	movs	r1, #100	; 0x64
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	3332      	adds	r3, #50	; 0x32
 8004b4c:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <UART_SetConfig+0x38c>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	f003 020f 	and.w	r2, r3, #15
 8004b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4432      	add	r2, r6
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	bf00      	nop
 8004b62:	377c      	adds	r7, #124	; 0x7c
 8004b64:	46bd      	mov	sp, r7
 8004b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f

08004b78 <__NVIC_SetPriority>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	6039      	str	r1, [r7, #0]
 8004b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	db0a      	blt.n	8004ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	490c      	ldr	r1, [pc, #48]	; (8004bc4 <__NVIC_SetPriority+0x4c>)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	0112      	lsls	r2, r2, #4
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ba0:	e00a      	b.n	8004bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	4908      	ldr	r1, [pc, #32]	; (8004bc8 <__NVIC_SetPriority+0x50>)
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	3b04      	subs	r3, #4
 8004bb0:	0112      	lsls	r2, r2, #4
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	761a      	strb	r2, [r3, #24]
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	e000e100 	.word	0xe000e100
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <SysTick_Handler+0x1c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004bd4:	f001 fcfe 	bl	80065d4 <xTaskGetSchedulerState>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d001      	beq.n	8004be2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bde:	f002 fae3 	bl	80071a8 <xPortSysTickHandler>
  }
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	e000e010 	.word	0xe000e010

08004bec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	f06f 0004 	mvn.w	r0, #4
 8004bf6:	f7ff ffbf 	bl	8004b78 <__NVIC_SetPriority>
#endif
}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c06:	f3ef 8305 	mrs	r3, IPSR
 8004c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c12:	f06f 0305 	mvn.w	r3, #5
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	e00c      	b.n	8004c34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <osKernelInitialize+0x44>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <osKernelInitialize+0x44>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	607b      	str	r3, [r7, #4]
 8004c2c:	e002      	b.n	8004c34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c34:	687b      	ldr	r3, [r7, #4]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000094 	.word	0x20000094

08004c48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c4e:	f3ef 8305 	mrs	r3, IPSR
 8004c52:	603b      	str	r3, [r7, #0]
  return(result);
 8004c54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c5a:	f06f 0305 	mvn.w	r3, #5
 8004c5e:	607b      	str	r3, [r7, #4]
 8004c60:	e010      	b.n	8004c84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <osKernelStart+0x48>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d109      	bne.n	8004c7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c6a:	f7ff ffbf 	bl	8004bec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <osKernelStart+0x48>)
 8004c70:	2202      	movs	r2, #2
 8004c72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c74:	f001 f866 	bl	8005d44 <vTaskStartScheduler>
      stat = osOK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	e002      	b.n	8004c84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c84:	687b      	ldr	r3, [r7, #4]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000094 	.word	0x20000094

08004c94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08e      	sub	sp, #56	; 0x38
 8004c98:	af04      	add	r7, sp, #16
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca4:	f3ef 8305 	mrs	r3, IPSR
 8004ca8:	617b      	str	r3, [r7, #20]
  return(result);
 8004caa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d17e      	bne.n	8004dae <osThreadNew+0x11a>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d07b      	beq.n	8004dae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cba:	2318      	movs	r3, #24
 8004cbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d045      	beq.n	8004d5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <osThreadNew+0x48>
        name = attr->name;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <osThreadNew+0x6e>
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b38      	cmp	r3, #56	; 0x38
 8004cf4:	d805      	bhi.n	8004d02 <osThreadNew+0x6e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <osThreadNew+0x72>
        return (NULL);
 8004d02:	2300      	movs	r3, #0
 8004d04:	e054      	b.n	8004db0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00e      	beq.n	8004d3c <osThreadNew+0xa8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b5b      	cmp	r3, #91	; 0x5b
 8004d24:	d90a      	bls.n	8004d3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d006      	beq.n	8004d3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <osThreadNew+0xa8>
        mem = 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e010      	b.n	8004d5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10c      	bne.n	8004d5e <osThreadNew+0xca>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d108      	bne.n	8004d5e <osThreadNew+0xca>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <osThreadNew+0xca>
          mem = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e001      	b.n	8004d5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d110      	bne.n	8004d86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d6c:	9202      	str	r2, [sp, #8]
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6a3a      	ldr	r2, [r7, #32]
 8004d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fe0c 	bl	8005998 <xTaskCreateStatic>
 8004d80:	4603      	mov	r3, r0
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	e013      	b.n	8004dae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d110      	bne.n	8004dae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	f107 0310 	add.w	r3, r7, #16
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fe57 	bl	8005a52 <xTaskCreate>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <osThreadNew+0x11a>
            hTask = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dae:	693b      	ldr	r3, [r7, #16]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3728      	adds	r7, #40	; 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc0:	f3ef 8305 	mrs	r3, IPSR
 8004dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <osDelay+0x1c>
    stat = osErrorISR;
 8004dcc:	f06f 0305 	mvn.w	r3, #5
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e007      	b.n	8004de4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 ff7c 	bl	8005cdc <vTaskDelay>
    }
  }

  return (stat);
 8004de4:	68fb      	ldr	r3, [r7, #12]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a07      	ldr	r2, [pc, #28]	; (8004e1c <vApplicationGetIdleTaskMemory+0x2c>)
 8004e00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a06      	ldr	r2, [pc, #24]	; (8004e20 <vApplicationGetIdleTaskMemory+0x30>)
 8004e06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2280      	movs	r2, #128	; 0x80
 8004e0c:	601a      	str	r2, [r3, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000098 	.word	0x20000098
 8004e20:	200000f4 	.word	0x200000f4

08004e24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a07      	ldr	r2, [pc, #28]	; (8004e50 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a06      	ldr	r2, [pc, #24]	; (8004e54 <vApplicationGetTimerTaskMemory+0x30>)
 8004e3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	200002f4 	.word	0x200002f4
 8004e54:	20000350 	.word	0x20000350

08004e58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f103 0208 	add.w	r2, r3, #8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f103 0208 	add.w	r2, r3, #8
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f103 0208 	add.w	r2, r3, #8
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d103      	bne.n	8004f1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e00c      	b.n	8004f34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	e002      	b.n	8004f28 <vListInsert+0x2e>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d2f6      	bcs.n	8004f22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	601a      	str	r2, [r3, #0]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6892      	ldr	r2, [r2, #8]
 8004f82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6852      	ldr	r2, [r2, #4]
 8004f8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d103      	bne.n	8004fa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fea:	f002 f84b 	bl	8007084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff6:	68f9      	ldr	r1, [r7, #12]
 8004ff8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ffa:	fb01 f303 	mul.w	r3, r1, r3
 8004ffe:	441a      	add	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	3b01      	subs	r3, #1
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	441a      	add	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	22ff      	movs	r2, #255	; 0xff
 800502e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	22ff      	movs	r2, #255	; 0xff
 8005036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d114      	bne.n	800506a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01a      	beq.n	800507e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3310      	adds	r3, #16
 800504c:	4618      	mov	r0, r3
 800504e:	f001 f903 	bl	8006258 <xTaskRemoveFromEventList>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d012      	beq.n	800507e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <xQueueGenericReset+0xcc>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	e009      	b.n	800507e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3310      	adds	r3, #16
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fef2 	bl	8004e58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3324      	adds	r3, #36	; 0x24
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff feed 	bl	8004e58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800507e:	f002 f831 	bl	80070e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005082:	2301      	movs	r3, #1
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	e000ed04 	.word	0xe000ed04

08005090 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08e      	sub	sp, #56	; 0x38
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050b6:	bf00      	nop
 80050b8:	e7fe      	b.n	80050b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <xQueueGenericCreateStatic+0x52>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <xQueueGenericCreateStatic+0x56>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <xQueueGenericCreateStatic+0x58>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	623b      	str	r3, [r7, #32]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <xQueueGenericCreateStatic+0x7e>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <xQueueGenericCreateStatic+0x82>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <xQueueGenericCreateStatic+0x84>
 8005112:	2300      	movs	r3, #0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	61fb      	str	r3, [r7, #28]
}
 800512a:	bf00      	nop
 800512c:	e7fe      	b.n	800512c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800512e:	2350      	movs	r3, #80	; 0x50
 8005130:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b50      	cmp	r3, #80	; 0x50
 8005136:	d00a      	beq.n	800514e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	61bb      	str	r3, [r7, #24]
}
 800514a:	bf00      	nop
 800514c:	e7fe      	b.n	800514c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800514e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005162:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	4613      	mov	r3, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f805 	bl	8005180 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005178:	4618      	mov	r0, r3
 800517a:	3730      	adds	r7, #48	; 0x30
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e002      	b.n	80051a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051ae:	2101      	movs	r1, #1
 80051b0:	69b8      	ldr	r0, [r7, #24]
 80051b2:	f7ff ff05 	bl	8004fc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051d6:	2300      	movs	r3, #0
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <xQueueGenericSend+0x32>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <xQueueGenericSend+0x40>
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <xQueueGenericSend+0x44>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <xQueueGenericSend+0x46>
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <xQueueGenericSend+0x60>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d103      	bne.n	8005236 <xQueueGenericSend+0x6e>
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <xQueueGenericSend+0x72>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <xQueueGenericSend+0x74>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xQueueGenericSend+0x8e>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	623b      	str	r3, [r7, #32]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005256:	f001 f9bd 	bl	80065d4 <xTaskGetSchedulerState>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <xQueueGenericSend+0x9e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <xQueueGenericSend+0xa2>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueGenericSend+0xa4>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericSend+0xbe>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61fb      	str	r3, [r7, #28]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005286:	f001 fefd 	bl	8007084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <xQueueGenericSend+0xd4>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d129      	bne.n	80052f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052a2:	f000 fa0b 	bl	80056bc <prvCopyDataToQueue>
 80052a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d010      	beq.n	80052d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	3324      	adds	r3, #36	; 0x24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 ffcf 	bl	8006258 <xTaskRemoveFromEventList>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d013      	beq.n	80052e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052c0:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <xQueueGenericSend+0x1f8>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	e00a      	b.n	80052e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052d8:	4b39      	ldr	r3, [pc, #228]	; (80053c0 <xQueueGenericSend+0x1f8>)
 80052da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052e8:	f001 fefc 	bl	80070e4 <vPortExitCritical>
				return pdPASS;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e063      	b.n	80053b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052f6:	f001 fef5 	bl	80070e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e05c      	b.n	80053b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005304:	f107 0314 	add.w	r3, r7, #20
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f809 	bl	8006320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800530e:	2301      	movs	r3, #1
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005312:	f001 fee7 	bl	80070e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005316:	f000 fd7b 	bl	8005e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800531a:	f001 feb3 	bl	8007084 <vPortEnterCritical>
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005324:	b25b      	sxtb	r3, r3
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d103      	bne.n	8005334 <xQueueGenericSend+0x16c>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800533a:	b25b      	sxtb	r3, r3
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d103      	bne.n	800534a <xQueueGenericSend+0x182>
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800534a:	f001 fecb 	bl	80070e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800534e:	1d3a      	adds	r2, r7, #4
 8005350:	f107 0314 	add.w	r3, r7, #20
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fff8 	bl	800634c <xTaskCheckForTimeOut>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d124      	bne.n	80053ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005364:	f000 faa2 	bl	80058ac <prvIsQueueFull>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	3310      	adds	r3, #16
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f000 ff1e 	bl	80061b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800537c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537e:	f000 fa2d 	bl	80057dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005382:	f000 fd53 	bl	8005e2c <xTaskResumeAll>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	f47f af7c 	bne.w	8005286 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <xQueueGenericSend+0x1f8>)
 8005390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	e772      	b.n	8005286 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053a2:	f000 fa1b 	bl	80057dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053a6:	f000 fd41 	bl	8005e2c <xTaskResumeAll>
 80053aa:	e76c      	b.n	8005286 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ae:	f000 fa15 	bl	80057dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053b2:	f000 fd3b 	bl	8005e2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3738      	adds	r7, #56	; 0x38
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b090      	sub	sp, #64	; 0x40
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <xQueueGenericSendFromISR+0x3c>
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <xQueueGenericSendFromISR+0x40>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <xQueueGenericSendFromISR+0x42>
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d103      	bne.n	800542e <xQueueGenericSendFromISR+0x6a>
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <xQueueGenericSendFromISR+0x6e>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <xQueueGenericSendFromISR+0x70>
 8005432:	2300      	movs	r3, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	623b      	str	r3, [r7, #32]
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800544e:	f001 fefb 	bl	8007248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005452:	f3ef 8211 	mrs	r2, BASEPRI
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	61fa      	str	r2, [r7, #28]
 8005468:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800546a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800546c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <xQueueGenericSendFromISR+0xbc>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d12f      	bne.n	80054e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005496:	f000 f911 	bl	80056bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800549a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a2:	d112      	bne.n	80054ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d016      	beq.n	80054da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 fed1 	bl	8006258 <xTaskRemoveFromEventList>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e007      	b.n	80054da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054ce:	3301      	adds	r3, #1
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	b25a      	sxtb	r2, r3
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054da:	2301      	movs	r3, #1
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80054de:	e001      	b.n	80054e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3740      	adds	r7, #64	; 0x40
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08c      	sub	sp, #48	; 0x30
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005508:	2300      	movs	r3, #0
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <xQueueReceive+0x30>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	623b      	str	r3, [r7, #32]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <xQueueReceive+0x3e>
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <xQueueReceive+0x42>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <xQueueReceive+0x44>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <xQueueReceive+0x5e>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	61fb      	str	r3, [r7, #28]
}
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800555a:	f001 f83b 	bl	80065d4 <xTaskGetSchedulerState>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <xQueueReceive+0x6e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <xQueueReceive+0x72>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <xQueueReceive+0x74>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <xQueueReceive+0x8e>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	61bb      	str	r3, [r7, #24]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800558a:	f001 fd7b 	bl	8007084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01f      	beq.n	80055da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800559a:	68b9      	ldr	r1, [r7, #8]
 800559c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800559e:	f000 f8f7 	bl	8005790 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	1e5a      	subs	r2, r3, #1
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	3310      	adds	r3, #16
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fe4e 	bl	8006258 <xTaskRemoveFromEventList>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055c2:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <xQueueReceive+0x1bc>)
 80055c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055d2:	f001 fd87 	bl	80070e4 <vPortExitCritical>
				return pdPASS;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e069      	b.n	80056ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055e0:	f001 fd80 	bl	80070e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055e4:	2300      	movs	r3, #0
 80055e6:	e062      	b.n	80056ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055ee:	f107 0310 	add.w	r3, r7, #16
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fe94 	bl	8006320 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055f8:	2301      	movs	r3, #1
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055fc:	f001 fd72 	bl	80070e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005600:	f000 fc06 	bl	8005e10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005604:	f001 fd3e 	bl	8007084 <vPortEnterCritical>
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800560e:	b25b      	sxtb	r3, r3
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d103      	bne.n	800561e <xQueueReceive+0x122>
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005624:	b25b      	sxtb	r3, r3
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d103      	bne.n	8005634 <xQueueReceive+0x138>
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005634:	f001 fd56 	bl	80070e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005638:	1d3a      	adds	r2, r7, #4
 800563a:	f107 0310 	add.w	r3, r7, #16
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fe83 	bl	800634c <xTaskCheckForTimeOut>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d123      	bne.n	8005694 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800564c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800564e:	f000 f917 	bl	8005880 <prvIsQueueEmpty>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d017      	beq.n	8005688 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	3324      	adds	r3, #36	; 0x24
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4611      	mov	r1, r2
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fda9 	bl	80061b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005668:	f000 f8b8 	bl	80057dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800566c:	f000 fbde 	bl	8005e2c <xTaskResumeAll>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d189      	bne.n	800558a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <xQueueReceive+0x1bc>)
 8005678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	e780      	b.n	800558a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800568a:	f000 f8a7 	bl	80057dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800568e:	f000 fbcd 	bl	8005e2c <xTaskResumeAll>
 8005692:	e77a      	b.n	800558a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005696:	f000 f8a1 	bl	80057dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800569a:	f000 fbc7 	bl	8005e2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800569e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a0:	f000 f8ee 	bl	8005880 <prvIsQueueEmpty>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f43f af6f 	beq.w	800558a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3730      	adds	r7, #48	; 0x30
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10d      	bne.n	80056f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d14d      	bne.n	800577e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 ff92 	bl	8006610 <xTaskPriorityDisinherit>
 80056ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	609a      	str	r2, [r3, #8]
 80056f4:	e043      	b.n	800577e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d119      	bne.n	8005730 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6858      	ldr	r0, [r3, #4]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	461a      	mov	r2, r3
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	f001 fff2 	bl	80076f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	441a      	add	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	d32b      	bcc.n	800577e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
 800572e:	e026      	b.n	800577e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68d8      	ldr	r0, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	461a      	mov	r2, r3
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	f001 ffd8 	bl	80076f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	425b      	negs	r3, r3
 800574a:	441a      	add	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	429a      	cmp	r2, r3
 800575a:	d207      	bcs.n	800576c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	425b      	negs	r3, r3
 8005766:	441a      	add	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d105      	bne.n	800577e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	3b01      	subs	r3, #1
 800577c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005786:	697b      	ldr	r3, [r7, #20]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d018      	beq.n	80057d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	441a      	add	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d303      	bcc.n	80057c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68d9      	ldr	r1, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	461a      	mov	r2, r3
 80057ce:	6838      	ldr	r0, [r7, #0]
 80057d0:	f001 ff8e 	bl	80076f0 <memcpy>
	}
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057e4:	f001 fc4e 	bl	8007084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057f0:	e011      	b.n	8005816 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d012      	beq.n	8005820 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3324      	adds	r3, #36	; 0x24
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fd2a 	bl	8006258 <xTaskRemoveFromEventList>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800580a:	f000 fe01 	bl	8006410 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	3b01      	subs	r3, #1
 8005812:	b2db      	uxtb	r3, r3
 8005814:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800581a:	2b00      	cmp	r3, #0
 800581c:	dce9      	bgt.n	80057f2 <prvUnlockQueue+0x16>
 800581e:	e000      	b.n	8005822 <prvUnlockQueue+0x46>
					break;
 8005820:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800582a:	f001 fc5b 	bl	80070e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800582e:	f001 fc29 	bl	8007084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005838:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800583a:	e011      	b.n	8005860 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d012      	beq.n	800586a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3310      	adds	r3, #16
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fd05 	bl	8006258 <xTaskRemoveFromEventList>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005854:	f000 fddc 	bl	8006410 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	3b01      	subs	r3, #1
 800585c:	b2db      	uxtb	r3, r3
 800585e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005864:	2b00      	cmp	r3, #0
 8005866:	dce9      	bgt.n	800583c <prvUnlockQueue+0x60>
 8005868:	e000      	b.n	800586c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800586a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	22ff      	movs	r2, #255	; 0xff
 8005870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005874:	f001 fc36 	bl	80070e4 <vPortExitCritical>
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005888:	f001 fbfc 	bl	8007084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e001      	b.n	800589e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800589e:	f001 fc21 	bl	80070e4 <vPortExitCritical>

	return xReturn;
 80058a2:	68fb      	ldr	r3, [r7, #12]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058b4:	f001 fbe6 	bl	8007084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d102      	bne.n	80058ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058c4:	2301      	movs	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e001      	b.n	80058ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ce:	f001 fc09 	bl	80070e4 <vPortExitCritical>

	return xReturn;
 80058d2:	68fb      	ldr	r3, [r7, #12]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e014      	b.n	8005916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058ec:	4a0f      	ldr	r2, [pc, #60]	; (800592c <vQueueAddToRegistry+0x50>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058f8:	490c      	ldr	r1, [pc, #48]	; (800592c <vQueueAddToRegistry+0x50>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005902:	4a0a      	ldr	r2, [pc, #40]	; (800592c <vQueueAddToRegistry+0x50>)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4413      	add	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800590e:	e006      	b.n	800591e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3301      	adds	r3, #1
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b07      	cmp	r3, #7
 800591a:	d9e7      	bls.n	80058ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20004cd8 	.word	0x20004cd8

08005930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005940:	f001 fba0 	bl	8007084 <vPortEnterCritical>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800594a:	b25b      	sxtb	r3, r3
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d103      	bne.n	800595a <vQueueWaitForMessageRestricted+0x2a>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005960:	b25b      	sxtb	r3, r3
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d103      	bne.n	8005970 <vQueueWaitForMessageRestricted+0x40>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005970:	f001 fbb8 	bl	80070e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3324      	adds	r3, #36	; 0x24
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fc3b 	bl	8006200 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800598a:	6978      	ldr	r0, [r7, #20]
 800598c:	f7ff ff26 	bl	80057dc <prvUnlockQueue>
	}
 8005990:	bf00      	nop
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08e      	sub	sp, #56	; 0x38
 800599c:	af04      	add	r7, sp, #16
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	623b      	str	r3, [r7, #32]
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xTaskCreateStatic+0x46>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	61fb      	str	r3, [r7, #28]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059de:	235c      	movs	r3, #92	; 0x5c
 80059e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b5c      	cmp	r3, #92	; 0x5c
 80059e6:	d00a      	beq.n	80059fe <xTaskCreateStatic+0x66>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	61bb      	str	r3, [r7, #24]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01e      	beq.n	8005a44 <xTaskCreateStatic+0xac>
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01b      	beq.n	8005a44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9303      	str	r3, [sp, #12]
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	9302      	str	r3, [sp, #8]
 8005a26:	f107 0314 	add.w	r3, r7, #20
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f850 	bl	8005adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a3e:	f000 f8dd 	bl	8005bfc <prvAddNewTaskToReadyList>
 8005a42:	e001      	b.n	8005a48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a48:	697b      	ldr	r3, [r7, #20]
	}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3728      	adds	r7, #40	; 0x28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b08c      	sub	sp, #48	; 0x30
 8005a56:	af04      	add	r7, sp, #16
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 fc2e 	bl	80072c8 <pvPortMalloc>
 8005a6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00e      	beq.n	8005a92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a74:	205c      	movs	r0, #92	; 0x5c
 8005a76:	f001 fc27 	bl	80072c8 <pvPortMalloc>
 8005a7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
 8005a88:	e005      	b.n	8005a96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a8a:	6978      	ldr	r0, [r7, #20]
 8005a8c:	f001 fce8 	bl	8007460 <vPortFree>
 8005a90:	e001      	b.n	8005a96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d017      	beq.n	8005acc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aa4:	88fa      	ldrh	r2, [r7, #6]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9303      	str	r3, [sp, #12]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	9302      	str	r3, [sp, #8]
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f80e 	bl	8005adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ac0:	69f8      	ldr	r0, [r7, #28]
 8005ac2:	f000 f89b 	bl	8005bfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e002      	b.n	8005ad2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	461a      	mov	r2, r3
 8005af4:	21a5      	movs	r1, #165	; 0xa5
 8005af6:	f001 fe09 	bl	800770c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b04:	3b01      	subs	r3, #1
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f023 0307 	bic.w	r3, r3, #7
 8005b12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	617b      	str	r3, [r7, #20]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d01f      	beq.n	8005b7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	e012      	b.n	8005b66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	7819      	ldrb	r1, [r3, #0]
 8005b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3334      	adds	r3, #52	; 0x34
 8005b50:	460a      	mov	r2, r1
 8005b52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d006      	beq.n	8005b6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	3301      	adds	r3, #1
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	2b0f      	cmp	r3, #15
 8005b6a:	d9e9      	bls.n	8005b40 <prvInitialiseNewTask+0x64>
 8005b6c:	e000      	b.n	8005b70 <prvInitialiseNewTask+0x94>
			{
				break;
 8005b6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b78:	e003      	b.n	8005b82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	2b37      	cmp	r3, #55	; 0x37
 8005b86:	d901      	bls.n	8005b8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b88:	2337      	movs	r3, #55	; 0x37
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff f978 	bl	8004e98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	3318      	adds	r3, #24
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff f973 	bl	8004e98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	2200      	movs	r2, #0
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	68f9      	ldr	r1, [r7, #12]
 8005bda:	69b8      	ldr	r0, [r7, #24]
 8005bdc:	f001 f928 	bl	8006e30 <pxPortInitialiseStack>
 8005be0:	4602      	mov	r2, r0
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf2:	bf00      	nop
 8005bf4:	3720      	adds	r7, #32
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c04:	f001 fa3e 	bl	8007084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c08:	4b2d      	ldr	r3, [pc, #180]	; (8005cc0 <prvAddNewTaskToReadyList+0xc4>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	4a2c      	ldr	r2, [pc, #176]	; (8005cc0 <prvAddNewTaskToReadyList+0xc4>)
 8005c10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c12:	4b2c      	ldr	r3, [pc, #176]	; (8005cc4 <prvAddNewTaskToReadyList+0xc8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c1a:	4a2a      	ldr	r2, [pc, #168]	; (8005cc4 <prvAddNewTaskToReadyList+0xc8>)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c20:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <prvAddNewTaskToReadyList+0xc4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d110      	bne.n	8005c4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c28:	f000 fc16 	bl	8006458 <prvInitialiseTaskLists>
 8005c2c:	e00d      	b.n	8005c4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c2e:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <prvAddNewTaskToReadyList+0xcc>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c36:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <prvAddNewTaskToReadyList+0xc8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d802      	bhi.n	8005c4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c44:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <prvAddNewTaskToReadyList+0xc8>)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c4a:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <prvAddNewTaskToReadyList+0xd0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <prvAddNewTaskToReadyList+0xd0>)
 8005c52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c54:	4b1d      	ldr	r3, [pc, #116]	; (8005ccc <prvAddNewTaskToReadyList+0xd0>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c60:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <prvAddNewTaskToReadyList+0xd4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d903      	bls.n	8005c70 <prvAddNewTaskToReadyList+0x74>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <prvAddNewTaskToReadyList+0xd4>)
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <prvAddNewTaskToReadyList+0xd8>)
 8005c7e:	441a      	add	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3304      	adds	r3, #4
 8005c84:	4619      	mov	r1, r3
 8005c86:	4610      	mov	r0, r2
 8005c88:	f7ff f913 	bl	8004eb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c8c:	f001 fa2a 	bl	80070e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c90:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <prvAddNewTaskToReadyList+0xcc>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00e      	beq.n	8005cb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <prvAddNewTaskToReadyList+0xc8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d207      	bcs.n	8005cb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <prvAddNewTaskToReadyList+0xdc>)
 8005ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000c24 	.word	0x20000c24
 8005cc4:	20000750 	.word	0x20000750
 8005cc8:	20000c30 	.word	0x20000c30
 8005ccc:	20000c40 	.word	0x20000c40
 8005cd0:	20000c2c 	.word	0x20000c2c
 8005cd4:	20000754 	.word	0x20000754
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d017      	beq.n	8005d1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cee:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <vTaskDelay+0x60>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <vTaskDelay+0x30>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	60bb      	str	r3, [r7, #8]
}
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d0c:	f000 f880 	bl	8005e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d10:	2100      	movs	r1, #0
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fcea 	bl	80066ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d18:	f000 f888 	bl	8005e2c <xTaskResumeAll>
 8005d1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d107      	bne.n	8005d34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d24:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <vTaskDelay+0x64>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000c4c 	.word	0x20000c4c
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	; 0x28
 8005d48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d52:	463a      	mov	r2, r7
 8005d54:	1d39      	adds	r1, r7, #4
 8005d56:	f107 0308 	add.w	r3, r7, #8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff f848 	bl	8004df0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	9202      	str	r2, [sp, #8]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	460a      	mov	r2, r1
 8005d72:	4921      	ldr	r1, [pc, #132]	; (8005df8 <vTaskStartScheduler+0xb4>)
 8005d74:	4821      	ldr	r0, [pc, #132]	; (8005dfc <vTaskStartScheduler+0xb8>)
 8005d76:	f7ff fe0f 	bl	8005998 <xTaskCreateStatic>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <vTaskStartScheduler+0xbc>)
 8005d7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d80:	4b1f      	ldr	r3, [pc, #124]	; (8005e00 <vTaskStartScheduler+0xbc>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	e001      	b.n	8005d92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d102      	bne.n	8005d9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d98:	f000 fcfc 	bl	8006794 <xTimerCreateTimerTask>
 8005d9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d116      	bne.n	8005dd2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	613b      	str	r3, [r7, #16]
}
 8005db6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005db8:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <vTaskStartScheduler+0xc0>)
 8005dba:	f04f 32ff 	mov.w	r2, #4294967295
 8005dbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dc0:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <vTaskStartScheduler+0xc4>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dc6:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <vTaskStartScheduler+0xc8>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dcc:	f001 f8b8 	bl	8006f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dd0:	e00e      	b.n	8005df0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d10a      	bne.n	8005df0 <vTaskStartScheduler+0xac>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	60fb      	str	r3, [r7, #12]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <vTaskStartScheduler+0xaa>
}
 8005df0:	bf00      	nop
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	08008858 	.word	0x08008858
 8005dfc:	08006429 	.word	0x08006429
 8005e00:	20000c48 	.word	0x20000c48
 8005e04:	20000c44 	.word	0x20000c44
 8005e08:	20000c30 	.word	0x20000c30
 8005e0c:	20000c28 	.word	0x20000c28

08005e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e14:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <vTaskSuspendAll+0x18>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	4a03      	ldr	r2, [pc, #12]	; (8005e28 <vTaskSuspendAll+0x18>)
 8005e1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e1e:	bf00      	nop
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	20000c4c 	.word	0x20000c4c

08005e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e3a:	4b42      	ldr	r3, [pc, #264]	; (8005f44 <xTaskResumeAll+0x118>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	603b      	str	r3, [r7, #0]
}
 8005e54:	bf00      	nop
 8005e56:	e7fe      	b.n	8005e56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e58:	f001 f914 	bl	8007084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e5c:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <xTaskResumeAll+0x118>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	4a38      	ldr	r2, [pc, #224]	; (8005f44 <xTaskResumeAll+0x118>)
 8005e64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e66:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <xTaskResumeAll+0x118>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d162      	bne.n	8005f34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e6e:	4b36      	ldr	r3, [pc, #216]	; (8005f48 <xTaskResumeAll+0x11c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d05e      	beq.n	8005f34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e76:	e02f      	b.n	8005ed8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <xTaskResumeAll+0x120>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3318      	adds	r3, #24
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff f871 	bl	8004f6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff f86c 	bl	8004f6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <xTaskResumeAll+0x124>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d903      	bls.n	8005ea8 <xTaskResumeAll+0x7c>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <xTaskResumeAll+0x124>)
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <xTaskResumeAll+0x128>)
 8005eb6:	441a      	add	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f7fe fff7 	bl	8004eb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <xTaskResumeAll+0x12c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005ed2:	4b22      	ldr	r3, [pc, #136]	; (8005f5c <xTaskResumeAll+0x130>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ed8:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <xTaskResumeAll+0x120>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1cb      	bne.n	8005e78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ee6:	f000 fb55 	bl	8006594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005eea:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <xTaskResumeAll+0x134>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d010      	beq.n	8005f18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ef6:	f000 f847 	bl	8005f88 <xTaskIncrementTick>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005f00:	4b16      	ldr	r3, [pc, #88]	; (8005f5c <xTaskResumeAll+0x130>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f1      	bne.n	8005ef6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005f12:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <xTaskResumeAll+0x134>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f18:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <xTaskResumeAll+0x130>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f20:	2301      	movs	r3, #1
 8005f22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <xTaskResumeAll+0x138>)
 8005f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f34:	f001 f8d6 	bl	80070e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f38:	68bb      	ldr	r3, [r7, #8]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000c4c 	.word	0x20000c4c
 8005f48:	20000c24 	.word	0x20000c24
 8005f4c:	20000be4 	.word	0x20000be4
 8005f50:	20000c2c 	.word	0x20000c2c
 8005f54:	20000754 	.word	0x20000754
 8005f58:	20000750 	.word	0x20000750
 8005f5c:	20000c38 	.word	0x20000c38
 8005f60:	20000c34 	.word	0x20000c34
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <xTaskGetTickCount+0x1c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f74:	687b      	ldr	r3, [r7, #4]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000c28 	.word	0x20000c28

08005f88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f92:	4b4f      	ldr	r3, [pc, #316]	; (80060d0 <xTaskIncrementTick+0x148>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 808f 	bne.w	80060ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f9c:	4b4d      	ldr	r3, [pc, #308]	; (80060d4 <xTaskIncrementTick+0x14c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fa4:	4a4b      	ldr	r2, [pc, #300]	; (80060d4 <xTaskIncrementTick+0x14c>)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d120      	bne.n	8005ff2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fb0:	4b49      	ldr	r3, [pc, #292]	; (80060d8 <xTaskIncrementTick+0x150>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	603b      	str	r3, [r7, #0]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xTaskIncrementTick+0x46>
 8005fd0:	4b41      	ldr	r3, [pc, #260]	; (80060d8 <xTaskIncrementTick+0x150>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	4b41      	ldr	r3, [pc, #260]	; (80060dc <xTaskIncrementTick+0x154>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a3f      	ldr	r2, [pc, #252]	; (80060d8 <xTaskIncrementTick+0x150>)
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	4a3f      	ldr	r2, [pc, #252]	; (80060dc <xTaskIncrementTick+0x154>)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4b3e      	ldr	r3, [pc, #248]	; (80060e0 <xTaskIncrementTick+0x158>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	4a3d      	ldr	r2, [pc, #244]	; (80060e0 <xTaskIncrementTick+0x158>)
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	f000 fad1 	bl	8006594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ff2:	4b3c      	ldr	r3, [pc, #240]	; (80060e4 <xTaskIncrementTick+0x15c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d349      	bcc.n	8006090 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ffc:	4b36      	ldr	r3, [pc, #216]	; (80060d8 <xTaskIncrementTick+0x150>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006006:	4b37      	ldr	r3, [pc, #220]	; (80060e4 <xTaskIncrementTick+0x15c>)
 8006008:	f04f 32ff 	mov.w	r2, #4294967295
 800600c:	601a      	str	r2, [r3, #0]
					break;
 800600e:	e03f      	b.n	8006090 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006010:	4b31      	ldr	r3, [pc, #196]	; (80060d8 <xTaskIncrementTick+0x150>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	429a      	cmp	r2, r3
 8006026:	d203      	bcs.n	8006030 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006028:	4a2e      	ldr	r2, [pc, #184]	; (80060e4 <xTaskIncrementTick+0x15c>)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800602e:	e02f      	b.n	8006090 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	3304      	adds	r3, #4
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe ff99 	bl	8004f6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d004      	beq.n	800604c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	3318      	adds	r3, #24
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe ff90 	bl	8004f6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	4b25      	ldr	r3, [pc, #148]	; (80060e8 <xTaskIncrementTick+0x160>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d903      	bls.n	8006060 <xTaskIncrementTick+0xd8>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <xTaskIncrementTick+0x160>)
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <xTaskIncrementTick+0x164>)
 800606e:	441a      	add	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f7fe ff1b 	bl	8004eb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <xTaskIncrementTick+0x168>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006086:	429a      	cmp	r2, r3
 8006088:	d3b8      	bcc.n	8005ffc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800608a:	2301      	movs	r3, #1
 800608c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800608e:	e7b5      	b.n	8005ffc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006090:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <xTaskIncrementTick+0x168>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006096:	4915      	ldr	r1, [pc, #84]	; (80060ec <xTaskIncrementTick+0x164>)
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d901      	bls.n	80060ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80060a8:	2301      	movs	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060ac:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <xTaskIncrementTick+0x16c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	e004      	b.n	80060c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060ba:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <xTaskIncrementTick+0x170>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3301      	adds	r3, #1
 80060c0:	4a0d      	ldr	r2, [pc, #52]	; (80060f8 <xTaskIncrementTick+0x170>)
 80060c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060c4:	697b      	ldr	r3, [r7, #20]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000c4c 	.word	0x20000c4c
 80060d4:	20000c28 	.word	0x20000c28
 80060d8:	20000bdc 	.word	0x20000bdc
 80060dc:	20000be0 	.word	0x20000be0
 80060e0:	20000c3c 	.word	0x20000c3c
 80060e4:	20000c44 	.word	0x20000c44
 80060e8:	20000c2c 	.word	0x20000c2c
 80060ec:	20000754 	.word	0x20000754
 80060f0:	20000750 	.word	0x20000750
 80060f4:	20000c38 	.word	0x20000c38
 80060f8:	20000c34 	.word	0x20000c34

080060fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006102:	4b28      	ldr	r3, [pc, #160]	; (80061a4 <vTaskSwitchContext+0xa8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800610a:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <vTaskSwitchContext+0xac>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006110:	e041      	b.n	8006196 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006112:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <vTaskSwitchContext+0xac>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006118:	4b24      	ldr	r3, [pc, #144]	; (80061ac <vTaskSwitchContext+0xb0>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e010      	b.n	8006142 <vTaskSwitchContext+0x46>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <vTaskSwitchContext+0x40>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	607b      	str	r3, [r7, #4]
}
 8006138:	bf00      	nop
 800613a:	e7fe      	b.n	800613a <vTaskSwitchContext+0x3e>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3b01      	subs	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	491b      	ldr	r1, [pc, #108]	; (80061b0 <vTaskSwitchContext+0xb4>)
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0e4      	beq.n	8006120 <vTaskSwitchContext+0x24>
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <vTaskSwitchContext+0xb4>)
 8006162:	4413      	add	r3, r2
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	605a      	str	r2, [r3, #4]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	3308      	adds	r3, #8
 8006178:	429a      	cmp	r2, r3
 800617a:	d104      	bne.n	8006186 <vTaskSwitchContext+0x8a>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <vTaskSwitchContext+0xb8>)
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	4a06      	ldr	r2, [pc, #24]	; (80061ac <vTaskSwitchContext+0xb0>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6013      	str	r3, [r2, #0]
}
 8006196:	bf00      	nop
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000c4c 	.word	0x20000c4c
 80061a8:	20000c38 	.word	0x20000c38
 80061ac:	20000c2c 	.word	0x20000c2c
 80061b0:	20000754 	.word	0x20000754
 80061b4:	20000750 	.word	0x20000750

080061b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60fb      	str	r3, [r7, #12]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <vTaskPlaceOnEventList+0x44>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3318      	adds	r3, #24
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fe fe87 	bl	8004efa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061ec:	2101      	movs	r1, #1
 80061ee:	6838      	ldr	r0, [r7, #0]
 80061f0:	f000 fa7c 	bl	80066ec <prvAddCurrentTaskToDelayedList>
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20000750 	.word	0x20000750

08006200 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006216:	f383 8811 	msr	BASEPRI, r3
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	617b      	str	r3, [r7, #20]
}
 8006224:	bf00      	nop
 8006226:	e7fe      	b.n	8006226 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <vTaskPlaceOnEventListRestricted+0x54>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3318      	adds	r3, #24
 800622e:	4619      	mov	r1, r3
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7fe fe3e 	bl	8004eb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800623c:	f04f 33ff 	mov.w	r3, #4294967295
 8006240:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	68b8      	ldr	r0, [r7, #8]
 8006246:	f000 fa51 	bl	80066ec <prvAddCurrentTaskToDelayedList>
	}
 800624a:	bf00      	nop
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000750 	.word	0x20000750

08006258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	60fb      	str	r3, [r7, #12]
}
 8006280:	bf00      	nop
 8006282:	e7fe      	b.n	8006282 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	3318      	adds	r3, #24
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe fe6f 	bl	8004f6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800628e:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <xTaskRemoveFromEventList+0xb0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d11d      	bne.n	80062d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	3304      	adds	r3, #4
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe fe66 	bl	8004f6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	4b19      	ldr	r3, [pc, #100]	; (800630c <xTaskRemoveFromEventList+0xb4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d903      	bls.n	80062b4 <xTaskRemoveFromEventList+0x5c>
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	4a16      	ldr	r2, [pc, #88]	; (800630c <xTaskRemoveFromEventList+0xb4>)
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4a13      	ldr	r2, [pc, #76]	; (8006310 <xTaskRemoveFromEventList+0xb8>)
 80062c2:	441a      	add	r2, r3
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4619      	mov	r1, r3
 80062ca:	4610      	mov	r0, r2
 80062cc:	f7fe fdf1 	bl	8004eb2 <vListInsertEnd>
 80062d0:	e005      	b.n	80062de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	3318      	adds	r3, #24
 80062d6:	4619      	mov	r1, r3
 80062d8:	480e      	ldr	r0, [pc, #56]	; (8006314 <xTaskRemoveFromEventList+0xbc>)
 80062da:	f7fe fdea 	bl	8004eb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <xTaskRemoveFromEventList+0xc0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d905      	bls.n	80062f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062ec:	2301      	movs	r3, #1
 80062ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062f0:	4b0a      	ldr	r3, [pc, #40]	; (800631c <xTaskRemoveFromEventList+0xc4>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e001      	b.n	80062fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062fc:	697b      	ldr	r3, [r7, #20]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000c4c 	.word	0x20000c4c
 800630c:	20000c2c 	.word	0x20000c2c
 8006310:	20000754 	.word	0x20000754
 8006314:	20000be4 	.word	0x20000be4
 8006318:	20000750 	.word	0x20000750
 800631c:	20000c38 	.word	0x20000c38

08006320 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <vTaskInternalSetTimeOutState+0x24>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <vTaskInternalSetTimeOutState+0x28>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	605a      	str	r2, [r3, #4]
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	20000c3c 	.word	0x20000c3c
 8006348:	20000c28 	.word	0x20000c28

0800634c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	613b      	str	r3, [r7, #16]
}
 800636e:	bf00      	nop
 8006370:	e7fe      	b.n	8006370 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	60fb      	str	r3, [r7, #12]
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800638e:	f000 fe79 	bl	8007084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006392:	4b1d      	ldr	r3, [pc, #116]	; (8006408 <xTaskCheckForTimeOut+0xbc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d102      	bne.n	80063b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	e023      	b.n	80063fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4b15      	ldr	r3, [pc, #84]	; (800640c <xTaskCheckForTimeOut+0xc0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d007      	beq.n	80063ce <xTaskCheckForTimeOut+0x82>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d302      	bcc.n	80063ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	e015      	b.n	80063fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d20b      	bcs.n	80063f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1ad2      	subs	r2, r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff ff9b 	bl	8006320 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	e004      	b.n	80063fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063f6:	2301      	movs	r3, #1
 80063f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063fa:	f000 fe73 	bl	80070e4 <vPortExitCritical>

	return xReturn;
 80063fe:	69fb      	ldr	r3, [r7, #28]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000c28 	.word	0x20000c28
 800640c:	20000c3c 	.word	0x20000c3c

08006410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <vTaskMissedYield+0x14>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
}
 800641a:	bf00      	nop
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	20000c38 	.word	0x20000c38

08006428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006430:	f000 f852 	bl	80064d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <prvIdleTask+0x28>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d9f9      	bls.n	8006430 <prvIdleTask+0x8>
			{
				taskYIELD();
 800643c:	4b05      	ldr	r3, [pc, #20]	; (8006454 <prvIdleTask+0x2c>)
 800643e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800644c:	e7f0      	b.n	8006430 <prvIdleTask+0x8>
 800644e:	bf00      	nop
 8006450:	20000754 	.word	0x20000754
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800645e:	2300      	movs	r3, #0
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	e00c      	b.n	800647e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <prvInitialiseTaskLists+0x60>)
 8006470:	4413      	add	r3, r2
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe fcf0 	bl	8004e58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3301      	adds	r3, #1
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b37      	cmp	r3, #55	; 0x37
 8006482:	d9ef      	bls.n	8006464 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006484:	480d      	ldr	r0, [pc, #52]	; (80064bc <prvInitialiseTaskLists+0x64>)
 8006486:	f7fe fce7 	bl	8004e58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800648a:	480d      	ldr	r0, [pc, #52]	; (80064c0 <prvInitialiseTaskLists+0x68>)
 800648c:	f7fe fce4 	bl	8004e58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006490:	480c      	ldr	r0, [pc, #48]	; (80064c4 <prvInitialiseTaskLists+0x6c>)
 8006492:	f7fe fce1 	bl	8004e58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006496:	480c      	ldr	r0, [pc, #48]	; (80064c8 <prvInitialiseTaskLists+0x70>)
 8006498:	f7fe fcde 	bl	8004e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800649c:	480b      	ldr	r0, [pc, #44]	; (80064cc <prvInitialiseTaskLists+0x74>)
 800649e:	f7fe fcdb 	bl	8004e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <prvInitialiseTaskLists+0x78>)
 80064a4:	4a05      	ldr	r2, [pc, #20]	; (80064bc <prvInitialiseTaskLists+0x64>)
 80064a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064a8:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <prvInitialiseTaskLists+0x7c>)
 80064aa:	4a05      	ldr	r2, [pc, #20]	; (80064c0 <prvInitialiseTaskLists+0x68>)
 80064ac:	601a      	str	r2, [r3, #0]
}
 80064ae:	bf00      	nop
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000754 	.word	0x20000754
 80064bc:	20000bb4 	.word	0x20000bb4
 80064c0:	20000bc8 	.word	0x20000bc8
 80064c4:	20000be4 	.word	0x20000be4
 80064c8:	20000bf8 	.word	0x20000bf8
 80064cc:	20000c10 	.word	0x20000c10
 80064d0:	20000bdc 	.word	0x20000bdc
 80064d4:	20000be0 	.word	0x20000be0

080064d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064de:	e019      	b.n	8006514 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064e0:	f000 fdd0 	bl	8007084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e4:	4b10      	ldr	r3, [pc, #64]	; (8006528 <prvCheckTasksWaitingTermination+0x50>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe fd3b 	bl	8004f6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064f6:	4b0d      	ldr	r3, [pc, #52]	; (800652c <prvCheckTasksWaitingTermination+0x54>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	4a0b      	ldr	r2, [pc, #44]	; (800652c <prvCheckTasksWaitingTermination+0x54>)
 80064fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <prvCheckTasksWaitingTermination+0x58>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3b01      	subs	r3, #1
 8006506:	4a0a      	ldr	r2, [pc, #40]	; (8006530 <prvCheckTasksWaitingTermination+0x58>)
 8006508:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800650a:	f000 fdeb 	bl	80070e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f810 	bl	8006534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <prvCheckTasksWaitingTermination+0x58>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e1      	bne.n	80064e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000bf8 	.word	0x20000bf8
 800652c:	20000c24 	.word	0x20000c24
 8006530:	20000c0c 	.word	0x20000c0c

08006534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006542:	2b00      	cmp	r3, #0
 8006544:	d108      	bne.n	8006558 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	4618      	mov	r0, r3
 800654c:	f000 ff88 	bl	8007460 <vPortFree>
				vPortFree( pxTCB );
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 ff85 	bl	8007460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006556:	e018      	b.n	800658a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800655e:	2b01      	cmp	r3, #1
 8006560:	d103      	bne.n	800656a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 ff7c 	bl	8007460 <vPortFree>
	}
 8006568:	e00f      	b.n	800658a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006570:	2b02      	cmp	r3, #2
 8006572:	d00a      	beq.n	800658a <prvDeleteTCB+0x56>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <prvDeleteTCB+0x54>
	}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <prvResetNextTaskUnblockTime+0x38>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvResetNextTaskUnblockTime+0x3c>)
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065ac:	e008      	b.n	80065c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <prvResetNextTaskUnblockTime+0x38>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <prvResetNextTaskUnblockTime+0x3c>)
 80065be:	6013      	str	r3, [r2, #0]
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	20000bdc 	.word	0x20000bdc
 80065d0:	20000c44 	.word	0x20000c44

080065d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065da:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <xTaskGetSchedulerState+0x34>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065e2:	2301      	movs	r3, #1
 80065e4:	607b      	str	r3, [r7, #4]
 80065e6:	e008      	b.n	80065fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065e8:	4b08      	ldr	r3, [pc, #32]	; (800660c <xTaskGetSchedulerState+0x38>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065f0:	2302      	movs	r3, #2
 80065f2:	607b      	str	r3, [r7, #4]
 80065f4:	e001      	b.n	80065fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065f6:	2300      	movs	r3, #0
 80065f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065fa:	687b      	ldr	r3, [r7, #4]
	}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	20000c30 	.word	0x20000c30
 800660c:	20000c4c 	.word	0x20000c4c

08006610 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d056      	beq.n	80066d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006626:	4b2e      	ldr	r3, [pc, #184]	; (80066e0 <xTaskPriorityDisinherit+0xd0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	429a      	cmp	r2, r3
 800662e:	d00a      	beq.n	8006646 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	60bb      	str	r3, [r7, #8]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006668:	1e5a      	subs	r2, r3, #1
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006676:	429a      	cmp	r2, r3
 8006678:	d02c      	beq.n	80066d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667e:	2b00      	cmp	r3, #0
 8006680:	d128      	bne.n	80066d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	3304      	adds	r3, #4
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fc70 	bl	8004f6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	4b0f      	ldr	r3, [pc, #60]	; (80066e4 <xTaskPriorityDisinherit+0xd4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d903      	bls.n	80066b4 <xTaskPriorityDisinherit+0xa4>
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	4a0c      	ldr	r2, [pc, #48]	; (80066e4 <xTaskPriorityDisinherit+0xd4>)
 80066b2:	6013      	str	r3, [r2, #0]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4a09      	ldr	r2, [pc, #36]	; (80066e8 <xTaskPriorityDisinherit+0xd8>)
 80066c2:	441a      	add	r2, r3
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f7fe fbf1 	bl	8004eb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066d0:	2301      	movs	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066d4:	697b      	ldr	r3, [r7, #20]
	}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000750 	.word	0x20000750
 80066e4:	20000c2c 	.word	0x20000c2c
 80066e8:	20000754 	.word	0x20000754

080066ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066f6:	4b21      	ldr	r3, [pc, #132]	; (800677c <prvAddCurrentTaskToDelayedList+0x90>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <prvAddCurrentTaskToDelayedList+0x94>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3304      	adds	r3, #4
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fc32 	bl	8004f6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670e:	d10a      	bne.n	8006726 <prvAddCurrentTaskToDelayedList+0x3a>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006716:	4b1a      	ldr	r3, [pc, #104]	; (8006780 <prvAddCurrentTaskToDelayedList+0x94>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3304      	adds	r3, #4
 800671c:	4619      	mov	r1, r3
 800671e:	4819      	ldr	r0, [pc, #100]	; (8006784 <prvAddCurrentTaskToDelayedList+0x98>)
 8006720:	f7fe fbc7 	bl	8004eb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006724:	e026      	b.n	8006774 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4413      	add	r3, r2
 800672c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800672e:	4b14      	ldr	r3, [pc, #80]	; (8006780 <prvAddCurrentTaskToDelayedList+0x94>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	429a      	cmp	r2, r3
 800673c:	d209      	bcs.n	8006752 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800673e:	4b12      	ldr	r3, [pc, #72]	; (8006788 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <prvAddCurrentTaskToDelayedList+0x94>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3304      	adds	r3, #4
 8006748:	4619      	mov	r1, r3
 800674a:	4610      	mov	r0, r2
 800674c:	f7fe fbd5 	bl	8004efa <vListInsert>
}
 8006750:	e010      	b.n	8006774 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006752:	4b0e      	ldr	r3, [pc, #56]	; (800678c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <prvAddCurrentTaskToDelayedList+0x94>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3304      	adds	r3, #4
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f7fe fbcb 	bl	8004efa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	429a      	cmp	r2, r3
 800676c:	d202      	bcs.n	8006774 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800676e:	4a08      	ldr	r2, [pc, #32]	; (8006790 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6013      	str	r3, [r2, #0]
}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20000c28 	.word	0x20000c28
 8006780:	20000750 	.word	0x20000750
 8006784:	20000c10 	.word	0x20000c10
 8006788:	20000be0 	.word	0x20000be0
 800678c:	20000bdc 	.word	0x20000bdc
 8006790:	20000c44 	.word	0x20000c44

08006794 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	; 0x28
 8006798:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800679e:	f000 fb07 	bl	8006db0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067a2:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <xTimerCreateTimerTask+0x80>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d021      	beq.n	80067ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067b2:	1d3a      	adds	r2, r7, #4
 80067b4:	f107 0108 	add.w	r1, r7, #8
 80067b8:	f107 030c 	add.w	r3, r7, #12
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe fb31 	bl	8004e24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	9202      	str	r2, [sp, #8]
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	2302      	movs	r3, #2
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	2300      	movs	r3, #0
 80067d2:	460a      	mov	r2, r1
 80067d4:	4910      	ldr	r1, [pc, #64]	; (8006818 <xTimerCreateTimerTask+0x84>)
 80067d6:	4811      	ldr	r0, [pc, #68]	; (800681c <xTimerCreateTimerTask+0x88>)
 80067d8:	f7ff f8de 	bl	8005998 <xTaskCreateStatic>
 80067dc:	4603      	mov	r3, r0
 80067de:	4a10      	ldr	r2, [pc, #64]	; (8006820 <xTimerCreateTimerTask+0x8c>)
 80067e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80067e2:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <xTimerCreateTimerTask+0x8c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80067ea:	2301      	movs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	613b      	str	r3, [r7, #16]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800680a:	697b      	ldr	r3, [r7, #20]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20000c80 	.word	0x20000c80
 8006818:	08008860 	.word	0x08008860
 800681c:	08006959 	.word	0x08006959
 8006820:	20000c84 	.word	0x20000c84

08006824 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	; 0x28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006832:	2300      	movs	r3, #0
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <xTimerGenericCommand+0x2e>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	623b      	str	r3, [r7, #32]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006852:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <xTimerGenericCommand+0x98>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d02a      	beq.n	80068b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b05      	cmp	r3, #5
 800686a:	dc18      	bgt.n	800689e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800686c:	f7ff feb2 	bl	80065d4 <xTaskGetSchedulerState>
 8006870:	4603      	mov	r3, r0
 8006872:	2b02      	cmp	r3, #2
 8006874:	d109      	bne.n	800688a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <xTimerGenericCommand+0x98>)
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	f107 0110 	add.w	r1, r7, #16
 800687e:	2300      	movs	r3, #0
 8006880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006882:	f7fe fca1 	bl	80051c8 <xQueueGenericSend>
 8006886:	6278      	str	r0, [r7, #36]	; 0x24
 8006888:	e012      	b.n	80068b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <xTimerGenericCommand+0x98>)
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	f107 0110 	add.w	r1, r7, #16
 8006892:	2300      	movs	r3, #0
 8006894:	2200      	movs	r2, #0
 8006896:	f7fe fc97 	bl	80051c8 <xQueueGenericSend>
 800689a:	6278      	str	r0, [r7, #36]	; 0x24
 800689c:	e008      	b.n	80068b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800689e:	4b07      	ldr	r3, [pc, #28]	; (80068bc <xTimerGenericCommand+0x98>)
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	f107 0110 	add.w	r1, r7, #16
 80068a6:	2300      	movs	r3, #0
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	f7fe fd8b 	bl	80053c4 <xQueueGenericSendFromISR>
 80068ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3728      	adds	r7, #40	; 0x28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20000c80 	.word	0x20000c80

080068c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ca:	4b22      	ldr	r3, [pc, #136]	; (8006954 <prvProcessExpiredTimer+0x94>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	3304      	adds	r3, #4
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe fb47 	bl	8004f6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d022      	beq.n	8006932 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	699a      	ldr	r2, [r3, #24]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	18d1      	adds	r1, r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	6978      	ldr	r0, [r7, #20]
 80068fa:	f000 f8d1 	bl	8006aa0 <prvInsertTimerInActiveList>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01f      	beq.n	8006944 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006904:	2300      	movs	r3, #0
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	2300      	movs	r3, #0
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	2100      	movs	r1, #0
 800690e:	6978      	ldr	r0, [r7, #20]
 8006910:	f7ff ff88 	bl	8006824 <xTimerGenericCommand>
 8006914:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d113      	bne.n	8006944 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	60fb      	str	r3, [r7, #12]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	b2da      	uxtb	r2, r3
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	6978      	ldr	r0, [r7, #20]
 800694a:	4798      	blx	r3
}
 800694c:	bf00      	nop
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000c78 	.word	0x20000c78

08006958 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006960:	f107 0308 	add.w	r3, r7, #8
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f857 	bl	8006a18 <prvGetNextExpireTime>
 800696a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4619      	mov	r1, r3
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f803 	bl	800697c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006976:	f000 f8d5 	bl	8006b24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800697a:	e7f1      	b.n	8006960 <prvTimerTask+0x8>

0800697c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006986:	f7ff fa43 	bl	8005e10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800698a:	f107 0308 	add.w	r3, r7, #8
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f866 	bl	8006a60 <prvSampleTimeNow>
 8006994:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d130      	bne.n	80069fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <prvProcessTimerOrBlockTask+0x3c>
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d806      	bhi.n	80069b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069aa:	f7ff fa3f 	bl	8005e2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff ff85 	bl	80068c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069b6:	e024      	b.n	8006a02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d008      	beq.n	80069d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <prvProcessTimerOrBlockTask+0x90>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <prvProcessTimerOrBlockTask+0x50>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <prvProcessTimerOrBlockTask+0x52>
 80069cc:	2300      	movs	r3, #0
 80069ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80069d0:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <prvProcessTimerOrBlockTask+0x94>)
 80069d2:	6818      	ldr	r0, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	4619      	mov	r1, r3
 80069de:	f7fe ffa7 	bl	8005930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80069e2:	f7ff fa23 	bl	8005e2c <xTaskResumeAll>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80069ec:	4b09      	ldr	r3, [pc, #36]	; (8006a14 <prvProcessTimerOrBlockTask+0x98>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	f3bf 8f6f 	isb	sy
}
 80069fc:	e001      	b.n	8006a02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80069fe:	f7ff fa15 	bl	8005e2c <xTaskResumeAll>
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20000c7c 	.word	0x20000c7c
 8006a10:	20000c80 	.word	0x20000c80
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a20:	4b0e      	ldr	r3, [pc, #56]	; (8006a5c <prvGetNextExpireTime+0x44>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <prvGetNextExpireTime+0x16>
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	e000      	b.n	8006a30 <prvGetNextExpireTime+0x18>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a3c:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <prvGetNextExpireTime+0x44>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e001      	b.n	8006a4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000c78 	.word	0x20000c78

08006a60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a68:	f7ff fa7e 	bl	8005f68 <xTaskGetTickCount>
 8006a6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <prvSampleTimeNow+0x3c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d205      	bcs.n	8006a84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a78:	f000 f936 	bl	8006ce8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	e002      	b.n	8006a8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a8a:	4a04      	ldr	r2, [pc, #16]	; (8006a9c <prvSampleTimeNow+0x3c>)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a90:	68fb      	ldr	r3, [r7, #12]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000c88 	.word	0x20000c88

08006aa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d812      	bhi.n	8006aec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	1ad2      	subs	r2, r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d302      	bcc.n	8006ada <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e01b      	b.n	8006b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ada:	4b10      	ldr	r3, [pc, #64]	; (8006b1c <prvInsertTimerInActiveList+0x7c>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f7fe fa08 	bl	8004efa <vListInsert>
 8006aea:	e012      	b.n	8006b12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d206      	bcs.n	8006b02 <prvInsertTimerInActiveList+0x62>
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d302      	bcc.n	8006b02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	e007      	b.n	8006b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b02:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <prvInsertTimerInActiveList+0x80>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f7fe f9f4 	bl	8004efa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b12:	697b      	ldr	r3, [r7, #20]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20000c7c 	.word	0x20000c7c
 8006b20:	20000c78 	.word	0x20000c78

08006b24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08e      	sub	sp, #56	; 0x38
 8006b28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b2a:	e0ca      	b.n	8006cc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	da18      	bge.n	8006b64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b32:	1d3b      	adds	r3, r7, #4
 8006b34:	3304      	adds	r3, #4
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	61fb      	str	r3, [r7, #28]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b5a:	6850      	ldr	r0, [r2, #4]
 8006b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b5e:	6892      	ldr	r2, [r2, #8]
 8006b60:	4611      	mov	r1, r2
 8006b62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f2c0 80aa 	blt.w	8006cc0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe f9f5 	bl	8004f6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b82:	463b      	mov	r3, r7
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff ff6b 	bl	8006a60 <prvSampleTimeNow>
 8006b8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	f200 8097 	bhi.w	8006cc2 <prvProcessReceivedCommands+0x19e>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <prvProcessReceivedCommands+0x78>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bc5 	.word	0x08006bc5
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bc5 	.word	0x08006bc5
 8006ba8:	08006c39 	.word	0x08006c39
 8006bac:	08006c4d 	.word	0x08006c4d
 8006bb0:	08006c97 	.word	0x08006c97
 8006bb4:	08006bc5 	.word	0x08006bc5
 8006bb8:	08006bc5 	.word	0x08006bc5
 8006bbc:	08006c39 	.word	0x08006c39
 8006bc0:	08006c4d 	.word	0x08006c4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	18d1      	adds	r1, r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006be4:	f7ff ff5c 	bl	8006aa0 <prvInsertTimerInActiveList>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d069      	beq.n	8006cc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d05e      	beq.n	8006cc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	441a      	add	r2, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	2300      	movs	r3, #0
 8006c12:	2100      	movs	r1, #0
 8006c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c16:	f7ff fe05 	bl	8006824 <xTimerGenericCommand>
 8006c1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d14f      	bne.n	8006cc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	61bb      	str	r3, [r7, #24]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c3e:	f023 0301 	bic.w	r3, r3, #1
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006c4a:	e03a      	b.n	8006cc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	617b      	str	r3, [r7, #20]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	699a      	ldr	r2, [r3, #24]
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	18d1      	adds	r1, r2, r3
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c90:	f7ff ff06 	bl	8006aa0 <prvInsertTimerInActiveList>
					break;
 8006c94:	e015      	b.n	8006cc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca6:	f000 fbdb 	bl	8007460 <vPortFree>
 8006caa:	e00a      	b.n	8006cc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb2:	f023 0301 	bic.w	r3, r3, #1
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cbe:	e000      	b.n	8006cc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006cc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cc2:	4b08      	ldr	r3, [pc, #32]	; (8006ce4 <prvProcessReceivedCommands+0x1c0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	1d39      	adds	r1, r7, #4
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe fc16 	bl	80054fc <xQueueReceive>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f47f af2a 	bne.w	8006b2c <prvProcessReceivedCommands+0x8>
	}
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	3730      	adds	r7, #48	; 0x30
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000c80 	.word	0x20000c80

08006ce8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cee:	e048      	b.n	8006d82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cf0:	4b2d      	ldr	r3, [pc, #180]	; (8006da8 <prvSwitchTimerLists+0xc0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cfa:	4b2b      	ldr	r3, [pc, #172]	; (8006da8 <prvSwitchTimerLists+0xc0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe f92f 	bl	8004f6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d02e      	beq.n	8006d82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d90e      	bls.n	8006d54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d42:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <prvSwitchTimerLists+0xc0>)
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7fe f8d4 	bl	8004efa <vListInsert>
 8006d52:	e016      	b.n	8006d82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d54:	2300      	movs	r3, #0
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f7ff fd60 	bl	8006824 <xTimerGenericCommand>
 8006d64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	603b      	str	r3, [r7, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <prvSwitchTimerLists+0xc0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1b1      	bne.n	8006cf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <prvSwitchTimerLists+0xc0>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d92:	4b06      	ldr	r3, [pc, #24]	; (8006dac <prvSwitchTimerLists+0xc4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <prvSwitchTimerLists+0xc0>)
 8006d98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d9a:	4a04      	ldr	r2, [pc, #16]	; (8006dac <prvSwitchTimerLists+0xc4>)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	6013      	str	r3, [r2, #0]
}
 8006da0:	bf00      	nop
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000c78 	.word	0x20000c78
 8006dac:	20000c7c 	.word	0x20000c7c

08006db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006db6:	f000 f965 	bl	8007084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006dba:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <prvCheckForValidListAndQueue+0x60>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d120      	bne.n	8006e04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006dc2:	4814      	ldr	r0, [pc, #80]	; (8006e14 <prvCheckForValidListAndQueue+0x64>)
 8006dc4:	f7fe f848 	bl	8004e58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006dc8:	4813      	ldr	r0, [pc, #76]	; (8006e18 <prvCheckForValidListAndQueue+0x68>)
 8006dca:	f7fe f845 	bl	8004e58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <prvCheckForValidListAndQueue+0x6c>)
 8006dd0:	4a10      	ldr	r2, [pc, #64]	; (8006e14 <prvCheckForValidListAndQueue+0x64>)
 8006dd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006dd4:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <prvCheckForValidListAndQueue+0x70>)
 8006dd6:	4a10      	ldr	r2, [pc, #64]	; (8006e18 <prvCheckForValidListAndQueue+0x68>)
 8006dd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <prvCheckForValidListAndQueue+0x74>)
 8006de0:	4a11      	ldr	r2, [pc, #68]	; (8006e28 <prvCheckForValidListAndQueue+0x78>)
 8006de2:	2110      	movs	r1, #16
 8006de4:	200a      	movs	r0, #10
 8006de6:	f7fe f953 	bl	8005090 <xQueueGenericCreateStatic>
 8006dea:	4603      	mov	r3, r0
 8006dec:	4a08      	ldr	r2, [pc, #32]	; (8006e10 <prvCheckForValidListAndQueue+0x60>)
 8006dee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <prvCheckForValidListAndQueue+0x60>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d005      	beq.n	8006e04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <prvCheckForValidListAndQueue+0x60>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	490b      	ldr	r1, [pc, #44]	; (8006e2c <prvCheckForValidListAndQueue+0x7c>)
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe fd6c 	bl	80058dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e04:	f000 f96e 	bl	80070e4 <vPortExitCritical>
}
 8006e08:	bf00      	nop
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000c80 	.word	0x20000c80
 8006e14:	20000c50 	.word	0x20000c50
 8006e18:	20000c64 	.word	0x20000c64
 8006e1c:	20000c78 	.word	0x20000c78
 8006e20:	20000c7c 	.word	0x20000c7c
 8006e24:	20000d2c 	.word	0x20000d2c
 8006e28:	20000c8c 	.word	0x20000c8c
 8006e2c:	08008868 	.word	0x08008868

08006e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3b04      	subs	r3, #4
 8006e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3b04      	subs	r3, #4
 8006e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3b04      	subs	r3, #4
 8006e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e60:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <pxPortInitialiseStack+0x64>)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3b14      	subs	r3, #20
 8006e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3b04      	subs	r3, #4
 8006e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f06f 0202 	mvn.w	r2, #2
 8006e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3b20      	subs	r3, #32
 8006e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e86:	68fb      	ldr	r3, [r7, #12]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	08006e99 	.word	0x08006e99

08006e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ea2:	4b12      	ldr	r3, [pc, #72]	; (8006eec <prvTaskExitError+0x54>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eaa:	d00a      	beq.n	8006ec2 <prvTaskExitError+0x2a>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60fb      	str	r3, [r7, #12]
}
 8006ebe:	bf00      	nop
 8006ec0:	e7fe      	b.n	8006ec0 <prvTaskExitError+0x28>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	60bb      	str	r3, [r7, #8]
}
 8006ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ed6:	bf00      	nop
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0fc      	beq.n	8006ed8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ede:	bf00      	nop
 8006ee0:	bf00      	nop
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	2000000c 	.word	0x2000000c

08006ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <pxCurrentTCBConst2>)
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	6808      	ldr	r0, [r1, #0]
 8006ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efa:	f380 8809 	msr	PSP, r0
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f380 8811 	msr	BASEPRI, r0
 8006f0a:	4770      	bx	lr
 8006f0c:	f3af 8000 	nop.w

08006f10 <pxCurrentTCBConst2>:
 8006f10:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop

08006f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f18:	4808      	ldr	r0, [pc, #32]	; (8006f3c <prvPortStartFirstTask+0x24>)
 8006f1a:	6800      	ldr	r0, [r0, #0]
 8006f1c:	6800      	ldr	r0, [r0, #0]
 8006f1e:	f380 8808 	msr	MSP, r0
 8006f22:	f04f 0000 	mov.w	r0, #0
 8006f26:	f380 8814 	msr	CONTROL, r0
 8006f2a:	b662      	cpsie	i
 8006f2c:	b661      	cpsie	f
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	df00      	svc	0
 8006f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f3a:	bf00      	nop
 8006f3c:	e000ed08 	.word	0xe000ed08

08006f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f46:	4b46      	ldr	r3, [pc, #280]	; (8007060 <xPortStartScheduler+0x120>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a46      	ldr	r2, [pc, #280]	; (8007064 <xPortStartScheduler+0x124>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d10a      	bne.n	8006f66 <xPortStartScheduler+0x26>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	613b      	str	r3, [r7, #16]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f66:	4b3e      	ldr	r3, [pc, #248]	; (8007060 <xPortStartScheduler+0x120>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a3f      	ldr	r2, [pc, #252]	; (8007068 <xPortStartScheduler+0x128>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10a      	bne.n	8006f86 <xPortStartScheduler+0x46>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60fb      	str	r3, [r7, #12]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f86:	4b39      	ldr	r3, [pc, #228]	; (800706c <xPortStartScheduler+0x12c>)
 8006f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	22ff      	movs	r2, #255	; 0xff
 8006f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <xPortStartScheduler+0x130>)
 8006fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <xPortStartScheduler+0x134>)
 8006fb0:	2207      	movs	r2, #7
 8006fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fb4:	e009      	b.n	8006fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006fb6:	4b2f      	ldr	r3, [pc, #188]	; (8007074 <xPortStartScheduler+0x134>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	4a2d      	ldr	r2, [pc, #180]	; (8007074 <xPortStartScheduler+0x134>)
 8006fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d0ef      	beq.n	8006fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fd6:	4b27      	ldr	r3, [pc, #156]	; (8007074 <xPortStartScheduler+0x134>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1c3 0307 	rsb	r3, r3, #7
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d00a      	beq.n	8006ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60bb      	str	r3, [r7, #8]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <xPortStartScheduler+0x134>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <xPortStartScheduler+0x134>)
 8007000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007002:	4b1c      	ldr	r3, [pc, #112]	; (8007074 <xPortStartScheduler+0x134>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800700a:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <xPortStartScheduler+0x134>)
 800700c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007016:	4b18      	ldr	r3, [pc, #96]	; (8007078 <xPortStartScheduler+0x138>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a17      	ldr	r2, [pc, #92]	; (8007078 <xPortStartScheduler+0x138>)
 800701c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007022:	4b15      	ldr	r3, [pc, #84]	; (8007078 <xPortStartScheduler+0x138>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a14      	ldr	r2, [pc, #80]	; (8007078 <xPortStartScheduler+0x138>)
 8007028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800702c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800702e:	f000 f8dd 	bl	80071ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007032:	4b12      	ldr	r3, [pc, #72]	; (800707c <xPortStartScheduler+0x13c>)
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007038:	f000 f8fc 	bl	8007234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800703c:	4b10      	ldr	r3, [pc, #64]	; (8007080 <xPortStartScheduler+0x140>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a0f      	ldr	r2, [pc, #60]	; (8007080 <xPortStartScheduler+0x140>)
 8007042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007048:	f7ff ff66 	bl	8006f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800704c:	f7ff f856 	bl	80060fc <vTaskSwitchContext>
	prvTaskExitError();
 8007050:	f7ff ff22 	bl	8006e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	e000ed00 	.word	0xe000ed00
 8007064:	410fc271 	.word	0x410fc271
 8007068:	410fc270 	.word	0x410fc270
 800706c:	e000e400 	.word	0xe000e400
 8007070:	20000d7c 	.word	0x20000d7c
 8007074:	20000d80 	.word	0x20000d80
 8007078:	e000ed20 	.word	0xe000ed20
 800707c:	2000000c 	.word	0x2000000c
 8007080:	e000ef34 	.word	0xe000ef34

08007084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	607b      	str	r3, [r7, #4]
}
 800709c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800709e:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <vPortEnterCritical+0x58>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	4a0d      	ldr	r2, [pc, #52]	; (80070dc <vPortEnterCritical+0x58>)
 80070a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <vPortEnterCritical+0x58>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d10f      	bne.n	80070d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <vPortEnterCritical+0x5c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	603b      	str	r3, [r7, #0]
}
 80070cc:	bf00      	nop
 80070ce:	e7fe      	b.n	80070ce <vPortEnterCritical+0x4a>
	}
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	2000000c 	.word	0x2000000c
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070ea:	4b12      	ldr	r3, [pc, #72]	; (8007134 <vPortExitCritical+0x50>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <vPortExitCritical+0x24>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	607b      	str	r3, [r7, #4]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007108:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <vPortExitCritical+0x50>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3b01      	subs	r3, #1
 800710e:	4a09      	ldr	r2, [pc, #36]	; (8007134 <vPortExitCritical+0x50>)
 8007110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007112:	4b08      	ldr	r3, [pc, #32]	; (8007134 <vPortExitCritical+0x50>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <vPortExitCritical+0x42>
 800711a:	2300      	movs	r3, #0
 800711c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	f383 8811 	msr	BASEPRI, r3
}
 8007124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	2000000c 	.word	0x2000000c
	...

08007140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007140:	f3ef 8009 	mrs	r0, PSP
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <pxCurrentTCBConst>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	f01e 0f10 	tst.w	lr, #16
 8007150:	bf08      	it	eq
 8007152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	6010      	str	r0, [r2, #0]
 800715c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007164:	f380 8811 	msr	BASEPRI, r0
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f7fe ffc4 	bl	80060fc <vTaskSwitchContext>
 8007174:	f04f 0000 	mov.w	r0, #0
 8007178:	f380 8811 	msr	BASEPRI, r0
 800717c:	bc09      	pop	{r0, r3}
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	6808      	ldr	r0, [r1, #0]
 8007182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007186:	f01e 0f10 	tst.w	lr, #16
 800718a:	bf08      	it	eq
 800718c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007190:	f380 8809 	msr	PSP, r0
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	f3af 8000 	nop.w

080071a0 <pxCurrentTCBConst>:
 80071a0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop

080071a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	607b      	str	r3, [r7, #4]
}
 80071c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071c2:	f7fe fee1 	bl	8005f88 <xTaskIncrementTick>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071cc:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <xPortSysTickHandler+0x40>)
 80071ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f383 8811 	msr	BASEPRI, r3
}
 80071de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <vPortSetupTimerInterrupt+0x34>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071f6:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <vPortSetupTimerInterrupt+0x38>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071fc:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <vPortSetupTimerInterrupt+0x3c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a0a      	ldr	r2, [pc, #40]	; (800722c <vPortSetupTimerInterrupt+0x40>)
 8007202:	fba2 2303 	umull	r2, r3, r2, r3
 8007206:	099b      	lsrs	r3, r3, #6
 8007208:	4a09      	ldr	r2, [pc, #36]	; (8007230 <vPortSetupTimerInterrupt+0x44>)
 800720a:	3b01      	subs	r3, #1
 800720c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800720e:	4b04      	ldr	r3, [pc, #16]	; (8007220 <vPortSetupTimerInterrupt+0x34>)
 8007210:	2207      	movs	r2, #7
 8007212:	601a      	str	r2, [r3, #0]
}
 8007214:	bf00      	nop
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	e000e010 	.word	0xe000e010
 8007224:	e000e018 	.word	0xe000e018
 8007228:	20000000 	.word	0x20000000
 800722c:	10624dd3 	.word	0x10624dd3
 8007230:	e000e014 	.word	0xe000e014

08007234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007244 <vPortEnableVFP+0x10>
 8007238:	6801      	ldr	r1, [r0, #0]
 800723a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800723e:	6001      	str	r1, [r0, #0]
 8007240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007242:	bf00      	nop
 8007244:	e000ed88 	.word	0xe000ed88

08007248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800724e:	f3ef 8305 	mrs	r3, IPSR
 8007252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b0f      	cmp	r3, #15
 8007258:	d914      	bls.n	8007284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800725a:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <vPortValidateInterruptPriority+0x70>)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007264:	4b15      	ldr	r3, [pc, #84]	; (80072bc <vPortValidateInterruptPriority+0x74>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	7afa      	ldrb	r2, [r7, #11]
 800726a:	429a      	cmp	r2, r3
 800726c:	d20a      	bcs.n	8007284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	607b      	str	r3, [r7, #4]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <vPortValidateInterruptPriority+0x78>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800728c:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <vPortValidateInterruptPriority+0x7c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d90a      	bls.n	80072aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	603b      	str	r3, [r7, #0]
}
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <vPortValidateInterruptPriority+0x60>
	}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	e000e3f0 	.word	0xe000e3f0
 80072bc:	20000d7c 	.word	0x20000d7c
 80072c0:	e000ed0c 	.word	0xe000ed0c
 80072c4:	20000d80 	.word	0x20000d80

080072c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072d4:	f7fe fd9c 	bl	8005e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072d8:	4b5b      	ldr	r3, [pc, #364]	; (8007448 <pvPortMalloc+0x180>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072e0:	f000 f920 	bl	8007524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072e4:	4b59      	ldr	r3, [pc, #356]	; (800744c <pvPortMalloc+0x184>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 8093 	bne.w	8007418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01d      	beq.n	8007334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072f8:	2208      	movs	r2, #8
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	2b00      	cmp	r3, #0
 8007308:	d014      	beq.n	8007334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f023 0307 	bic.w	r3, r3, #7
 8007310:	3308      	adds	r3, #8
 8007312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <pvPortMalloc+0x6c>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	617b      	str	r3, [r7, #20]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d06e      	beq.n	8007418 <pvPortMalloc+0x150>
 800733a:	4b45      	ldr	r3, [pc, #276]	; (8007450 <pvPortMalloc+0x188>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d869      	bhi.n	8007418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007344:	4b43      	ldr	r3, [pc, #268]	; (8007454 <pvPortMalloc+0x18c>)
 8007346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007348:	4b42      	ldr	r3, [pc, #264]	; (8007454 <pvPortMalloc+0x18c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800734e:	e004      	b.n	800735a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d903      	bls.n	800736c <pvPortMalloc+0xa4>
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1f1      	bne.n	8007350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800736c:	4b36      	ldr	r3, [pc, #216]	; (8007448 <pvPortMalloc+0x180>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007372:	429a      	cmp	r2, r3
 8007374:	d050      	beq.n	8007418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2208      	movs	r2, #8
 800737c:	4413      	add	r3, r2
 800737e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	2308      	movs	r3, #8
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	429a      	cmp	r2, r3
 8007396:	d91f      	bls.n	80073d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <pvPortMalloc+0xf8>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	613b      	str	r3, [r7, #16]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	1ad2      	subs	r2, r2, r3
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073d2:	69b8      	ldr	r0, [r7, #24]
 80073d4:	f000 f908 	bl	80075e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073d8:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <pvPortMalloc+0x188>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	4a1b      	ldr	r2, [pc, #108]	; (8007450 <pvPortMalloc+0x188>)
 80073e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073e6:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <pvPortMalloc+0x188>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <pvPortMalloc+0x190>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d203      	bcs.n	80073fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073f2:	4b17      	ldr	r3, [pc, #92]	; (8007450 <pvPortMalloc+0x188>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a18      	ldr	r2, [pc, #96]	; (8007458 <pvPortMalloc+0x190>)
 80073f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	4b13      	ldr	r3, [pc, #76]	; (800744c <pvPortMalloc+0x184>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	431a      	orrs	r2, r3
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <pvPortMalloc+0x194>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3301      	adds	r3, #1
 8007414:	4a11      	ldr	r2, [pc, #68]	; (800745c <pvPortMalloc+0x194>)
 8007416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007418:	f7fe fd08 	bl	8005e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <pvPortMalloc+0x174>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	60fb      	str	r3, [r7, #12]
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <pvPortMalloc+0x172>
	return pvReturn;
 800743c:	69fb      	ldr	r3, [r7, #28]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3728      	adds	r7, #40	; 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	2000498c 	.word	0x2000498c
 800744c:	200049a0 	.word	0x200049a0
 8007450:	20004990 	.word	0x20004990
 8007454:	20004984 	.word	0x20004984
 8007458:	20004994 	.word	0x20004994
 800745c:	20004998 	.word	0x20004998

08007460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d04d      	beq.n	800750e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007472:	2308      	movs	r3, #8
 8007474:	425b      	negs	r3, r3
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <vPortFree+0xb8>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4013      	ands	r3, r2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <vPortFree+0x44>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	60fb      	str	r3, [r7, #12]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <vPortFree+0x62>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	60bb      	str	r3, [r7, #8]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	4b14      	ldr	r3, [pc, #80]	; (8007518 <vPortFree+0xb8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01e      	beq.n	800750e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d11a      	bne.n	800750e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <vPortFree+0xb8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	43db      	mvns	r3, r3
 80074e2:	401a      	ands	r2, r3
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074e8:	f7fe fc92 	bl	8005e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <vPortFree+0xbc>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4413      	add	r3, r2
 80074f6:	4a09      	ldr	r2, [pc, #36]	; (800751c <vPortFree+0xbc>)
 80074f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074fa:	6938      	ldr	r0, [r7, #16]
 80074fc:	f000 f874 	bl	80075e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <vPortFree+0xc0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	4a06      	ldr	r2, [pc, #24]	; (8007520 <vPortFree+0xc0>)
 8007508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800750a:	f7fe fc8f 	bl	8005e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800750e:	bf00      	nop
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	200049a0 	.word	0x200049a0
 800751c:	20004990 	.word	0x20004990
 8007520:	2000499c 	.word	0x2000499c

08007524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800752a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800752e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007530:	4b27      	ldr	r3, [pc, #156]	; (80075d0 <prvHeapInit+0xac>)
 8007532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 0307 	and.w	r3, r3, #7
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3307      	adds	r3, #7
 8007542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0307 	bic.w	r3, r3, #7
 800754a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <prvHeapInit+0xac>)
 8007554:	4413      	add	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800755c:	4a1d      	ldr	r2, [pc, #116]	; (80075d4 <prvHeapInit+0xb0>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007562:	4b1c      	ldr	r3, [pc, #112]	; (80075d4 <prvHeapInit+0xb0>)
 8007564:	2200      	movs	r2, #0
 8007566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4413      	add	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007570:	2208      	movs	r2, #8
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <prvHeapInit+0xb4>)
 8007584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <prvHeapInit+0xb4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800758e:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <prvHeapInit+0xb4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <prvHeapInit+0xb4>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <prvHeapInit+0xb8>)
 80075b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <prvHeapInit+0xbc>)
 80075ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075bc:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <prvHeapInit+0xc0>)
 80075be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	20000d84 	.word	0x20000d84
 80075d4:	20004984 	.word	0x20004984
 80075d8:	2000498c 	.word	0x2000498c
 80075dc:	20004994 	.word	0x20004994
 80075e0:	20004990 	.word	0x20004990
 80075e4:	200049a0 	.word	0x200049a0

080075e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075f0:	4b28      	ldr	r3, [pc, #160]	; (8007694 <prvInsertBlockIntoFreeList+0xac>)
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e002      	b.n	80075fc <prvInsertBlockIntoFreeList+0x14>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	429a      	cmp	r2, r3
 8007604:	d8f7      	bhi.n	80075f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	4413      	add	r3, r2
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	d108      	bne.n	800762a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	441a      	add	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d118      	bne.n	8007670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <prvInsertBlockIntoFreeList+0xb0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d00d      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	441a      	add	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	e008      	b.n	8007678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007666:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <prvInsertBlockIntoFreeList+0xb0>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e003      	b.n	8007678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d002      	beq.n	8007686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20004984 	.word	0x20004984
 8007698:	2000498c 	.word	0x2000498c

0800769c <__errno>:
 800769c:	4b01      	ldr	r3, [pc, #4]	; (80076a4 <__errno+0x8>)
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20000010 	.word	0x20000010

080076a8 <__libc_init_array>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4d0d      	ldr	r5, [pc, #52]	; (80076e0 <__libc_init_array+0x38>)
 80076ac:	4c0d      	ldr	r4, [pc, #52]	; (80076e4 <__libc_init_array+0x3c>)
 80076ae:	1b64      	subs	r4, r4, r5
 80076b0:	10a4      	asrs	r4, r4, #2
 80076b2:	2600      	movs	r6, #0
 80076b4:	42a6      	cmp	r6, r4
 80076b6:	d109      	bne.n	80076cc <__libc_init_array+0x24>
 80076b8:	4d0b      	ldr	r5, [pc, #44]	; (80076e8 <__libc_init_array+0x40>)
 80076ba:	4c0c      	ldr	r4, [pc, #48]	; (80076ec <__libc_init_array+0x44>)
 80076bc:	f000 fffa 	bl	80086b4 <_init>
 80076c0:	1b64      	subs	r4, r4, r5
 80076c2:	10a4      	asrs	r4, r4, #2
 80076c4:	2600      	movs	r6, #0
 80076c6:	42a6      	cmp	r6, r4
 80076c8:	d105      	bne.n	80076d6 <__libc_init_array+0x2e>
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d0:	4798      	blx	r3
 80076d2:	3601      	adds	r6, #1
 80076d4:	e7ee      	b.n	80076b4 <__libc_init_array+0xc>
 80076d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076da:	4798      	blx	r3
 80076dc:	3601      	adds	r6, #1
 80076de:	e7f2      	b.n	80076c6 <__libc_init_array+0x1e>
 80076e0:	080089b8 	.word	0x080089b8
 80076e4:	080089b8 	.word	0x080089b8
 80076e8:	080089b8 	.word	0x080089b8
 80076ec:	080089bc 	.word	0x080089bc

080076f0 <memcpy>:
 80076f0:	440a      	add	r2, r1
 80076f2:	4291      	cmp	r1, r2
 80076f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076f8:	d100      	bne.n	80076fc <memcpy+0xc>
 80076fa:	4770      	bx	lr
 80076fc:	b510      	push	{r4, lr}
 80076fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007706:	4291      	cmp	r1, r2
 8007708:	d1f9      	bne.n	80076fe <memcpy+0xe>
 800770a:	bd10      	pop	{r4, pc}

0800770c <memset>:
 800770c:	4402      	add	r2, r0
 800770e:	4603      	mov	r3, r0
 8007710:	4293      	cmp	r3, r2
 8007712:	d100      	bne.n	8007716 <memset+0xa>
 8007714:	4770      	bx	lr
 8007716:	f803 1b01 	strb.w	r1, [r3], #1
 800771a:	e7f9      	b.n	8007710 <memset+0x4>

0800771c <iprintf>:
 800771c:	b40f      	push	{r0, r1, r2, r3}
 800771e:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <iprintf+0x2c>)
 8007720:	b513      	push	{r0, r1, r4, lr}
 8007722:	681c      	ldr	r4, [r3, #0]
 8007724:	b124      	cbz	r4, 8007730 <iprintf+0x14>
 8007726:	69a3      	ldr	r3, [r4, #24]
 8007728:	b913      	cbnz	r3, 8007730 <iprintf+0x14>
 800772a:	4620      	mov	r0, r4
 800772c:	f000 fa5e 	bl	8007bec <__sinit>
 8007730:	ab05      	add	r3, sp, #20
 8007732:	9a04      	ldr	r2, [sp, #16]
 8007734:	68a1      	ldr	r1, [r4, #8]
 8007736:	9301      	str	r3, [sp, #4]
 8007738:	4620      	mov	r0, r4
 800773a:	f000 fc2f 	bl	8007f9c <_vfiprintf_r>
 800773e:	b002      	add	sp, #8
 8007740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007744:	b004      	add	sp, #16
 8007746:	4770      	bx	lr
 8007748:	20000010 	.word	0x20000010

0800774c <_puts_r>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	460e      	mov	r6, r1
 8007750:	4605      	mov	r5, r0
 8007752:	b118      	cbz	r0, 800775c <_puts_r+0x10>
 8007754:	6983      	ldr	r3, [r0, #24]
 8007756:	b90b      	cbnz	r3, 800775c <_puts_r+0x10>
 8007758:	f000 fa48 	bl	8007bec <__sinit>
 800775c:	69ab      	ldr	r3, [r5, #24]
 800775e:	68ac      	ldr	r4, [r5, #8]
 8007760:	b913      	cbnz	r3, 8007768 <_puts_r+0x1c>
 8007762:	4628      	mov	r0, r5
 8007764:	f000 fa42 	bl	8007bec <__sinit>
 8007768:	4b2c      	ldr	r3, [pc, #176]	; (800781c <_puts_r+0xd0>)
 800776a:	429c      	cmp	r4, r3
 800776c:	d120      	bne.n	80077b0 <_puts_r+0x64>
 800776e:	686c      	ldr	r4, [r5, #4]
 8007770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007772:	07db      	lsls	r3, r3, #31
 8007774:	d405      	bmi.n	8007782 <_puts_r+0x36>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	0598      	lsls	r0, r3, #22
 800777a:	d402      	bmi.n	8007782 <_puts_r+0x36>
 800777c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800777e:	f000 fad3 	bl	8007d28 <__retarget_lock_acquire_recursive>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	0719      	lsls	r1, r3, #28
 8007786:	d51d      	bpl.n	80077c4 <_puts_r+0x78>
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	b1db      	cbz	r3, 80077c4 <_puts_r+0x78>
 800778c:	3e01      	subs	r6, #1
 800778e:	68a3      	ldr	r3, [r4, #8]
 8007790:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007794:	3b01      	subs	r3, #1
 8007796:	60a3      	str	r3, [r4, #8]
 8007798:	bb39      	cbnz	r1, 80077ea <_puts_r+0x9e>
 800779a:	2b00      	cmp	r3, #0
 800779c:	da38      	bge.n	8007810 <_puts_r+0xc4>
 800779e:	4622      	mov	r2, r4
 80077a0:	210a      	movs	r1, #10
 80077a2:	4628      	mov	r0, r5
 80077a4:	f000 f848 	bl	8007838 <__swbuf_r>
 80077a8:	3001      	adds	r0, #1
 80077aa:	d011      	beq.n	80077d0 <_puts_r+0x84>
 80077ac:	250a      	movs	r5, #10
 80077ae:	e011      	b.n	80077d4 <_puts_r+0x88>
 80077b0:	4b1b      	ldr	r3, [pc, #108]	; (8007820 <_puts_r+0xd4>)
 80077b2:	429c      	cmp	r4, r3
 80077b4:	d101      	bne.n	80077ba <_puts_r+0x6e>
 80077b6:	68ac      	ldr	r4, [r5, #8]
 80077b8:	e7da      	b.n	8007770 <_puts_r+0x24>
 80077ba:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <_puts_r+0xd8>)
 80077bc:	429c      	cmp	r4, r3
 80077be:	bf08      	it	eq
 80077c0:	68ec      	ldreq	r4, [r5, #12]
 80077c2:	e7d5      	b.n	8007770 <_puts_r+0x24>
 80077c4:	4621      	mov	r1, r4
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 f888 	bl	80078dc <__swsetup_r>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d0dd      	beq.n	800778c <_puts_r+0x40>
 80077d0:	f04f 35ff 	mov.w	r5, #4294967295
 80077d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077d6:	07da      	lsls	r2, r3, #31
 80077d8:	d405      	bmi.n	80077e6 <_puts_r+0x9a>
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	059b      	lsls	r3, r3, #22
 80077de:	d402      	bmi.n	80077e6 <_puts_r+0x9a>
 80077e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077e2:	f000 faa2 	bl	8007d2a <__retarget_lock_release_recursive>
 80077e6:	4628      	mov	r0, r5
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	da04      	bge.n	80077f8 <_puts_r+0xac>
 80077ee:	69a2      	ldr	r2, [r4, #24]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	dc06      	bgt.n	8007802 <_puts_r+0xb6>
 80077f4:	290a      	cmp	r1, #10
 80077f6:	d004      	beq.n	8007802 <_puts_r+0xb6>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	6022      	str	r2, [r4, #0]
 80077fe:	7019      	strb	r1, [r3, #0]
 8007800:	e7c5      	b.n	800778e <_puts_r+0x42>
 8007802:	4622      	mov	r2, r4
 8007804:	4628      	mov	r0, r5
 8007806:	f000 f817 	bl	8007838 <__swbuf_r>
 800780a:	3001      	adds	r0, #1
 800780c:	d1bf      	bne.n	800778e <_puts_r+0x42>
 800780e:	e7df      	b.n	80077d0 <_puts_r+0x84>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	250a      	movs	r5, #10
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	6022      	str	r2, [r4, #0]
 8007818:	701d      	strb	r5, [r3, #0]
 800781a:	e7db      	b.n	80077d4 <_puts_r+0x88>
 800781c:	0800893c 	.word	0x0800893c
 8007820:	0800895c 	.word	0x0800895c
 8007824:	0800891c 	.word	0x0800891c

08007828 <puts>:
 8007828:	4b02      	ldr	r3, [pc, #8]	; (8007834 <puts+0xc>)
 800782a:	4601      	mov	r1, r0
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	f7ff bf8d 	b.w	800774c <_puts_r>
 8007832:	bf00      	nop
 8007834:	20000010 	.word	0x20000010

08007838 <__swbuf_r>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	460e      	mov	r6, r1
 800783c:	4614      	mov	r4, r2
 800783e:	4605      	mov	r5, r0
 8007840:	b118      	cbz	r0, 800784a <__swbuf_r+0x12>
 8007842:	6983      	ldr	r3, [r0, #24]
 8007844:	b90b      	cbnz	r3, 800784a <__swbuf_r+0x12>
 8007846:	f000 f9d1 	bl	8007bec <__sinit>
 800784a:	4b21      	ldr	r3, [pc, #132]	; (80078d0 <__swbuf_r+0x98>)
 800784c:	429c      	cmp	r4, r3
 800784e:	d12b      	bne.n	80078a8 <__swbuf_r+0x70>
 8007850:	686c      	ldr	r4, [r5, #4]
 8007852:	69a3      	ldr	r3, [r4, #24]
 8007854:	60a3      	str	r3, [r4, #8]
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	071a      	lsls	r2, r3, #28
 800785a:	d52f      	bpl.n	80078bc <__swbuf_r+0x84>
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	b36b      	cbz	r3, 80078bc <__swbuf_r+0x84>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	1ac0      	subs	r0, r0, r3
 8007866:	6963      	ldr	r3, [r4, #20]
 8007868:	b2f6      	uxtb	r6, r6
 800786a:	4283      	cmp	r3, r0
 800786c:	4637      	mov	r7, r6
 800786e:	dc04      	bgt.n	800787a <__swbuf_r+0x42>
 8007870:	4621      	mov	r1, r4
 8007872:	4628      	mov	r0, r5
 8007874:	f000 f926 	bl	8007ac4 <_fflush_r>
 8007878:	bb30      	cbnz	r0, 80078c8 <__swbuf_r+0x90>
 800787a:	68a3      	ldr	r3, [r4, #8]
 800787c:	3b01      	subs	r3, #1
 800787e:	60a3      	str	r3, [r4, #8]
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	6022      	str	r2, [r4, #0]
 8007886:	701e      	strb	r6, [r3, #0]
 8007888:	6963      	ldr	r3, [r4, #20]
 800788a:	3001      	adds	r0, #1
 800788c:	4283      	cmp	r3, r0
 800788e:	d004      	beq.n	800789a <__swbuf_r+0x62>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	07db      	lsls	r3, r3, #31
 8007894:	d506      	bpl.n	80078a4 <__swbuf_r+0x6c>
 8007896:	2e0a      	cmp	r6, #10
 8007898:	d104      	bne.n	80078a4 <__swbuf_r+0x6c>
 800789a:	4621      	mov	r1, r4
 800789c:	4628      	mov	r0, r5
 800789e:	f000 f911 	bl	8007ac4 <_fflush_r>
 80078a2:	b988      	cbnz	r0, 80078c8 <__swbuf_r+0x90>
 80078a4:	4638      	mov	r0, r7
 80078a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a8:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <__swbuf_r+0x9c>)
 80078aa:	429c      	cmp	r4, r3
 80078ac:	d101      	bne.n	80078b2 <__swbuf_r+0x7a>
 80078ae:	68ac      	ldr	r4, [r5, #8]
 80078b0:	e7cf      	b.n	8007852 <__swbuf_r+0x1a>
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <__swbuf_r+0xa0>)
 80078b4:	429c      	cmp	r4, r3
 80078b6:	bf08      	it	eq
 80078b8:	68ec      	ldreq	r4, [r5, #12]
 80078ba:	e7ca      	b.n	8007852 <__swbuf_r+0x1a>
 80078bc:	4621      	mov	r1, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 f80c 	bl	80078dc <__swsetup_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d0cb      	beq.n	8007860 <__swbuf_r+0x28>
 80078c8:	f04f 37ff 	mov.w	r7, #4294967295
 80078cc:	e7ea      	b.n	80078a4 <__swbuf_r+0x6c>
 80078ce:	bf00      	nop
 80078d0:	0800893c 	.word	0x0800893c
 80078d4:	0800895c 	.word	0x0800895c
 80078d8:	0800891c 	.word	0x0800891c

080078dc <__swsetup_r>:
 80078dc:	4b32      	ldr	r3, [pc, #200]	; (80079a8 <__swsetup_r+0xcc>)
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	681d      	ldr	r5, [r3, #0]
 80078e2:	4606      	mov	r6, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	b125      	cbz	r5, 80078f2 <__swsetup_r+0x16>
 80078e8:	69ab      	ldr	r3, [r5, #24]
 80078ea:	b913      	cbnz	r3, 80078f2 <__swsetup_r+0x16>
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 f97d 	bl	8007bec <__sinit>
 80078f2:	4b2e      	ldr	r3, [pc, #184]	; (80079ac <__swsetup_r+0xd0>)
 80078f4:	429c      	cmp	r4, r3
 80078f6:	d10f      	bne.n	8007918 <__swsetup_r+0x3c>
 80078f8:	686c      	ldr	r4, [r5, #4]
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007900:	0719      	lsls	r1, r3, #28
 8007902:	d42c      	bmi.n	800795e <__swsetup_r+0x82>
 8007904:	06dd      	lsls	r5, r3, #27
 8007906:	d411      	bmi.n	800792c <__swsetup_r+0x50>
 8007908:	2309      	movs	r3, #9
 800790a:	6033      	str	r3, [r6, #0]
 800790c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
 8007916:	e03e      	b.n	8007996 <__swsetup_r+0xba>
 8007918:	4b25      	ldr	r3, [pc, #148]	; (80079b0 <__swsetup_r+0xd4>)
 800791a:	429c      	cmp	r4, r3
 800791c:	d101      	bne.n	8007922 <__swsetup_r+0x46>
 800791e:	68ac      	ldr	r4, [r5, #8]
 8007920:	e7eb      	b.n	80078fa <__swsetup_r+0x1e>
 8007922:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <__swsetup_r+0xd8>)
 8007924:	429c      	cmp	r4, r3
 8007926:	bf08      	it	eq
 8007928:	68ec      	ldreq	r4, [r5, #12]
 800792a:	e7e6      	b.n	80078fa <__swsetup_r+0x1e>
 800792c:	0758      	lsls	r0, r3, #29
 800792e:	d512      	bpl.n	8007956 <__swsetup_r+0x7a>
 8007930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007932:	b141      	cbz	r1, 8007946 <__swsetup_r+0x6a>
 8007934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007938:	4299      	cmp	r1, r3
 800793a:	d002      	beq.n	8007942 <__swsetup_r+0x66>
 800793c:	4630      	mov	r0, r6
 800793e:	f000 fa59 	bl	8007df4 <_free_r>
 8007942:	2300      	movs	r3, #0
 8007944:	6363      	str	r3, [r4, #52]	; 0x34
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800794c:	81a3      	strh	r3, [r4, #12]
 800794e:	2300      	movs	r3, #0
 8007950:	6063      	str	r3, [r4, #4]
 8007952:	6923      	ldr	r3, [r4, #16]
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f043 0308 	orr.w	r3, r3, #8
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	6923      	ldr	r3, [r4, #16]
 8007960:	b94b      	cbnz	r3, 8007976 <__swsetup_r+0x9a>
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d003      	beq.n	8007976 <__swsetup_r+0x9a>
 800796e:	4621      	mov	r1, r4
 8007970:	4630      	mov	r0, r6
 8007972:	f000 f9ff 	bl	8007d74 <__smakebuf_r>
 8007976:	89a0      	ldrh	r0, [r4, #12]
 8007978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800797c:	f010 0301 	ands.w	r3, r0, #1
 8007980:	d00a      	beq.n	8007998 <__swsetup_r+0xbc>
 8007982:	2300      	movs	r3, #0
 8007984:	60a3      	str	r3, [r4, #8]
 8007986:	6963      	ldr	r3, [r4, #20]
 8007988:	425b      	negs	r3, r3
 800798a:	61a3      	str	r3, [r4, #24]
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	b943      	cbnz	r3, 80079a2 <__swsetup_r+0xc6>
 8007990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007994:	d1ba      	bne.n	800790c <__swsetup_r+0x30>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	0781      	lsls	r1, r0, #30
 800799a:	bf58      	it	pl
 800799c:	6963      	ldrpl	r3, [r4, #20]
 800799e:	60a3      	str	r3, [r4, #8]
 80079a0:	e7f4      	b.n	800798c <__swsetup_r+0xb0>
 80079a2:	2000      	movs	r0, #0
 80079a4:	e7f7      	b.n	8007996 <__swsetup_r+0xba>
 80079a6:	bf00      	nop
 80079a8:	20000010 	.word	0x20000010
 80079ac:	0800893c 	.word	0x0800893c
 80079b0:	0800895c 	.word	0x0800895c
 80079b4:	0800891c 	.word	0x0800891c

080079b8 <__sflush_r>:
 80079b8:	898a      	ldrh	r2, [r1, #12]
 80079ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079be:	4605      	mov	r5, r0
 80079c0:	0710      	lsls	r0, r2, #28
 80079c2:	460c      	mov	r4, r1
 80079c4:	d458      	bmi.n	8007a78 <__sflush_r+0xc0>
 80079c6:	684b      	ldr	r3, [r1, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	dc05      	bgt.n	80079d8 <__sflush_r+0x20>
 80079cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dc02      	bgt.n	80079d8 <__sflush_r+0x20>
 80079d2:	2000      	movs	r0, #0
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079da:	2e00      	cmp	r6, #0
 80079dc:	d0f9      	beq.n	80079d2 <__sflush_r+0x1a>
 80079de:	2300      	movs	r3, #0
 80079e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079e4:	682f      	ldr	r7, [r5, #0]
 80079e6:	602b      	str	r3, [r5, #0]
 80079e8:	d032      	beq.n	8007a50 <__sflush_r+0x98>
 80079ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	075a      	lsls	r2, r3, #29
 80079f0:	d505      	bpl.n	80079fe <__sflush_r+0x46>
 80079f2:	6863      	ldr	r3, [r4, #4]
 80079f4:	1ac0      	subs	r0, r0, r3
 80079f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079f8:	b10b      	cbz	r3, 80079fe <__sflush_r+0x46>
 80079fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079fc:	1ac0      	subs	r0, r0, r3
 80079fe:	2300      	movs	r3, #0
 8007a00:	4602      	mov	r2, r0
 8007a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a04:	6a21      	ldr	r1, [r4, #32]
 8007a06:	4628      	mov	r0, r5
 8007a08:	47b0      	blx	r6
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	d106      	bne.n	8007a1e <__sflush_r+0x66>
 8007a10:	6829      	ldr	r1, [r5, #0]
 8007a12:	291d      	cmp	r1, #29
 8007a14:	d82c      	bhi.n	8007a70 <__sflush_r+0xb8>
 8007a16:	4a2a      	ldr	r2, [pc, #168]	; (8007ac0 <__sflush_r+0x108>)
 8007a18:	40ca      	lsrs	r2, r1
 8007a1a:	07d6      	lsls	r6, r2, #31
 8007a1c:	d528      	bpl.n	8007a70 <__sflush_r+0xb8>
 8007a1e:	2200      	movs	r2, #0
 8007a20:	6062      	str	r2, [r4, #4]
 8007a22:	04d9      	lsls	r1, r3, #19
 8007a24:	6922      	ldr	r2, [r4, #16]
 8007a26:	6022      	str	r2, [r4, #0]
 8007a28:	d504      	bpl.n	8007a34 <__sflush_r+0x7c>
 8007a2a:	1c42      	adds	r2, r0, #1
 8007a2c:	d101      	bne.n	8007a32 <__sflush_r+0x7a>
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	b903      	cbnz	r3, 8007a34 <__sflush_r+0x7c>
 8007a32:	6560      	str	r0, [r4, #84]	; 0x54
 8007a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a36:	602f      	str	r7, [r5, #0]
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	d0ca      	beq.n	80079d2 <__sflush_r+0x1a>
 8007a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a40:	4299      	cmp	r1, r3
 8007a42:	d002      	beq.n	8007a4a <__sflush_r+0x92>
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 f9d5 	bl	8007df4 <_free_r>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a4e:	e7c1      	b.n	80079d4 <__sflush_r+0x1c>
 8007a50:	6a21      	ldr	r1, [r4, #32]
 8007a52:	2301      	movs	r3, #1
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b0      	blx	r6
 8007a58:	1c41      	adds	r1, r0, #1
 8007a5a:	d1c7      	bne.n	80079ec <__sflush_r+0x34>
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0c4      	beq.n	80079ec <__sflush_r+0x34>
 8007a62:	2b1d      	cmp	r3, #29
 8007a64:	d001      	beq.n	8007a6a <__sflush_r+0xb2>
 8007a66:	2b16      	cmp	r3, #22
 8007a68:	d101      	bne.n	8007a6e <__sflush_r+0xb6>
 8007a6a:	602f      	str	r7, [r5, #0]
 8007a6c:	e7b1      	b.n	80079d2 <__sflush_r+0x1a>
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	e7ad      	b.n	80079d4 <__sflush_r+0x1c>
 8007a78:	690f      	ldr	r7, [r1, #16]
 8007a7a:	2f00      	cmp	r7, #0
 8007a7c:	d0a9      	beq.n	80079d2 <__sflush_r+0x1a>
 8007a7e:	0793      	lsls	r3, r2, #30
 8007a80:	680e      	ldr	r6, [r1, #0]
 8007a82:	bf08      	it	eq
 8007a84:	694b      	ldreq	r3, [r1, #20]
 8007a86:	600f      	str	r7, [r1, #0]
 8007a88:	bf18      	it	ne
 8007a8a:	2300      	movne	r3, #0
 8007a8c:	eba6 0807 	sub.w	r8, r6, r7
 8007a90:	608b      	str	r3, [r1, #8]
 8007a92:	f1b8 0f00 	cmp.w	r8, #0
 8007a96:	dd9c      	ble.n	80079d2 <__sflush_r+0x1a>
 8007a98:	6a21      	ldr	r1, [r4, #32]
 8007a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a9c:	4643      	mov	r3, r8
 8007a9e:	463a      	mov	r2, r7
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b0      	blx	r6
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	dc06      	bgt.n	8007ab6 <__sflush_r+0xfe>
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	e78e      	b.n	80079d4 <__sflush_r+0x1c>
 8007ab6:	4407      	add	r7, r0
 8007ab8:	eba8 0800 	sub.w	r8, r8, r0
 8007abc:	e7e9      	b.n	8007a92 <__sflush_r+0xda>
 8007abe:	bf00      	nop
 8007ac0:	20400001 	.word	0x20400001

08007ac4 <_fflush_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	690b      	ldr	r3, [r1, #16]
 8007ac8:	4605      	mov	r5, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	b913      	cbnz	r3, 8007ad4 <_fflush_r+0x10>
 8007ace:	2500      	movs	r5, #0
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	b118      	cbz	r0, 8007ade <_fflush_r+0x1a>
 8007ad6:	6983      	ldr	r3, [r0, #24]
 8007ad8:	b90b      	cbnz	r3, 8007ade <_fflush_r+0x1a>
 8007ada:	f000 f887 	bl	8007bec <__sinit>
 8007ade:	4b14      	ldr	r3, [pc, #80]	; (8007b30 <_fflush_r+0x6c>)
 8007ae0:	429c      	cmp	r4, r3
 8007ae2:	d11b      	bne.n	8007b1c <_fflush_r+0x58>
 8007ae4:	686c      	ldr	r4, [r5, #4]
 8007ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0ef      	beq.n	8007ace <_fflush_r+0xa>
 8007aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007af0:	07d0      	lsls	r0, r2, #31
 8007af2:	d404      	bmi.n	8007afe <_fflush_r+0x3a>
 8007af4:	0599      	lsls	r1, r3, #22
 8007af6:	d402      	bmi.n	8007afe <_fflush_r+0x3a>
 8007af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afa:	f000 f915 	bl	8007d28 <__retarget_lock_acquire_recursive>
 8007afe:	4628      	mov	r0, r5
 8007b00:	4621      	mov	r1, r4
 8007b02:	f7ff ff59 	bl	80079b8 <__sflush_r>
 8007b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b08:	07da      	lsls	r2, r3, #31
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	d4e0      	bmi.n	8007ad0 <_fflush_r+0xc>
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	059b      	lsls	r3, r3, #22
 8007b12:	d4dd      	bmi.n	8007ad0 <_fflush_r+0xc>
 8007b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b16:	f000 f908 	bl	8007d2a <__retarget_lock_release_recursive>
 8007b1a:	e7d9      	b.n	8007ad0 <_fflush_r+0xc>
 8007b1c:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <_fflush_r+0x70>)
 8007b1e:	429c      	cmp	r4, r3
 8007b20:	d101      	bne.n	8007b26 <_fflush_r+0x62>
 8007b22:	68ac      	ldr	r4, [r5, #8]
 8007b24:	e7df      	b.n	8007ae6 <_fflush_r+0x22>
 8007b26:	4b04      	ldr	r3, [pc, #16]	; (8007b38 <_fflush_r+0x74>)
 8007b28:	429c      	cmp	r4, r3
 8007b2a:	bf08      	it	eq
 8007b2c:	68ec      	ldreq	r4, [r5, #12]
 8007b2e:	e7da      	b.n	8007ae6 <_fflush_r+0x22>
 8007b30:	0800893c 	.word	0x0800893c
 8007b34:	0800895c 	.word	0x0800895c
 8007b38:	0800891c 	.word	0x0800891c

08007b3c <std>:
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	b510      	push	{r4, lr}
 8007b40:	4604      	mov	r4, r0
 8007b42:	e9c0 3300 	strd	r3, r3, [r0]
 8007b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b4a:	6083      	str	r3, [r0, #8]
 8007b4c:	8181      	strh	r1, [r0, #12]
 8007b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b50:	81c2      	strh	r2, [r0, #14]
 8007b52:	6183      	str	r3, [r0, #24]
 8007b54:	4619      	mov	r1, r3
 8007b56:	2208      	movs	r2, #8
 8007b58:	305c      	adds	r0, #92	; 0x5c
 8007b5a:	f7ff fdd7 	bl	800770c <memset>
 8007b5e:	4b05      	ldr	r3, [pc, #20]	; (8007b74 <std+0x38>)
 8007b60:	6263      	str	r3, [r4, #36]	; 0x24
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <std+0x3c>)
 8007b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <std+0x40>)
 8007b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <std+0x44>)
 8007b6c:	6224      	str	r4, [r4, #32]
 8007b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b70:	bd10      	pop	{r4, pc}
 8007b72:	bf00      	nop
 8007b74:	08008545 	.word	0x08008545
 8007b78:	08008567 	.word	0x08008567
 8007b7c:	0800859f 	.word	0x0800859f
 8007b80:	080085c3 	.word	0x080085c3

08007b84 <_cleanup_r>:
 8007b84:	4901      	ldr	r1, [pc, #4]	; (8007b8c <_cleanup_r+0x8>)
 8007b86:	f000 b8af 	b.w	8007ce8 <_fwalk_reent>
 8007b8a:	bf00      	nop
 8007b8c:	08007ac5 	.word	0x08007ac5

08007b90 <__sfmoreglue>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	1e4a      	subs	r2, r1, #1
 8007b94:	2568      	movs	r5, #104	; 0x68
 8007b96:	4355      	muls	r5, r2
 8007b98:	460e      	mov	r6, r1
 8007b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b9e:	f000 f979 	bl	8007e94 <_malloc_r>
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	b140      	cbz	r0, 8007bb8 <__sfmoreglue+0x28>
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bac:	300c      	adds	r0, #12
 8007bae:	60a0      	str	r0, [r4, #8]
 8007bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bb4:	f7ff fdaa 	bl	800770c <memset>
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bd70      	pop	{r4, r5, r6, pc}

08007bbc <__sfp_lock_acquire>:
 8007bbc:	4801      	ldr	r0, [pc, #4]	; (8007bc4 <__sfp_lock_acquire+0x8>)
 8007bbe:	f000 b8b3 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 8007bc2:	bf00      	nop
 8007bc4:	20004d20 	.word	0x20004d20

08007bc8 <__sfp_lock_release>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	; (8007bd0 <__sfp_lock_release+0x8>)
 8007bca:	f000 b8ae 	b.w	8007d2a <__retarget_lock_release_recursive>
 8007bce:	bf00      	nop
 8007bd0:	20004d20 	.word	0x20004d20

08007bd4 <__sinit_lock_acquire>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	; (8007bdc <__sinit_lock_acquire+0x8>)
 8007bd6:	f000 b8a7 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 8007bda:	bf00      	nop
 8007bdc:	20004d1b 	.word	0x20004d1b

08007be0 <__sinit_lock_release>:
 8007be0:	4801      	ldr	r0, [pc, #4]	; (8007be8 <__sinit_lock_release+0x8>)
 8007be2:	f000 b8a2 	b.w	8007d2a <__retarget_lock_release_recursive>
 8007be6:	bf00      	nop
 8007be8:	20004d1b 	.word	0x20004d1b

08007bec <__sinit>:
 8007bec:	b510      	push	{r4, lr}
 8007bee:	4604      	mov	r4, r0
 8007bf0:	f7ff fff0 	bl	8007bd4 <__sinit_lock_acquire>
 8007bf4:	69a3      	ldr	r3, [r4, #24]
 8007bf6:	b11b      	cbz	r3, 8007c00 <__sinit+0x14>
 8007bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bfc:	f7ff bff0 	b.w	8007be0 <__sinit_lock_release>
 8007c00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c04:	6523      	str	r3, [r4, #80]	; 0x50
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <__sinit+0x68>)
 8007c08:	4a13      	ldr	r2, [pc, #76]	; (8007c58 <__sinit+0x6c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c0e:	42a3      	cmp	r3, r4
 8007c10:	bf04      	itt	eq
 8007c12:	2301      	moveq	r3, #1
 8007c14:	61a3      	streq	r3, [r4, #24]
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 f820 	bl	8007c5c <__sfp>
 8007c1c:	6060      	str	r0, [r4, #4]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f81c 	bl	8007c5c <__sfp>
 8007c24:	60a0      	str	r0, [r4, #8]
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 f818 	bl	8007c5c <__sfp>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	60e0      	str	r0, [r4, #12]
 8007c30:	2104      	movs	r1, #4
 8007c32:	6860      	ldr	r0, [r4, #4]
 8007c34:	f7ff ff82 	bl	8007b3c <std>
 8007c38:	68a0      	ldr	r0, [r4, #8]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	2109      	movs	r1, #9
 8007c3e:	f7ff ff7d 	bl	8007b3c <std>
 8007c42:	68e0      	ldr	r0, [r4, #12]
 8007c44:	2202      	movs	r2, #2
 8007c46:	2112      	movs	r1, #18
 8007c48:	f7ff ff78 	bl	8007b3c <std>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	61a3      	str	r3, [r4, #24]
 8007c50:	e7d2      	b.n	8007bf8 <__sinit+0xc>
 8007c52:	bf00      	nop
 8007c54:	08008918 	.word	0x08008918
 8007c58:	08007b85 	.word	0x08007b85

08007c5c <__sfp>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	4607      	mov	r7, r0
 8007c60:	f7ff ffac 	bl	8007bbc <__sfp_lock_acquire>
 8007c64:	4b1e      	ldr	r3, [pc, #120]	; (8007ce0 <__sfp+0x84>)
 8007c66:	681e      	ldr	r6, [r3, #0]
 8007c68:	69b3      	ldr	r3, [r6, #24]
 8007c6a:	b913      	cbnz	r3, 8007c72 <__sfp+0x16>
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff ffbd 	bl	8007bec <__sinit>
 8007c72:	3648      	adds	r6, #72	; 0x48
 8007c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	d503      	bpl.n	8007c84 <__sfp+0x28>
 8007c7c:	6833      	ldr	r3, [r6, #0]
 8007c7e:	b30b      	cbz	r3, 8007cc4 <__sfp+0x68>
 8007c80:	6836      	ldr	r6, [r6, #0]
 8007c82:	e7f7      	b.n	8007c74 <__sfp+0x18>
 8007c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c88:	b9d5      	cbnz	r5, 8007cc0 <__sfp+0x64>
 8007c8a:	4b16      	ldr	r3, [pc, #88]	; (8007ce4 <__sfp+0x88>)
 8007c8c:	60e3      	str	r3, [r4, #12]
 8007c8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c92:	6665      	str	r5, [r4, #100]	; 0x64
 8007c94:	f000 f847 	bl	8007d26 <__retarget_lock_init_recursive>
 8007c98:	f7ff ff96 	bl	8007bc8 <__sfp_lock_release>
 8007c9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ca4:	6025      	str	r5, [r4, #0]
 8007ca6:	61a5      	str	r5, [r4, #24]
 8007ca8:	2208      	movs	r2, #8
 8007caa:	4629      	mov	r1, r5
 8007cac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cb0:	f7ff fd2c 	bl	800770c <memset>
 8007cb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc0:	3468      	adds	r4, #104	; 0x68
 8007cc2:	e7d9      	b.n	8007c78 <__sfp+0x1c>
 8007cc4:	2104      	movs	r1, #4
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	f7ff ff62 	bl	8007b90 <__sfmoreglue>
 8007ccc:	4604      	mov	r4, r0
 8007cce:	6030      	str	r0, [r6, #0]
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d1d5      	bne.n	8007c80 <__sfp+0x24>
 8007cd4:	f7ff ff78 	bl	8007bc8 <__sfp_lock_release>
 8007cd8:	230c      	movs	r3, #12
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	e7ee      	b.n	8007cbc <__sfp+0x60>
 8007cde:	bf00      	nop
 8007ce0:	08008918 	.word	0x08008918
 8007ce4:	ffff0001 	.word	0xffff0001

08007ce8 <_fwalk_reent>:
 8007ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cec:	4606      	mov	r6, r0
 8007cee:	4688      	mov	r8, r1
 8007cf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cf4:	2700      	movs	r7, #0
 8007cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8007cfe:	d505      	bpl.n	8007d0c <_fwalk_reent+0x24>
 8007d00:	6824      	ldr	r4, [r4, #0]
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	d1f7      	bne.n	8007cf6 <_fwalk_reent+0xe>
 8007d06:	4638      	mov	r0, r7
 8007d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d0c:	89ab      	ldrh	r3, [r5, #12]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d907      	bls.n	8007d22 <_fwalk_reent+0x3a>
 8007d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d16:	3301      	adds	r3, #1
 8007d18:	d003      	beq.n	8007d22 <_fwalk_reent+0x3a>
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	47c0      	blx	r8
 8007d20:	4307      	orrs	r7, r0
 8007d22:	3568      	adds	r5, #104	; 0x68
 8007d24:	e7e9      	b.n	8007cfa <_fwalk_reent+0x12>

08007d26 <__retarget_lock_init_recursive>:
 8007d26:	4770      	bx	lr

08007d28 <__retarget_lock_acquire_recursive>:
 8007d28:	4770      	bx	lr

08007d2a <__retarget_lock_release_recursive>:
 8007d2a:	4770      	bx	lr

08007d2c <__swhatbuf_r>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	460e      	mov	r6, r1
 8007d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d34:	2900      	cmp	r1, #0
 8007d36:	b096      	sub	sp, #88	; 0x58
 8007d38:	4614      	mov	r4, r2
 8007d3a:	461d      	mov	r5, r3
 8007d3c:	da07      	bge.n	8007d4e <__swhatbuf_r+0x22>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	89b3      	ldrh	r3, [r6, #12]
 8007d44:	061a      	lsls	r2, r3, #24
 8007d46:	d410      	bmi.n	8007d6a <__swhatbuf_r+0x3e>
 8007d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d4c:	e00e      	b.n	8007d6c <__swhatbuf_r+0x40>
 8007d4e:	466a      	mov	r2, sp
 8007d50:	f000 fc5e 	bl	8008610 <_fstat_r>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	dbf2      	blt.n	8007d3e <__swhatbuf_r+0x12>
 8007d58:	9a01      	ldr	r2, [sp, #4]
 8007d5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d62:	425a      	negs	r2, r3
 8007d64:	415a      	adcs	r2, r3
 8007d66:	602a      	str	r2, [r5, #0]
 8007d68:	e7ee      	b.n	8007d48 <__swhatbuf_r+0x1c>
 8007d6a:	2340      	movs	r3, #64	; 0x40
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	b016      	add	sp, #88	; 0x58
 8007d72:	bd70      	pop	{r4, r5, r6, pc}

08007d74 <__smakebuf_r>:
 8007d74:	898b      	ldrh	r3, [r1, #12]
 8007d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d78:	079d      	lsls	r5, r3, #30
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	d507      	bpl.n	8007d90 <__smakebuf_r+0x1c>
 8007d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	6123      	str	r3, [r4, #16]
 8007d88:	2301      	movs	r3, #1
 8007d8a:	6163      	str	r3, [r4, #20]
 8007d8c:	b002      	add	sp, #8
 8007d8e:	bd70      	pop	{r4, r5, r6, pc}
 8007d90:	ab01      	add	r3, sp, #4
 8007d92:	466a      	mov	r2, sp
 8007d94:	f7ff ffca 	bl	8007d2c <__swhatbuf_r>
 8007d98:	9900      	ldr	r1, [sp, #0]
 8007d9a:	4605      	mov	r5, r0
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 f879 	bl	8007e94 <_malloc_r>
 8007da2:	b948      	cbnz	r0, 8007db8 <__smakebuf_r+0x44>
 8007da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da8:	059a      	lsls	r2, r3, #22
 8007daa:	d4ef      	bmi.n	8007d8c <__smakebuf_r+0x18>
 8007dac:	f023 0303 	bic.w	r3, r3, #3
 8007db0:	f043 0302 	orr.w	r3, r3, #2
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	e7e3      	b.n	8007d80 <__smakebuf_r+0xc>
 8007db8:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <__smakebuf_r+0x7c>)
 8007dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	6020      	str	r0, [r4, #0]
 8007dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	9b00      	ldr	r3, [sp, #0]
 8007dc8:	6163      	str	r3, [r4, #20]
 8007dca:	9b01      	ldr	r3, [sp, #4]
 8007dcc:	6120      	str	r0, [r4, #16]
 8007dce:	b15b      	cbz	r3, 8007de8 <__smakebuf_r+0x74>
 8007dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f000 fc2d 	bl	8008634 <_isatty_r>
 8007dda:	b128      	cbz	r0, 8007de8 <__smakebuf_r+0x74>
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	f043 0301 	orr.w	r3, r3, #1
 8007de6:	81a3      	strh	r3, [r4, #12]
 8007de8:	89a0      	ldrh	r0, [r4, #12]
 8007dea:	4305      	orrs	r5, r0
 8007dec:	81a5      	strh	r5, [r4, #12]
 8007dee:	e7cd      	b.n	8007d8c <__smakebuf_r+0x18>
 8007df0:	08007b85 	.word	0x08007b85

08007df4 <_free_r>:
 8007df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007df6:	2900      	cmp	r1, #0
 8007df8:	d048      	beq.n	8007e8c <_free_r+0x98>
 8007dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dfe:	9001      	str	r0, [sp, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f1a1 0404 	sub.w	r4, r1, #4
 8007e06:	bfb8      	it	lt
 8007e08:	18e4      	addlt	r4, r4, r3
 8007e0a:	f000 fc35 	bl	8008678 <__malloc_lock>
 8007e0e:	4a20      	ldr	r2, [pc, #128]	; (8007e90 <_free_r+0x9c>)
 8007e10:	9801      	ldr	r0, [sp, #4]
 8007e12:	6813      	ldr	r3, [r2, #0]
 8007e14:	4615      	mov	r5, r2
 8007e16:	b933      	cbnz	r3, 8007e26 <_free_r+0x32>
 8007e18:	6063      	str	r3, [r4, #4]
 8007e1a:	6014      	str	r4, [r2, #0]
 8007e1c:	b003      	add	sp, #12
 8007e1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e22:	f000 bc2f 	b.w	8008684 <__malloc_unlock>
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	d90b      	bls.n	8007e42 <_free_r+0x4e>
 8007e2a:	6821      	ldr	r1, [r4, #0]
 8007e2c:	1862      	adds	r2, r4, r1
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	bf04      	itt	eq
 8007e32:	681a      	ldreq	r2, [r3, #0]
 8007e34:	685b      	ldreq	r3, [r3, #4]
 8007e36:	6063      	str	r3, [r4, #4]
 8007e38:	bf04      	itt	eq
 8007e3a:	1852      	addeq	r2, r2, r1
 8007e3c:	6022      	streq	r2, [r4, #0]
 8007e3e:	602c      	str	r4, [r5, #0]
 8007e40:	e7ec      	b.n	8007e1c <_free_r+0x28>
 8007e42:	461a      	mov	r2, r3
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	b10b      	cbz	r3, 8007e4c <_free_r+0x58>
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	d9fa      	bls.n	8007e42 <_free_r+0x4e>
 8007e4c:	6811      	ldr	r1, [r2, #0]
 8007e4e:	1855      	adds	r5, r2, r1
 8007e50:	42a5      	cmp	r5, r4
 8007e52:	d10b      	bne.n	8007e6c <_free_r+0x78>
 8007e54:	6824      	ldr	r4, [r4, #0]
 8007e56:	4421      	add	r1, r4
 8007e58:	1854      	adds	r4, r2, r1
 8007e5a:	42a3      	cmp	r3, r4
 8007e5c:	6011      	str	r1, [r2, #0]
 8007e5e:	d1dd      	bne.n	8007e1c <_free_r+0x28>
 8007e60:	681c      	ldr	r4, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	6053      	str	r3, [r2, #4]
 8007e66:	4421      	add	r1, r4
 8007e68:	6011      	str	r1, [r2, #0]
 8007e6a:	e7d7      	b.n	8007e1c <_free_r+0x28>
 8007e6c:	d902      	bls.n	8007e74 <_free_r+0x80>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	6003      	str	r3, [r0, #0]
 8007e72:	e7d3      	b.n	8007e1c <_free_r+0x28>
 8007e74:	6825      	ldr	r5, [r4, #0]
 8007e76:	1961      	adds	r1, r4, r5
 8007e78:	428b      	cmp	r3, r1
 8007e7a:	bf04      	itt	eq
 8007e7c:	6819      	ldreq	r1, [r3, #0]
 8007e7e:	685b      	ldreq	r3, [r3, #4]
 8007e80:	6063      	str	r3, [r4, #4]
 8007e82:	bf04      	itt	eq
 8007e84:	1949      	addeq	r1, r1, r5
 8007e86:	6021      	streq	r1, [r4, #0]
 8007e88:	6054      	str	r4, [r2, #4]
 8007e8a:	e7c7      	b.n	8007e1c <_free_r+0x28>
 8007e8c:	b003      	add	sp, #12
 8007e8e:	bd30      	pop	{r4, r5, pc}
 8007e90:	200049a4 	.word	0x200049a4

08007e94 <_malloc_r>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	1ccd      	adds	r5, r1, #3
 8007e98:	f025 0503 	bic.w	r5, r5, #3
 8007e9c:	3508      	adds	r5, #8
 8007e9e:	2d0c      	cmp	r5, #12
 8007ea0:	bf38      	it	cc
 8007ea2:	250c      	movcc	r5, #12
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	db01      	blt.n	8007eae <_malloc_r+0x1a>
 8007eaa:	42a9      	cmp	r1, r5
 8007eac:	d903      	bls.n	8007eb6 <_malloc_r+0x22>
 8007eae:	230c      	movs	r3, #12
 8007eb0:	6033      	str	r3, [r6, #0]
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb6:	f000 fbdf 	bl	8008678 <__malloc_lock>
 8007eba:	4921      	ldr	r1, [pc, #132]	; (8007f40 <_malloc_r+0xac>)
 8007ebc:	680a      	ldr	r2, [r1, #0]
 8007ebe:	4614      	mov	r4, r2
 8007ec0:	b99c      	cbnz	r4, 8007eea <_malloc_r+0x56>
 8007ec2:	4f20      	ldr	r7, [pc, #128]	; (8007f44 <_malloc_r+0xb0>)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	b923      	cbnz	r3, 8007ed2 <_malloc_r+0x3e>
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f000 fb2a 	bl	8008524 <_sbrk_r>
 8007ed0:	6038      	str	r0, [r7, #0]
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f000 fb25 	bl	8008524 <_sbrk_r>
 8007eda:	1c43      	adds	r3, r0, #1
 8007edc:	d123      	bne.n	8007f26 <_malloc_r+0x92>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	6033      	str	r3, [r6, #0]
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 fbce 	bl	8008684 <__malloc_unlock>
 8007ee8:	e7e3      	b.n	8007eb2 <_malloc_r+0x1e>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	1b5b      	subs	r3, r3, r5
 8007eee:	d417      	bmi.n	8007f20 <_malloc_r+0x8c>
 8007ef0:	2b0b      	cmp	r3, #11
 8007ef2:	d903      	bls.n	8007efc <_malloc_r+0x68>
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	441c      	add	r4, r3
 8007ef8:	6025      	str	r5, [r4, #0]
 8007efa:	e004      	b.n	8007f06 <_malloc_r+0x72>
 8007efc:	6863      	ldr	r3, [r4, #4]
 8007efe:	42a2      	cmp	r2, r4
 8007f00:	bf0c      	ite	eq
 8007f02:	600b      	streq	r3, [r1, #0]
 8007f04:	6053      	strne	r3, [r2, #4]
 8007f06:	4630      	mov	r0, r6
 8007f08:	f000 fbbc 	bl	8008684 <__malloc_unlock>
 8007f0c:	f104 000b 	add.w	r0, r4, #11
 8007f10:	1d23      	adds	r3, r4, #4
 8007f12:	f020 0007 	bic.w	r0, r0, #7
 8007f16:	1ac2      	subs	r2, r0, r3
 8007f18:	d0cc      	beq.n	8007eb4 <_malloc_r+0x20>
 8007f1a:	1a1b      	subs	r3, r3, r0
 8007f1c:	50a3      	str	r3, [r4, r2]
 8007f1e:	e7c9      	b.n	8007eb4 <_malloc_r+0x20>
 8007f20:	4622      	mov	r2, r4
 8007f22:	6864      	ldr	r4, [r4, #4]
 8007f24:	e7cc      	b.n	8007ec0 <_malloc_r+0x2c>
 8007f26:	1cc4      	adds	r4, r0, #3
 8007f28:	f024 0403 	bic.w	r4, r4, #3
 8007f2c:	42a0      	cmp	r0, r4
 8007f2e:	d0e3      	beq.n	8007ef8 <_malloc_r+0x64>
 8007f30:	1a21      	subs	r1, r4, r0
 8007f32:	4630      	mov	r0, r6
 8007f34:	f000 faf6 	bl	8008524 <_sbrk_r>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d1dd      	bne.n	8007ef8 <_malloc_r+0x64>
 8007f3c:	e7cf      	b.n	8007ede <_malloc_r+0x4a>
 8007f3e:	bf00      	nop
 8007f40:	200049a4 	.word	0x200049a4
 8007f44:	200049a8 	.word	0x200049a8

08007f48 <__sfputc_r>:
 8007f48:	6893      	ldr	r3, [r2, #8]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	b410      	push	{r4}
 8007f50:	6093      	str	r3, [r2, #8]
 8007f52:	da08      	bge.n	8007f66 <__sfputc_r+0x1e>
 8007f54:	6994      	ldr	r4, [r2, #24]
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	db01      	blt.n	8007f5e <__sfputc_r+0x16>
 8007f5a:	290a      	cmp	r1, #10
 8007f5c:	d103      	bne.n	8007f66 <__sfputc_r+0x1e>
 8007f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f62:	f7ff bc69 	b.w	8007838 <__swbuf_r>
 8007f66:	6813      	ldr	r3, [r2, #0]
 8007f68:	1c58      	adds	r0, r3, #1
 8007f6a:	6010      	str	r0, [r2, #0]
 8007f6c:	7019      	strb	r1, [r3, #0]
 8007f6e:	4608      	mov	r0, r1
 8007f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <__sfputs_r>:
 8007f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f78:	4606      	mov	r6, r0
 8007f7a:	460f      	mov	r7, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	18d5      	adds	r5, r2, r3
 8007f80:	42ac      	cmp	r4, r5
 8007f82:	d101      	bne.n	8007f88 <__sfputs_r+0x12>
 8007f84:	2000      	movs	r0, #0
 8007f86:	e007      	b.n	8007f98 <__sfputs_r+0x22>
 8007f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8c:	463a      	mov	r2, r7
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7ff ffda 	bl	8007f48 <__sfputc_r>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d1f3      	bne.n	8007f80 <__sfputs_r+0xa>
 8007f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f9c <_vfiprintf_r>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	b09d      	sub	sp, #116	; 0x74
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	4698      	mov	r8, r3
 8007fa8:	4606      	mov	r6, r0
 8007faa:	b118      	cbz	r0, 8007fb4 <_vfiprintf_r+0x18>
 8007fac:	6983      	ldr	r3, [r0, #24]
 8007fae:	b90b      	cbnz	r3, 8007fb4 <_vfiprintf_r+0x18>
 8007fb0:	f7ff fe1c 	bl	8007bec <__sinit>
 8007fb4:	4b89      	ldr	r3, [pc, #548]	; (80081dc <_vfiprintf_r+0x240>)
 8007fb6:	429d      	cmp	r5, r3
 8007fb8:	d11b      	bne.n	8007ff2 <_vfiprintf_r+0x56>
 8007fba:	6875      	ldr	r5, [r6, #4]
 8007fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fbe:	07d9      	lsls	r1, r3, #31
 8007fc0:	d405      	bmi.n	8007fce <_vfiprintf_r+0x32>
 8007fc2:	89ab      	ldrh	r3, [r5, #12]
 8007fc4:	059a      	lsls	r2, r3, #22
 8007fc6:	d402      	bmi.n	8007fce <_vfiprintf_r+0x32>
 8007fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fca:	f7ff fead 	bl	8007d28 <__retarget_lock_acquire_recursive>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	071b      	lsls	r3, r3, #28
 8007fd2:	d501      	bpl.n	8007fd8 <_vfiprintf_r+0x3c>
 8007fd4:	692b      	ldr	r3, [r5, #16]
 8007fd6:	b9eb      	cbnz	r3, 8008014 <_vfiprintf_r+0x78>
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff fc7e 	bl	80078dc <__swsetup_r>
 8007fe0:	b1c0      	cbz	r0, 8008014 <_vfiprintf_r+0x78>
 8007fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe4:	07dc      	lsls	r4, r3, #31
 8007fe6:	d50e      	bpl.n	8008006 <_vfiprintf_r+0x6a>
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	b01d      	add	sp, #116	; 0x74
 8007fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff2:	4b7b      	ldr	r3, [pc, #492]	; (80081e0 <_vfiprintf_r+0x244>)
 8007ff4:	429d      	cmp	r5, r3
 8007ff6:	d101      	bne.n	8007ffc <_vfiprintf_r+0x60>
 8007ff8:	68b5      	ldr	r5, [r6, #8]
 8007ffa:	e7df      	b.n	8007fbc <_vfiprintf_r+0x20>
 8007ffc:	4b79      	ldr	r3, [pc, #484]	; (80081e4 <_vfiprintf_r+0x248>)
 8007ffe:	429d      	cmp	r5, r3
 8008000:	bf08      	it	eq
 8008002:	68f5      	ldreq	r5, [r6, #12]
 8008004:	e7da      	b.n	8007fbc <_vfiprintf_r+0x20>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	0598      	lsls	r0, r3, #22
 800800a:	d4ed      	bmi.n	8007fe8 <_vfiprintf_r+0x4c>
 800800c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800800e:	f7ff fe8c 	bl	8007d2a <__retarget_lock_release_recursive>
 8008012:	e7e9      	b.n	8007fe8 <_vfiprintf_r+0x4c>
 8008014:	2300      	movs	r3, #0
 8008016:	9309      	str	r3, [sp, #36]	; 0x24
 8008018:	2320      	movs	r3, #32
 800801a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800801e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008022:	2330      	movs	r3, #48	; 0x30
 8008024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081e8 <_vfiprintf_r+0x24c>
 8008028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800802c:	f04f 0901 	mov.w	r9, #1
 8008030:	4623      	mov	r3, r4
 8008032:	469a      	mov	sl, r3
 8008034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008038:	b10a      	cbz	r2, 800803e <_vfiprintf_r+0xa2>
 800803a:	2a25      	cmp	r2, #37	; 0x25
 800803c:	d1f9      	bne.n	8008032 <_vfiprintf_r+0x96>
 800803e:	ebba 0b04 	subs.w	fp, sl, r4
 8008042:	d00b      	beq.n	800805c <_vfiprintf_r+0xc0>
 8008044:	465b      	mov	r3, fp
 8008046:	4622      	mov	r2, r4
 8008048:	4629      	mov	r1, r5
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff ff93 	bl	8007f76 <__sfputs_r>
 8008050:	3001      	adds	r0, #1
 8008052:	f000 80aa 	beq.w	80081aa <_vfiprintf_r+0x20e>
 8008056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008058:	445a      	add	r2, fp
 800805a:	9209      	str	r2, [sp, #36]	; 0x24
 800805c:	f89a 3000 	ldrb.w	r3, [sl]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 80a2 	beq.w	80081aa <_vfiprintf_r+0x20e>
 8008066:	2300      	movs	r3, #0
 8008068:	f04f 32ff 	mov.w	r2, #4294967295
 800806c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008070:	f10a 0a01 	add.w	sl, sl, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	9307      	str	r3, [sp, #28]
 8008078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800807c:	931a      	str	r3, [sp, #104]	; 0x68
 800807e:	4654      	mov	r4, sl
 8008080:	2205      	movs	r2, #5
 8008082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008086:	4858      	ldr	r0, [pc, #352]	; (80081e8 <_vfiprintf_r+0x24c>)
 8008088:	f7f8 f8a2 	bl	80001d0 <memchr>
 800808c:	9a04      	ldr	r2, [sp, #16]
 800808e:	b9d8      	cbnz	r0, 80080c8 <_vfiprintf_r+0x12c>
 8008090:	06d1      	lsls	r1, r2, #27
 8008092:	bf44      	itt	mi
 8008094:	2320      	movmi	r3, #32
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800809a:	0713      	lsls	r3, r2, #28
 800809c:	bf44      	itt	mi
 800809e:	232b      	movmi	r3, #43	; 0x2b
 80080a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b2a      	cmp	r3, #42	; 0x2a
 80080aa:	d015      	beq.n	80080d8 <_vfiprintf_r+0x13c>
 80080ac:	9a07      	ldr	r2, [sp, #28]
 80080ae:	4654      	mov	r4, sl
 80080b0:	2000      	movs	r0, #0
 80080b2:	f04f 0c0a 	mov.w	ip, #10
 80080b6:	4621      	mov	r1, r4
 80080b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080bc:	3b30      	subs	r3, #48	; 0x30
 80080be:	2b09      	cmp	r3, #9
 80080c0:	d94e      	bls.n	8008160 <_vfiprintf_r+0x1c4>
 80080c2:	b1b0      	cbz	r0, 80080f2 <_vfiprintf_r+0x156>
 80080c4:	9207      	str	r2, [sp, #28]
 80080c6:	e014      	b.n	80080f2 <_vfiprintf_r+0x156>
 80080c8:	eba0 0308 	sub.w	r3, r0, r8
 80080cc:	fa09 f303 	lsl.w	r3, r9, r3
 80080d0:	4313      	orrs	r3, r2
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	46a2      	mov	sl, r4
 80080d6:	e7d2      	b.n	800807e <_vfiprintf_r+0xe2>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	1d19      	adds	r1, r3, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	9103      	str	r1, [sp, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfbb      	ittet	lt
 80080e4:	425b      	neglt	r3, r3
 80080e6:	f042 0202 	orrlt.w	r2, r2, #2
 80080ea:	9307      	strge	r3, [sp, #28]
 80080ec:	9307      	strlt	r3, [sp, #28]
 80080ee:	bfb8      	it	lt
 80080f0:	9204      	strlt	r2, [sp, #16]
 80080f2:	7823      	ldrb	r3, [r4, #0]
 80080f4:	2b2e      	cmp	r3, #46	; 0x2e
 80080f6:	d10c      	bne.n	8008112 <_vfiprintf_r+0x176>
 80080f8:	7863      	ldrb	r3, [r4, #1]
 80080fa:	2b2a      	cmp	r3, #42	; 0x2a
 80080fc:	d135      	bne.n	800816a <_vfiprintf_r+0x1ce>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	9203      	str	r2, [sp, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	bfb8      	it	lt
 800810a:	f04f 33ff 	movlt.w	r3, #4294967295
 800810e:	3402      	adds	r4, #2
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081f8 <_vfiprintf_r+0x25c>
 8008116:	7821      	ldrb	r1, [r4, #0]
 8008118:	2203      	movs	r2, #3
 800811a:	4650      	mov	r0, sl
 800811c:	f7f8 f858 	bl	80001d0 <memchr>
 8008120:	b140      	cbz	r0, 8008134 <_vfiprintf_r+0x198>
 8008122:	2340      	movs	r3, #64	; 0x40
 8008124:	eba0 000a 	sub.w	r0, r0, sl
 8008128:	fa03 f000 	lsl.w	r0, r3, r0
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	4303      	orrs	r3, r0
 8008130:	3401      	adds	r4, #1
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008138:	482c      	ldr	r0, [pc, #176]	; (80081ec <_vfiprintf_r+0x250>)
 800813a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800813e:	2206      	movs	r2, #6
 8008140:	f7f8 f846 	bl	80001d0 <memchr>
 8008144:	2800      	cmp	r0, #0
 8008146:	d03f      	beq.n	80081c8 <_vfiprintf_r+0x22c>
 8008148:	4b29      	ldr	r3, [pc, #164]	; (80081f0 <_vfiprintf_r+0x254>)
 800814a:	bb1b      	cbnz	r3, 8008194 <_vfiprintf_r+0x1f8>
 800814c:	9b03      	ldr	r3, [sp, #12]
 800814e:	3307      	adds	r3, #7
 8008150:	f023 0307 	bic.w	r3, r3, #7
 8008154:	3308      	adds	r3, #8
 8008156:	9303      	str	r3, [sp, #12]
 8008158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800815a:	443b      	add	r3, r7
 800815c:	9309      	str	r3, [sp, #36]	; 0x24
 800815e:	e767      	b.n	8008030 <_vfiprintf_r+0x94>
 8008160:	fb0c 3202 	mla	r2, ip, r2, r3
 8008164:	460c      	mov	r4, r1
 8008166:	2001      	movs	r0, #1
 8008168:	e7a5      	b.n	80080b6 <_vfiprintf_r+0x11a>
 800816a:	2300      	movs	r3, #0
 800816c:	3401      	adds	r4, #1
 800816e:	9305      	str	r3, [sp, #20]
 8008170:	4619      	mov	r1, r3
 8008172:	f04f 0c0a 	mov.w	ip, #10
 8008176:	4620      	mov	r0, r4
 8008178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800817c:	3a30      	subs	r2, #48	; 0x30
 800817e:	2a09      	cmp	r2, #9
 8008180:	d903      	bls.n	800818a <_vfiprintf_r+0x1ee>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0c5      	beq.n	8008112 <_vfiprintf_r+0x176>
 8008186:	9105      	str	r1, [sp, #20]
 8008188:	e7c3      	b.n	8008112 <_vfiprintf_r+0x176>
 800818a:	fb0c 2101 	mla	r1, ip, r1, r2
 800818e:	4604      	mov	r4, r0
 8008190:	2301      	movs	r3, #1
 8008192:	e7f0      	b.n	8008176 <_vfiprintf_r+0x1da>
 8008194:	ab03      	add	r3, sp, #12
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	462a      	mov	r2, r5
 800819a:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <_vfiprintf_r+0x258>)
 800819c:	a904      	add	r1, sp, #16
 800819e:	4630      	mov	r0, r6
 80081a0:	f3af 8000 	nop.w
 80081a4:	4607      	mov	r7, r0
 80081a6:	1c78      	adds	r0, r7, #1
 80081a8:	d1d6      	bne.n	8008158 <_vfiprintf_r+0x1bc>
 80081aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081ac:	07d9      	lsls	r1, r3, #31
 80081ae:	d405      	bmi.n	80081bc <_vfiprintf_r+0x220>
 80081b0:	89ab      	ldrh	r3, [r5, #12]
 80081b2:	059a      	lsls	r2, r3, #22
 80081b4:	d402      	bmi.n	80081bc <_vfiprintf_r+0x220>
 80081b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b8:	f7ff fdb7 	bl	8007d2a <__retarget_lock_release_recursive>
 80081bc:	89ab      	ldrh	r3, [r5, #12]
 80081be:	065b      	lsls	r3, r3, #25
 80081c0:	f53f af12 	bmi.w	8007fe8 <_vfiprintf_r+0x4c>
 80081c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081c6:	e711      	b.n	8007fec <_vfiprintf_r+0x50>
 80081c8:	ab03      	add	r3, sp, #12
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	462a      	mov	r2, r5
 80081ce:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <_vfiprintf_r+0x258>)
 80081d0:	a904      	add	r1, sp, #16
 80081d2:	4630      	mov	r0, r6
 80081d4:	f000 f880 	bl	80082d8 <_printf_i>
 80081d8:	e7e4      	b.n	80081a4 <_vfiprintf_r+0x208>
 80081da:	bf00      	nop
 80081dc:	0800893c 	.word	0x0800893c
 80081e0:	0800895c 	.word	0x0800895c
 80081e4:	0800891c 	.word	0x0800891c
 80081e8:	0800897c 	.word	0x0800897c
 80081ec:	08008986 	.word	0x08008986
 80081f0:	00000000 	.word	0x00000000
 80081f4:	08007f77 	.word	0x08007f77
 80081f8:	08008982 	.word	0x08008982

080081fc <_printf_common>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	4616      	mov	r6, r2
 8008202:	4699      	mov	r9, r3
 8008204:	688a      	ldr	r2, [r1, #8]
 8008206:	690b      	ldr	r3, [r1, #16]
 8008208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800820c:	4293      	cmp	r3, r2
 800820e:	bfb8      	it	lt
 8008210:	4613      	movlt	r3, r2
 8008212:	6033      	str	r3, [r6, #0]
 8008214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008218:	4607      	mov	r7, r0
 800821a:	460c      	mov	r4, r1
 800821c:	b10a      	cbz	r2, 8008222 <_printf_common+0x26>
 800821e:	3301      	adds	r3, #1
 8008220:	6033      	str	r3, [r6, #0]
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	0699      	lsls	r1, r3, #26
 8008226:	bf42      	ittt	mi
 8008228:	6833      	ldrmi	r3, [r6, #0]
 800822a:	3302      	addmi	r3, #2
 800822c:	6033      	strmi	r3, [r6, #0]
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	f015 0506 	ands.w	r5, r5, #6
 8008234:	d106      	bne.n	8008244 <_printf_common+0x48>
 8008236:	f104 0a19 	add.w	sl, r4, #25
 800823a:	68e3      	ldr	r3, [r4, #12]
 800823c:	6832      	ldr	r2, [r6, #0]
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	42ab      	cmp	r3, r5
 8008242:	dc26      	bgt.n	8008292 <_printf_common+0x96>
 8008244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008248:	1e13      	subs	r3, r2, #0
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	bf18      	it	ne
 800824e:	2301      	movne	r3, #1
 8008250:	0692      	lsls	r2, r2, #26
 8008252:	d42b      	bmi.n	80082ac <_printf_common+0xb0>
 8008254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008258:	4649      	mov	r1, r9
 800825a:	4638      	mov	r0, r7
 800825c:	47c0      	blx	r8
 800825e:	3001      	adds	r0, #1
 8008260:	d01e      	beq.n	80082a0 <_printf_common+0xa4>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	68e5      	ldr	r5, [r4, #12]
 8008266:	6832      	ldr	r2, [r6, #0]
 8008268:	f003 0306 	and.w	r3, r3, #6
 800826c:	2b04      	cmp	r3, #4
 800826e:	bf08      	it	eq
 8008270:	1aad      	subeq	r5, r5, r2
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	6922      	ldr	r2, [r4, #16]
 8008276:	bf0c      	ite	eq
 8008278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800827c:	2500      	movne	r5, #0
 800827e:	4293      	cmp	r3, r2
 8008280:	bfc4      	itt	gt
 8008282:	1a9b      	subgt	r3, r3, r2
 8008284:	18ed      	addgt	r5, r5, r3
 8008286:	2600      	movs	r6, #0
 8008288:	341a      	adds	r4, #26
 800828a:	42b5      	cmp	r5, r6
 800828c:	d11a      	bne.n	80082c4 <_printf_common+0xc8>
 800828e:	2000      	movs	r0, #0
 8008290:	e008      	b.n	80082a4 <_printf_common+0xa8>
 8008292:	2301      	movs	r3, #1
 8008294:	4652      	mov	r2, sl
 8008296:	4649      	mov	r1, r9
 8008298:	4638      	mov	r0, r7
 800829a:	47c0      	blx	r8
 800829c:	3001      	adds	r0, #1
 800829e:	d103      	bne.n	80082a8 <_printf_common+0xac>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a8:	3501      	adds	r5, #1
 80082aa:	e7c6      	b.n	800823a <_printf_common+0x3e>
 80082ac:	18e1      	adds	r1, r4, r3
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	2030      	movs	r0, #48	; 0x30
 80082b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082b6:	4422      	add	r2, r4
 80082b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082c0:	3302      	adds	r3, #2
 80082c2:	e7c7      	b.n	8008254 <_printf_common+0x58>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4622      	mov	r2, r4
 80082c8:	4649      	mov	r1, r9
 80082ca:	4638      	mov	r0, r7
 80082cc:	47c0      	blx	r8
 80082ce:	3001      	adds	r0, #1
 80082d0:	d0e6      	beq.n	80082a0 <_printf_common+0xa4>
 80082d2:	3601      	adds	r6, #1
 80082d4:	e7d9      	b.n	800828a <_printf_common+0x8e>
	...

080082d8 <_printf_i>:
 80082d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	460c      	mov	r4, r1
 80082de:	4691      	mov	r9, r2
 80082e0:	7e27      	ldrb	r7, [r4, #24]
 80082e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082e4:	2f78      	cmp	r7, #120	; 0x78
 80082e6:	4680      	mov	r8, r0
 80082e8:	469a      	mov	sl, r3
 80082ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ee:	d807      	bhi.n	8008300 <_printf_i+0x28>
 80082f0:	2f62      	cmp	r7, #98	; 0x62
 80082f2:	d80a      	bhi.n	800830a <_printf_i+0x32>
 80082f4:	2f00      	cmp	r7, #0
 80082f6:	f000 80d8 	beq.w	80084aa <_printf_i+0x1d2>
 80082fa:	2f58      	cmp	r7, #88	; 0x58
 80082fc:	f000 80a3 	beq.w	8008446 <_printf_i+0x16e>
 8008300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008308:	e03a      	b.n	8008380 <_printf_i+0xa8>
 800830a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800830e:	2b15      	cmp	r3, #21
 8008310:	d8f6      	bhi.n	8008300 <_printf_i+0x28>
 8008312:	a001      	add	r0, pc, #4	; (adr r0, 8008318 <_printf_i+0x40>)
 8008314:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008318:	08008371 	.word	0x08008371
 800831c:	08008385 	.word	0x08008385
 8008320:	08008301 	.word	0x08008301
 8008324:	08008301 	.word	0x08008301
 8008328:	08008301 	.word	0x08008301
 800832c:	08008301 	.word	0x08008301
 8008330:	08008385 	.word	0x08008385
 8008334:	08008301 	.word	0x08008301
 8008338:	08008301 	.word	0x08008301
 800833c:	08008301 	.word	0x08008301
 8008340:	08008301 	.word	0x08008301
 8008344:	08008491 	.word	0x08008491
 8008348:	080083b5 	.word	0x080083b5
 800834c:	08008473 	.word	0x08008473
 8008350:	08008301 	.word	0x08008301
 8008354:	08008301 	.word	0x08008301
 8008358:	080084b3 	.word	0x080084b3
 800835c:	08008301 	.word	0x08008301
 8008360:	080083b5 	.word	0x080083b5
 8008364:	08008301 	.word	0x08008301
 8008368:	08008301 	.word	0x08008301
 800836c:	0800847b 	.word	0x0800847b
 8008370:	680b      	ldr	r3, [r1, #0]
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	600a      	str	r2, [r1, #0]
 8008378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800837c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008380:	2301      	movs	r3, #1
 8008382:	e0a3      	b.n	80084cc <_printf_i+0x1f4>
 8008384:	6825      	ldr	r5, [r4, #0]
 8008386:	6808      	ldr	r0, [r1, #0]
 8008388:	062e      	lsls	r6, r5, #24
 800838a:	f100 0304 	add.w	r3, r0, #4
 800838e:	d50a      	bpl.n	80083a6 <_printf_i+0xce>
 8008390:	6805      	ldr	r5, [r0, #0]
 8008392:	600b      	str	r3, [r1, #0]
 8008394:	2d00      	cmp	r5, #0
 8008396:	da03      	bge.n	80083a0 <_printf_i+0xc8>
 8008398:	232d      	movs	r3, #45	; 0x2d
 800839a:	426d      	negs	r5, r5
 800839c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a0:	485e      	ldr	r0, [pc, #376]	; (800851c <_printf_i+0x244>)
 80083a2:	230a      	movs	r3, #10
 80083a4:	e019      	b.n	80083da <_printf_i+0x102>
 80083a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80083aa:	6805      	ldr	r5, [r0, #0]
 80083ac:	600b      	str	r3, [r1, #0]
 80083ae:	bf18      	it	ne
 80083b0:	b22d      	sxthne	r5, r5
 80083b2:	e7ef      	b.n	8008394 <_printf_i+0xbc>
 80083b4:	680b      	ldr	r3, [r1, #0]
 80083b6:	6825      	ldr	r5, [r4, #0]
 80083b8:	1d18      	adds	r0, r3, #4
 80083ba:	6008      	str	r0, [r1, #0]
 80083bc:	0628      	lsls	r0, r5, #24
 80083be:	d501      	bpl.n	80083c4 <_printf_i+0xec>
 80083c0:	681d      	ldr	r5, [r3, #0]
 80083c2:	e002      	b.n	80083ca <_printf_i+0xf2>
 80083c4:	0669      	lsls	r1, r5, #25
 80083c6:	d5fb      	bpl.n	80083c0 <_printf_i+0xe8>
 80083c8:	881d      	ldrh	r5, [r3, #0]
 80083ca:	4854      	ldr	r0, [pc, #336]	; (800851c <_printf_i+0x244>)
 80083cc:	2f6f      	cmp	r7, #111	; 0x6f
 80083ce:	bf0c      	ite	eq
 80083d0:	2308      	moveq	r3, #8
 80083d2:	230a      	movne	r3, #10
 80083d4:	2100      	movs	r1, #0
 80083d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083da:	6866      	ldr	r6, [r4, #4]
 80083dc:	60a6      	str	r6, [r4, #8]
 80083de:	2e00      	cmp	r6, #0
 80083e0:	bfa2      	ittt	ge
 80083e2:	6821      	ldrge	r1, [r4, #0]
 80083e4:	f021 0104 	bicge.w	r1, r1, #4
 80083e8:	6021      	strge	r1, [r4, #0]
 80083ea:	b90d      	cbnz	r5, 80083f0 <_printf_i+0x118>
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	d04d      	beq.n	800848c <_printf_i+0x1b4>
 80083f0:	4616      	mov	r6, r2
 80083f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083f6:	fb03 5711 	mls	r7, r3, r1, r5
 80083fa:	5dc7      	ldrb	r7, [r0, r7]
 80083fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008400:	462f      	mov	r7, r5
 8008402:	42bb      	cmp	r3, r7
 8008404:	460d      	mov	r5, r1
 8008406:	d9f4      	bls.n	80083f2 <_printf_i+0x11a>
 8008408:	2b08      	cmp	r3, #8
 800840a:	d10b      	bne.n	8008424 <_printf_i+0x14c>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	07df      	lsls	r7, r3, #31
 8008410:	d508      	bpl.n	8008424 <_printf_i+0x14c>
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	6861      	ldr	r1, [r4, #4]
 8008416:	4299      	cmp	r1, r3
 8008418:	bfde      	ittt	le
 800841a:	2330      	movle	r3, #48	; 0x30
 800841c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008424:	1b92      	subs	r2, r2, r6
 8008426:	6122      	str	r2, [r4, #16]
 8008428:	f8cd a000 	str.w	sl, [sp]
 800842c:	464b      	mov	r3, r9
 800842e:	aa03      	add	r2, sp, #12
 8008430:	4621      	mov	r1, r4
 8008432:	4640      	mov	r0, r8
 8008434:	f7ff fee2 	bl	80081fc <_printf_common>
 8008438:	3001      	adds	r0, #1
 800843a:	d14c      	bne.n	80084d6 <_printf_i+0x1fe>
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	b004      	add	sp, #16
 8008442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008446:	4835      	ldr	r0, [pc, #212]	; (800851c <_printf_i+0x244>)
 8008448:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	680e      	ldr	r6, [r1, #0]
 8008450:	061f      	lsls	r7, r3, #24
 8008452:	f856 5b04 	ldr.w	r5, [r6], #4
 8008456:	600e      	str	r6, [r1, #0]
 8008458:	d514      	bpl.n	8008484 <_printf_i+0x1ac>
 800845a:	07d9      	lsls	r1, r3, #31
 800845c:	bf44      	itt	mi
 800845e:	f043 0320 	orrmi.w	r3, r3, #32
 8008462:	6023      	strmi	r3, [r4, #0]
 8008464:	b91d      	cbnz	r5, 800846e <_printf_i+0x196>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f023 0320 	bic.w	r3, r3, #32
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	2310      	movs	r3, #16
 8008470:	e7b0      	b.n	80083d4 <_printf_i+0xfc>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	f043 0320 	orr.w	r3, r3, #32
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	2378      	movs	r3, #120	; 0x78
 800847c:	4828      	ldr	r0, [pc, #160]	; (8008520 <_printf_i+0x248>)
 800847e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008482:	e7e3      	b.n	800844c <_printf_i+0x174>
 8008484:	065e      	lsls	r6, r3, #25
 8008486:	bf48      	it	mi
 8008488:	b2ad      	uxthmi	r5, r5
 800848a:	e7e6      	b.n	800845a <_printf_i+0x182>
 800848c:	4616      	mov	r6, r2
 800848e:	e7bb      	b.n	8008408 <_printf_i+0x130>
 8008490:	680b      	ldr	r3, [r1, #0]
 8008492:	6826      	ldr	r6, [r4, #0]
 8008494:	6960      	ldr	r0, [r4, #20]
 8008496:	1d1d      	adds	r5, r3, #4
 8008498:	600d      	str	r5, [r1, #0]
 800849a:	0635      	lsls	r5, r6, #24
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	d501      	bpl.n	80084a4 <_printf_i+0x1cc>
 80084a0:	6018      	str	r0, [r3, #0]
 80084a2:	e002      	b.n	80084aa <_printf_i+0x1d2>
 80084a4:	0671      	lsls	r1, r6, #25
 80084a6:	d5fb      	bpl.n	80084a0 <_printf_i+0x1c8>
 80084a8:	8018      	strh	r0, [r3, #0]
 80084aa:	2300      	movs	r3, #0
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	4616      	mov	r6, r2
 80084b0:	e7ba      	b.n	8008428 <_printf_i+0x150>
 80084b2:	680b      	ldr	r3, [r1, #0]
 80084b4:	1d1a      	adds	r2, r3, #4
 80084b6:	600a      	str	r2, [r1, #0]
 80084b8:	681e      	ldr	r6, [r3, #0]
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	2100      	movs	r1, #0
 80084be:	4630      	mov	r0, r6
 80084c0:	f7f7 fe86 	bl	80001d0 <memchr>
 80084c4:	b108      	cbz	r0, 80084ca <_printf_i+0x1f2>
 80084c6:	1b80      	subs	r0, r0, r6
 80084c8:	6060      	str	r0, [r4, #4]
 80084ca:	6863      	ldr	r3, [r4, #4]
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	2300      	movs	r3, #0
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d4:	e7a8      	b.n	8008428 <_printf_i+0x150>
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	4632      	mov	r2, r6
 80084da:	4649      	mov	r1, r9
 80084dc:	4640      	mov	r0, r8
 80084de:	47d0      	blx	sl
 80084e0:	3001      	adds	r0, #1
 80084e2:	d0ab      	beq.n	800843c <_printf_i+0x164>
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	079b      	lsls	r3, r3, #30
 80084e8:	d413      	bmi.n	8008512 <_printf_i+0x23a>
 80084ea:	68e0      	ldr	r0, [r4, #12]
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	4298      	cmp	r0, r3
 80084f0:	bfb8      	it	lt
 80084f2:	4618      	movlt	r0, r3
 80084f4:	e7a4      	b.n	8008440 <_printf_i+0x168>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4632      	mov	r2, r6
 80084fa:	4649      	mov	r1, r9
 80084fc:	4640      	mov	r0, r8
 80084fe:	47d0      	blx	sl
 8008500:	3001      	adds	r0, #1
 8008502:	d09b      	beq.n	800843c <_printf_i+0x164>
 8008504:	3501      	adds	r5, #1
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	9903      	ldr	r1, [sp, #12]
 800850a:	1a5b      	subs	r3, r3, r1
 800850c:	42ab      	cmp	r3, r5
 800850e:	dcf2      	bgt.n	80084f6 <_printf_i+0x21e>
 8008510:	e7eb      	b.n	80084ea <_printf_i+0x212>
 8008512:	2500      	movs	r5, #0
 8008514:	f104 0619 	add.w	r6, r4, #25
 8008518:	e7f5      	b.n	8008506 <_printf_i+0x22e>
 800851a:	bf00      	nop
 800851c:	0800898d 	.word	0x0800898d
 8008520:	0800899e 	.word	0x0800899e

08008524 <_sbrk_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4d06      	ldr	r5, [pc, #24]	; (8008540 <_sbrk_r+0x1c>)
 8008528:	2300      	movs	r3, #0
 800852a:	4604      	mov	r4, r0
 800852c:	4608      	mov	r0, r1
 800852e:	602b      	str	r3, [r5, #0]
 8008530:	f7f9 f97c 	bl	800182c <_sbrk>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d102      	bne.n	800853e <_sbrk_r+0x1a>
 8008538:	682b      	ldr	r3, [r5, #0]
 800853a:	b103      	cbz	r3, 800853e <_sbrk_r+0x1a>
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	bd38      	pop	{r3, r4, r5, pc}
 8008540:	20004d24 	.word	0x20004d24

08008544 <__sread>:
 8008544:	b510      	push	{r4, lr}
 8008546:	460c      	mov	r4, r1
 8008548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800854c:	f000 f8a0 	bl	8008690 <_read_r>
 8008550:	2800      	cmp	r0, #0
 8008552:	bfab      	itete	ge
 8008554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008556:	89a3      	ldrhlt	r3, [r4, #12]
 8008558:	181b      	addge	r3, r3, r0
 800855a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800855e:	bfac      	ite	ge
 8008560:	6563      	strge	r3, [r4, #84]	; 0x54
 8008562:	81a3      	strhlt	r3, [r4, #12]
 8008564:	bd10      	pop	{r4, pc}

08008566 <__swrite>:
 8008566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800856a:	461f      	mov	r7, r3
 800856c:	898b      	ldrh	r3, [r1, #12]
 800856e:	05db      	lsls	r3, r3, #23
 8008570:	4605      	mov	r5, r0
 8008572:	460c      	mov	r4, r1
 8008574:	4616      	mov	r6, r2
 8008576:	d505      	bpl.n	8008584 <__swrite+0x1e>
 8008578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857c:	2302      	movs	r3, #2
 800857e:	2200      	movs	r2, #0
 8008580:	f000 f868 	bl	8008654 <_lseek_r>
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800858a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800858e:	81a3      	strh	r3, [r4, #12]
 8008590:	4632      	mov	r2, r6
 8008592:	463b      	mov	r3, r7
 8008594:	4628      	mov	r0, r5
 8008596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800859a:	f000 b817 	b.w	80085cc <_write_r>

0800859e <__sseek>:
 800859e:	b510      	push	{r4, lr}
 80085a0:	460c      	mov	r4, r1
 80085a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a6:	f000 f855 	bl	8008654 <_lseek_r>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	bf15      	itete	ne
 80085b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80085b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085ba:	81a3      	strheq	r3, [r4, #12]
 80085bc:	bf18      	it	ne
 80085be:	81a3      	strhne	r3, [r4, #12]
 80085c0:	bd10      	pop	{r4, pc}

080085c2 <__sclose>:
 80085c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c6:	f000 b813 	b.w	80085f0 <_close_r>
	...

080085cc <_write_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4d07      	ldr	r5, [pc, #28]	; (80085ec <_write_r+0x20>)
 80085d0:	4604      	mov	r4, r0
 80085d2:	4608      	mov	r0, r1
 80085d4:	4611      	mov	r1, r2
 80085d6:	2200      	movs	r2, #0
 80085d8:	602a      	str	r2, [r5, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	f7f8 fec2 	bl	8001364 <_write>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_write_r+0x1e>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_write_r+0x1e>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20004d24 	.word	0x20004d24

080085f0 <_close_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4d06      	ldr	r5, [pc, #24]	; (800860c <_close_r+0x1c>)
 80085f4:	2300      	movs	r3, #0
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	f7f9 f8e1 	bl	80017c2 <_close>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d102      	bne.n	800860a <_close_r+0x1a>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	b103      	cbz	r3, 800860a <_close_r+0x1a>
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	bd38      	pop	{r3, r4, r5, pc}
 800860c:	20004d24 	.word	0x20004d24

08008610 <_fstat_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d07      	ldr	r5, [pc, #28]	; (8008630 <_fstat_r+0x20>)
 8008614:	2300      	movs	r3, #0
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	602b      	str	r3, [r5, #0]
 800861e:	f7f9 f8dc 	bl	80017da <_fstat>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	d102      	bne.n	800862c <_fstat_r+0x1c>
 8008626:	682b      	ldr	r3, [r5, #0]
 8008628:	b103      	cbz	r3, 800862c <_fstat_r+0x1c>
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	bd38      	pop	{r3, r4, r5, pc}
 800862e:	bf00      	nop
 8008630:	20004d24 	.word	0x20004d24

08008634 <_isatty_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4d06      	ldr	r5, [pc, #24]	; (8008650 <_isatty_r+0x1c>)
 8008638:	2300      	movs	r3, #0
 800863a:	4604      	mov	r4, r0
 800863c:	4608      	mov	r0, r1
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	f7f9 f8db 	bl	80017fa <_isatty>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_isatty_r+0x1a>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_isatty_r+0x1a>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	20004d24 	.word	0x20004d24

08008654 <_lseek_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d07      	ldr	r5, [pc, #28]	; (8008674 <_lseek_r+0x20>)
 8008658:	4604      	mov	r4, r0
 800865a:	4608      	mov	r0, r1
 800865c:	4611      	mov	r1, r2
 800865e:	2200      	movs	r2, #0
 8008660:	602a      	str	r2, [r5, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	f7f9 f8d4 	bl	8001810 <_lseek>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_lseek_r+0x1e>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_lseek_r+0x1e>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	20004d24 	.word	0x20004d24

08008678 <__malloc_lock>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__malloc_lock+0x8>)
 800867a:	f7ff bb55 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 800867e:	bf00      	nop
 8008680:	20004d1c 	.word	0x20004d1c

08008684 <__malloc_unlock>:
 8008684:	4801      	ldr	r0, [pc, #4]	; (800868c <__malloc_unlock+0x8>)
 8008686:	f7ff bb50 	b.w	8007d2a <__retarget_lock_release_recursive>
 800868a:	bf00      	nop
 800868c:	20004d1c 	.word	0x20004d1c

08008690 <_read_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	; (80086b0 <_read_r+0x20>)
 8008694:	4604      	mov	r4, r0
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	2200      	movs	r2, #0
 800869c:	602a      	str	r2, [r5, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f7f9 f872 	bl	8001788 <_read>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_read_r+0x1e>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_read_r+0x1e>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	20004d24 	.word	0x20004d24

080086b4 <_init>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr

080086c0 <_fini>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr
